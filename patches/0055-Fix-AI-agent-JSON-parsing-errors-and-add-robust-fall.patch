From 145c445d8af1e73a73bdc715189b3619e4de09c4 Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Sun, 27 Jul 2025 12:20:03 +0300
Subject: [PATCH 55/91] Fix AI agent JSON parsing errors and add robust
 fallback mechanism
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

- Enhanced PlanManager response handling to support multiple LangChain formats
- Added null/undefined response detection with descriptive error messages
- Implemented createFallbackPlan() for graceful degradation when LLM fails
- Fixed StructuredLogger to handle null values without throwing errors
- Improved error logging with detailed response inspection

The AI agent now continues working even when plan creation fails, using
a basic fallback plan (get content → analyze → take action) to ensure
automation functionality remains available.
---
 .../resources/vibe/tools/PlanManager.js       | 142 +++++++++++++++++-
 .../resources/vibe/tools/StructuredLogger.js  |   8 +-
 2 files changed, 142 insertions(+), 8 deletions(-)

diff --git a/chrome/browser/resources/vibe/tools/PlanManager.js b/chrome/browser/resources/vibe/tools/PlanManager.js
index 6353ce9a52..12771588d5 100644
--- a/chrome/browser/resources/vibe/tools/PlanManager.js
+++ b/chrome/browser/resources/vibe/tools/PlanManager.js
@@ -38,30 +38,94 @@ Return as JSON array with structure:
 }]`;
 
     try {
+      console.log(`🚀 [PLAN_MANAGER] Invoking LLM with prompt length:`, planPrompt.length);
+      console.log(`🔍 [PLAN_MANAGER] LLM instance:`, typeof llm, llm?.constructor?.name || 'unknown');
+      
+      // Check if LLM has invoke method
+      if (!llm || typeof llm.invoke !== 'function') {
+        console.error(`❌ [PLAN_MANAGER] Invalid LLM instance - missing invoke method`);
+        throw new Error('LLM instance is invalid or missing invoke method');
+      }
+      
+      console.log(`🔄 [PLAN_MANAGER] Calling llm.invoke()...`);
       const response = await llm.invoke(planPrompt);
+      console.log(`📥 [PLAN_MANAGER] LLM response received:`, typeof response, response?.constructor?.name || 'unknown');
+      console.log(`📥 [PLAN_MANAGER] Response keys:`, response ? Object.keys(response) : 'null/undefined');
+      
+      // Check if response is null/undefined
+      if (!response) {
+        console.error(`❌ [PLAN_MANAGER] LLM returned null/undefined response`);
+        throw new Error('LLM returned null response - possible API key or network issue');
+      }
+      
       let steps;
       
-      // Robust JSON parsing with retry logic
+      // Enhanced JSON parsing with detailed logging and robust response handling
+      let responseContent = null;
+      
+      // Handle different LangChain response formats
+      if (typeof response === 'string') {
+        responseContent = response;
+      } else if (response && response.content) {
+        responseContent = response.content;
+      } else if (response && response.text) {
+        responseContent = response.text;
+      } else if (response && typeof response === 'object') {
+        // Try to find content in various fields
+        responseContent = response.response || response.message || response.output || JSON.stringify(response);
+      } else {
+        console.error(`❌ [PLAN_MANAGER] Unexpected response format:`, typeof response, response);
+        responseContent = String(response || '');
+      }
+      
+      console.log(`🔍 [PLAN_MANAGER] Response content type:`, typeof responseContent);
+      console.log(`🔍 [PLAN_MANAGER] Response content length:`, responseContent?.length || 'undefined');
+      console.log(`🔍 [PLAN_MANAGER] Raw response content (first 500 chars):`, JSON.stringify(responseContent?.substring(0, 500) || 'empty'));
+      
+      if (!responseContent || responseContent.trim() === '') {
+        console.error(`❌ [PLAN_MANAGER] Empty or null response content`);
+        throw new Error('LLM returned empty response');
+      }
+      
       try {
-        steps = JSON.parse(response.content);
+        steps = JSON.parse(responseContent);
+        console.log(`✅ [PLAN_MANAGER] Successfully parsed JSON on first attempt`);
       } catch (parseError) {
-        console.warn(`⚠️ [PLAN_MANAGER] Initial JSON parse failed, attempting cleanup...`);
+        console.error(`❌ [PLAN_MANAGER] Initial JSON parse failed:`, parseError.message);
+        console.error(`📋 [PLAN_MANAGER] Full raw response content:`, JSON.stringify(responseContent));
         
         // Try to extract JSON from response if it's wrapped in text
-        const jsonMatch = response.content.match(/\[.*\]/s);
+        const jsonMatch = responseContent.match(/\[.*\]/s);
         if (jsonMatch) {
+          console.log(`🔧 [PLAN_MANAGER] Found potential JSON match:`, jsonMatch[0].substring(0, 200) + '...');
           try {
             steps = JSON.parse(jsonMatch[0]);
             console.log(`✅ [PLAN_MANAGER] Successfully extracted JSON from response`);
           } catch (secondParseError) {
+            console.error(`❌ [PLAN_MANAGER] Second JSON parse failed:`, secondParseError.message);
+            console.error(`🔧 [PLAN_MANAGER] Extracted JSON:`, JSON.stringify(jsonMatch[0]));
+            
             // Final fallback: ask LLM to reformat
             console.log(`🔄 [PLAN_MANAGER] Requesting LLM to reformat response...`);
             const reformatResponse = await llm.invoke(
-              `Please reformat this as valid JSON array only, no other text:\n${response.content}`
+              `Please reformat this as valid JSON array only, no other text:\n${responseContent}`
             );
-            steps = JSON.parse(reformatResponse.content);
+            
+            // Handle reformat response with same logic
+            let reformatContent = null;
+            if (typeof reformatResponse === 'string') {
+              reformatContent = reformatResponse;
+            } else if (reformatResponse && reformatResponse.content) {
+              reformatContent = reformatResponse.content;
+            } else {
+              reformatContent = String(reformatResponse || '');
+            }
+            
+            console.log(`🔍 [PLAN_MANAGER] Reformat response:`, JSON.stringify(reformatContent));
+            steps = JSON.parse(reformatContent);
           }
         } else {
+          console.error(`❌ [PLAN_MANAGER] No JSON array pattern found in response`);
           throw new Error(`Unable to parse plan from LLM response: ${parseError.message}`);
         }
       }
@@ -92,10 +156,74 @@ Return as JSON array with structure:
       
     } catch (error) {
       console.error(`❌ [PLAN_MANAGER] Plan creation failed:`, error);
-      throw new Error(`Failed to create plan: ${error.message}`);
+      console.warn(`🔄 [PLAN_MANAGER] Attempting fallback plan creation...`);
+      
+      // Create a fallback plan based on the goal
+      const fallbackPlan = this.createFallbackPlan(goal);
+      
+      this.plans.set(fallbackPlan.id, fallbackPlan);
+      console.log(`✅ [PLAN_MANAGER] Created fallback plan with ${fallbackPlan.steps.length} steps`);
+      
+      await this.savePlans();
+      return fallbackPlan;
     }  
   }
 
+  /**
+   * Create a fallback plan when LLM fails
+   * @param {string} goal - The goal to create a plan for
+   * @returns {Object} A basic fallback plan
+   */
+  createFallbackPlan(goal) {
+    const planId = `fallback_plan_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
+    
+    // Create basic steps for common web automation tasks
+    const fallbackSteps = [
+      {
+        id: 'step_1',
+        description: 'Get current page content to understand the context',
+        expectedOutcome: 'Page content extracted and analyzed',
+        recommendedTools: [
+          { tool: 'get_page_content', rationale: 'Extract page content for analysis', confidence: 0.9, priority: 1 }
+        ],
+        completed: false,
+        result: null
+      },
+      {
+        id: 'step_2', 
+        description: 'Analyze the request and determine the best approach',
+        expectedOutcome: 'Clear understanding of what needs to be done',
+        recommendedTools: [
+          { tool: 'reason_about_step', rationale: 'Think through the task systematically', confidence: 0.8, priority: 1 }
+        ],
+        completed: false,
+        result: null
+      },
+      {
+        id: 'step_3',
+        description: 'Take action based on the analysis', 
+        expectedOutcome: 'Task execution progress',
+        recommendedTools: [
+          { tool: 'navigate_to_url', rationale: 'Navigate if URL change needed', confidence: 0.7, priority: 1 },
+          { tool: 'fill_form', rationale: 'Fill forms if form input needed', confidence: 0.7, priority: 2 },
+          { tool: 'click_element', rationale: 'Click elements if interaction needed', confidence: 0.7, priority: 3 }
+        ],
+        completed: false,
+        result: null
+      }
+    ];
+    
+    return {
+      id: planId,
+      goal: goal,
+      createdAt: new Date().toISOString(),
+      steps: fallbackSteps,
+      status: 'draft',
+      confidence: 0.6, // Lower confidence for fallback plan
+      isFallback: true
+    };
+  }
+
   /**
    * Validate plan steps against a schema
    * @param {any[]} steps - The plan steps to validate
diff --git a/chrome/browser/resources/vibe/tools/StructuredLogger.js b/chrome/browser/resources/vibe/tools/StructuredLogger.js
index 5d7de28d9c..1bf9391d88 100644
--- a/chrome/browser/resources/vibe/tools/StructuredLogger.js
+++ b/chrome/browser/resources/vibe/tools/StructuredLogger.js
@@ -48,7 +48,13 @@ export class StructuredLogger {
       success: success,
       metadata: {
         resultType: typeof result,
-        resultSize: result !== undefined ? JSON.stringify(result).length : 0,
+        resultSize: (() => {
+          try {
+            return result != null ? JSON.stringify(result).length : 0;
+          } catch (e) {
+            return 0;
+          }
+        })(),
         hasError: !!(result && result.error)
       }
     });
-- 
2.50.0


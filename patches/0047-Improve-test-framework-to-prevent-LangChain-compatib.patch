From d10f17cc2dd0133937820aa17bee9ec488057e77 Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Sat, 26 Jul 2025 21:24:15 +0300
Subject: [PATCH 047/107] Improve test framework to prevent LangChain
 compatibility bugs

- Updated tests to reflect current tool architecture (ReportTool instead of removed FinishTool)
- Fixed ReasoningTool LangChain compatibility test to properly validate object return format
- Added comprehensive test coverage for the exact bug we fixed (JSON.stringify vs object returns)
- All 16 tests now pass, including critical tests that prevent regression of recent fixes

Test improvements catch:
1. ReasoningTool returning stringified JSON instead of objects (breaks LangChain function calling)
2. Missing core agent control tools (ReportTool replaces FinishTool functionality)
3. Tool parameter validation and proper return format verification
---
 .../resources/vibe/tests/test_runner.js       | 70 ++++++++++++++-----
 1 file changed, 54 insertions(+), 16 deletions(-)

diff --git a/chrome/browser/resources/vibe/tests/test_runner.js b/chrome/browser/resources/vibe/tests/test_runner.js
index ec0686b350..bcf19a4686 100644
--- a/chrome/browser/resources/vibe/tests/test_runner.js
+++ b/chrome/browser/resources/vibe/tests/test_runner.js
@@ -145,6 +145,16 @@ class TestFramework {
           throw new Error(`Expected object to have property "${prop}"`);
         }
       },
+      toBeInstanceOf: (expected) => {
+        if (!(actual instanceof expected)) {
+          throw new Error(`Expected ${actual} to be instance of ${expected.name}`);
+        }
+      },
+      toBeTypeOf: (expected) => {
+        if (typeof actual !== expected) {
+          throw new Error(`Expected ${actual} to be of type ${expected}, got ${typeof actual}`);
+        }
+      },
       toThrow: async () => {
         try {
           if (typeof actual === 'function') {
@@ -167,14 +177,14 @@ const expect = framework.expect.bind(framework);
 
 // Import AI tools for testing
 let browserTools;
-let finishTool, reasoningTool, getActiveTabTool, createNewTabTool, navigateToURLTool;
+let reportTool, reasoningTool, getActiveTabTool, createNewTabTool, navigateToURLTool;
 
 try {
   const aiToolsModule = await import('../ai_tools.extension.js');
   browserTools = aiToolsModule.browserTools;
   
   // Find tool instances from the browserTools array
-  finishTool = browserTools.find(tool => tool.name === 'finish_task');
+  reportTool = browserTools.find(tool => tool.name === 'report');
   reasoningTool = browserTools.find(tool => tool.name === 'reasoning');
   getActiveTabTool = browserTools.find(tool => tool.name === 'get_active_tab');
   createNewTabTool = browserTools.find(tool => tool.name === 'create_new_tab');
@@ -203,7 +213,7 @@ describe('AI Tools Export and Structure', () => {
     const toolNames = browserTools.map(tool => tool.name);
     
     // Core agent control
-    expect(toolNames.includes('finish_task')).toBe(true);
+    expect(toolNames.includes('report')).toBe(true);
     expect(toolNames.includes('reasoning')).toBe(true);
     
     // Tab management
@@ -228,21 +238,22 @@ describe('AI Tools Export and Structure', () => {
 });
 
 describe('Core Agent Control Tools', () => {
-  test('FinishTool should have correct name and description', () => {
-    expect(finishTool).toBeDefined();
-    expect(finishTool.name).toBe('finish_task');
-    expect(finishTool.description).toContain('final answer');
+  test('ReportTool should have correct name and description', () => {
+    expect(reportTool).toBeDefined();
+    expect(reportTool.name).toBe('report');
+    expect(reportTool.description).toContain('report');
   });
 
-  test('FinishTool should accept valid parameters', async () => {
-    expect(finishTool).toBeDefined();
-    const result = await finishTool.call({
-      final_answer: 'Task completed successfully',
+  test('ReportTool should accept valid parameters', async () => {
+    expect(reportTool).toBeDefined();
+    const result = await reportTool.call({
+      answer: 'Task completed successfully',
+      reasoning: 'Test reasoning for task completion',
       confidence: 'high'
     });
     
-    expect(result).toContain('Task completed successfully');
-    expect(result).toContain('high confidence');
+    expect(result.success).toBe(true);
+    expect(result.message).toContain('Task completed successfully');
   });
 
   test('ReasoningTool should have correct name and description', () => {
@@ -263,9 +274,36 @@ describe('Core Agent Control Tools', () => {
       completed_steps: ['Navigate to page', 'Get page content']
     });
 
-    expect(result).toContain('Analyzing the current page');
-    expect(result).toContain('Fill out the form');
-    expect(result).toContain('"confidence":0.8');
+    // Critical: ReasoningTool MUST return an object for LangChain function calling
+    expect(typeof result).toBe('object');
+    expect(result).toHaveProperty('thinking');
+    expect(result).toHaveProperty('evaluation');
+    expect(result).toHaveProperty('next_goal');
+    expect(result.thinking).toBe('Analyzing the current page');
+    expect(result.next_goal).toBe('Fill out the form');
+    expect(result.confidence).toBe(0.8);
+  });
+
+  test('ReasoningTool should NEVER return stringified JSON (LangChain compatibility)', async () => {
+    expect(reasoningTool).toBeDefined();
+    const result = await reasoningTool.call({
+      thinking: 'Test thinking',
+      evaluation: 'Test evaluation',
+      next_goal: 'Test goal'
+    });
+
+    // This test prevents the exact bug we just fixed
+    expect(typeof result).toBe('object');
+    
+    // Should NOT be a JSON string
+    if (typeof result === 'string') {
+      throw new Error('ReasoningTool returned JSON string instead of object - this breaks LangChain function calling');
+    }
+    
+    // Should be a proper object with expected properties
+    expect(result).toHaveProperty('thinking');
+    expect(result).toHaveProperty('evaluation');
+    expect(result).toHaveProperty('next_goal');
   });
 });
 
-- 
2.50.0


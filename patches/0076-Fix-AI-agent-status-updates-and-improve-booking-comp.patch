From cc9422c2a9ee61157c4dae96ce8f3b7475664805 Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Wed, 30 Jul 2025 00:35:11 +0300
Subject: [PATCH 76/91] Fix AI agent status updates and improve booking
 completion

- Enhanced message delivery with retry logic for Chat4 UI updates
- Added comprehensive debug logging for TOOL_UPDATE and THINKING_UPDATE messages
- Improved AgentExecutor callback handling with proper tool notifications
- Fixed earlyStoppingMethod configuration (generate -> force)
- Enhanced system prompt with detailed booking completion requirements
- Added dummy data templates for form filling
- Removed tool wrapping that interfered with LangChain callbacks

Status updates now properly display in Chat4 interface showing agent progress.
Agent instructions now emphasize completing entire booking flows.
---
 chrome/browser/resources/vibe/ai_agent.js | 162 ++++++++++++++--------
 1 file changed, 101 insertions(+), 61 deletions(-)

diff --git a/chrome/browser/resources/vibe/ai_agent.js b/chrome/browser/resources/vibe/ai_agent.js
index 83aaf6762f..4ce045b491 100644
--- a/chrome/browser/resources/vibe/ai_agent.js
+++ b/chrome/browser/resources/vibe/ai_agent.js
@@ -215,40 +215,8 @@ export class VibeLangchainAgent {
   async #processWithAgentExecutor(user_request, tabId, config, llm, langchainTools) {
 
 
-    // Create enhanced tools with progress reporting
-    const enhancedTools = langchainTools.map(tool => {
-      const originalCall = tool.call || tool._call;
-
-      // Wrap the tool call to send progress updates
-      const wrappedCall = async (input, runManager) => {
-        // Send tool start update
-        this.#sendToolUpdate(tabId, tool.name, `Using ${tool.name}...`, input);
-
-        try {
-          // Call the original tool
-          const result = originalCall.call(tool, input, runManager);
-
-          // Handle both sync and async results
-          const finalResult = await Promise.resolve(result);
-
-          // Send tool completion update
-          this.#sendToolUpdate(tabId, tool.name, `Completed ${tool.name} `, { success: true });
-
-          return finalResult;
-        } catch (error) {
-          // Send tool error update
-          this.#sendToolUpdate(tabId, tool.name, `Error in ${tool.name}: ${error.message} `, { error: error.message });
-          throw error;
-        }
-      };
-
-      // Create enhanced tool with wrapped call
-      return {
-        ...tool,
-        call: wrappedCall,
-        _call: wrappedCall
-      };
-    });
+    // Use the langchainTools directly without wrapping to avoid callback interference
+    const toolsToUse = langchainTools;
 
     // Create the prompt template for tool calling agent
     const prompt = ChatPromptTemplate.fromMessages([
@@ -306,12 +274,35 @@ ${langchainTools.map(t => {
       }).join('\n')
         }
 
-** IMPORTANT **: When you have COMPLETED the full task(got confirmation number, booking reference, order number, etc.), use the FinishTool to report your success with the confirmation details.
+** CRITICAL TASK COMPLETION REQUIREMENTS **:
+- You MUST complete the ENTIRE task, not just the first few steps
+- For flight booking: Navigate ‚Üí Search ‚Üí Select cheapest flight ‚Üí Fill passenger info ‚Üí Process payment ‚Üí Get confirmation number
+- For shopping: Navigate ‚Üí Search ‚Üí Add to cart ‚Üí Checkout ‚Üí Payment ‚Üí Get order number  
+- For reservations: Navigate ‚Üí Search ‚Üí Select option ‚Üí Fill form ‚Üí Submit ‚Üí Get confirmation
+
+** BOOKING FLOW STEPS **:
+1. Search for flights/products/reservations
+2. Review results and select the best/cheapest option
+3. Click to proceed with selection
+4. Fill in required passenger/customer information
+5. Enter payment details (use dummy data if needed)
+6. Complete the booking and get confirmation number
+7. Use FinishTool to report the confirmation details
+
+** NEVER STOP at the search results page **. You must proceed through the entire booking flow.
+
+If you encounter payment or personal information forms, use realistic dummy data:
+- Name: John Smith
+- Email: john.smith@example.com
+- Phone: (555) 123-4567
+- Credit Card: 4111111111111111 (test card)
+
+** IMPORTANT **: When you have COMPLETED the full task (got confirmation number, booking reference, order number, etc.), use the FinishTool to report your success with the confirmation details.
 
 ** Do NOT finish until you have:**
-- For flight booking: Booking confirmation number, passenger details confirmed, payment processed
+- For flight booking: Booking confirmation number, passenger details confirmed, payment processed  
 - For shopping: Order number, shipping confirmation, payment processed
-- For reservations: Confirmation number, date / time confirmed, details saved
+- For reservations: Confirmation number, date/time confirmed, details saved
 
 If you encounter issues that prevent completion, use FinishTool to explain what went wrong and what was accomplished.`],
 ["human", "{input}"],
@@ -321,19 +312,19 @@ If you encounter issues that prevent completion, use FinishTool to explain what
     // Create the tool calling agent
     const agent = await createToolCallingAgent({
       llm: llm,
-      tools: enhancedTools,
+      tools: toolsToUse,
       prompt: prompt
     });
 
     // Create agent executor with STRICT limits to prevent analysis paralysis
     const executor = new AgentExecutor({
       agent,
-      tools: enhancedTools,
+      tools: toolsToUse,
       maxIterations: 32,
       returnIntermediateSteps: true,
       verbose: true,
-      // Force early termination if no progress
-      earlyStoppingMethod: "generate"
+      // Use proper early stopping method
+      earlyStoppingMethod: "force"
     });
 
     console.log(`‚úÖ[AI_AGENT] AgentExecutor created, starting execution...`);
@@ -350,6 +341,7 @@ If you encounter issues that prevent completion, use FinishTool to explain what
     const callbacks = [{
       handleLLMStart: async (llm, prompts) => {
         iterationCount++;
+        console.log(`ü§ñ [AI_AGENT] LLM Start - Iteration ${iterationCount}`);
         this.#sendThinkingUpdate(tabId, {
           type: 'status',
           iteration: iterationCount,
@@ -357,6 +349,8 @@ If you encounter issues that prevent completion, use FinishTool to explain what
         });
       },
       handleLLMEnd: async (output) => {
+        console.log(`ü§ñ [AI_AGENT] LLM End - Iteration ${iterationCount}`, output?.generations?.[0]?.[0]?.text?.slice(0, 100));
+        
         if (this.#shouldStopOperation()) {
           throw new Error('Operation stopped by user');
         }
@@ -373,27 +367,50 @@ If you encounter issues that prevent completion, use FinishTool to explain what
         }
       },
       handleAgentAction: async (action) => {
+        console.log(`‚ö° [AI_AGENT] Agent Action - Tool: ${action.tool}, Input:`, action.toolInput);
         // Send unified thinking update for action
         this.#sendThinkingUpdate(tabId, {
           type: 'action',
           iteration: iterationCount,
-          content: action.log || `Using tool: ${action.tool} `,
+          content: action.log || `Using tool: ${action.tool}`,
           tool: action.tool,
           input: action.toolInput
         });
       },
       handleToolStart: async (tool, input) => {
-        console.log(`üîß[AI_AGENT] Tool Start: ${tool.name} `, input);
+        console.log(`üîß [AI_AGENT] Tool Start: ${tool.name}`, input);
+        // Send tool start notification
+        this.#sendToolUpdate(tabId, tool.name, `Starting ${tool.name}...`, { input });
       },
       handleToolEnd: async (output, tool, input) => {
+        console.log(`üîß [AI_AGENT] Tool End: ${tool.name}`, typeof output === 'string' ? output.slice(0, 200) : 'non-string output');
+        
+        // Send tool completion notification
+        this.#sendToolUpdate(tabId, tool.name, `Completed ${tool.name}`, { success: true });
+        
         // Send unified thinking update for observation
         this.#sendThinkingUpdate(tabId, {
           type: 'observation',
           iteration: iterationCount,
-          content: `Completed: ${tool.name} `,
+          content: `Completed: ${tool.name}`,
           tool: tool.name,
           result: typeof output === 'string' ? output : JSON.stringify(output)
         });
+      },
+      handleToolError: async (error, tool, input) => {
+        console.log(`‚ùå [AI_AGENT] Tool Error: ${tool.name}`, error.message);
+        
+        // Send tool error notification
+        this.#sendToolUpdate(tabId, tool.name, `Error in ${tool.name}: ${error.message}`, { error: error.message });
+        
+        // Send unified thinking update for error observation
+        this.#sendThinkingUpdate(tabId, {
+          type: 'observation',
+          iteration: iterationCount,
+          content: `Error in ${tool.name}: ${error.message}`,
+          tool: tool.name,
+          result: error.message
+        });
       }
     }];
 
@@ -423,17 +440,28 @@ If you encounter issues that prevent completion, use FinishTool to explain what
    * @private
    */
   #sendToolUpdate(tabId, toolName, message, details = {}) {
+    const updateMessage = {
+      type: 'TOOL_UPDATE',
+      tabId: tabId,
+      tool: toolName,
+      message: message,
+      details: details,
+      timestamp: Date.now()
+    };
+    
+    console.log('üîß [AI_AGENT] Sending tool update:', JSON.stringify(updateMessage));
+    
     try {
-      chrome.runtime.sendMessage({
-        type: 'TOOL_UPDATE',
-        tabId: tabId,
-        tool: toolName,
-        message: message,
-        details: details,
-        timestamp: Date.now()
-      }).catch(error => {
-        // Silent catch - UI might not be ready
-        console.log('‚ÑπÔ∏è [AI_AGENT] Tool update not delivered (UI not ready):', error.message);
+      // Try multiple delivery methods to ensure message gets through
+      chrome.runtime.sendMessage(updateMessage).catch(error => {
+        console.log('‚ÑπÔ∏è [AI_AGENT] Direct tool update not delivered, retrying:', error.message);
+        
+        // Retry with a delay to allow UI to load
+        setTimeout(() => {
+          chrome.runtime.sendMessage(updateMessage).catch(retryError => {
+            console.log('‚ÑπÔ∏è [AI_AGENT] Tool update retry failed (UI not ready):', retryError.message);
+          });
+        }, 1000);
       });
     } catch (error) {
       console.log('‚ÑπÔ∏è [AI_AGENT] Failed to send tool update:', error.message);
@@ -445,14 +473,26 @@ If you encounter issues that prevent completion, use FinishTool to explain what
    * @private
    */
   #sendThinkingUpdate(tabId, data) {
+    const updateMessage = {
+      type: 'THINKING_UPDATE',
+      tabId: tabId,
+      data: data,
+      timestamp: Date.now()
+    };
+    
+    console.log('üß† [AI_AGENT] Sending thinking update:', JSON.stringify(updateMessage));
+    
     try {
-      chrome.runtime.sendMessage({
-        type: 'THINKING_UPDATE',
-        tabId: tabId,
-        data: data,
-        timestamp: Date.now()
-      }).catch(error => {
-        console.log('‚ÑπÔ∏è [AI_AGENT] Thinking update not delivered (UI not ready):', error.message);
+      // Try multiple delivery methods to ensure message gets through
+      chrome.runtime.sendMessage(updateMessage).catch(error => {
+        console.log('‚ÑπÔ∏è [AI_AGENT] Direct thinking update not delivered, retrying:', error.message);
+        
+        // Retry with a delay to allow UI to load
+        setTimeout(() => {
+          chrome.runtime.sendMessage(updateMessage).catch(retryError => {
+            console.log('‚ÑπÔ∏è [AI_AGENT] Thinking update retry failed (UI not ready):', retryError.message);
+          });
+        }, 1000);
       });
     } catch (error) {
       console.log('‚ÑπÔ∏è [AI_AGENT] Failed to send thinking update:', error.message);
-- 
2.50.0


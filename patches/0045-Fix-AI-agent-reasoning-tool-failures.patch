From 715a577fa0e881d62b44d096c9de36443d3cf80b Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Sat, 26 Jul 2025 19:33:55 +0300
Subject: [PATCH 45/91] Fix AI agent reasoning tool failures

Root cause: ReasoningTool was returning JSON.stringify() instead of raw object,
causing LangChain function calling system to fail when processing tool results.

Key fixes:
- ReasoningTool: Return object instead of stringified JSON
- ai_agent.js: Handle both string and object responses from reasoning tool
- Add null-safe property access in ReasonAboutStepTool

This resolves "Cannot read properties of undefined (reading 'length')" errors
that occurred when LangChain tried to process stringified tool responses.
---
 chrome/browser/resources/vibe/ai_agent.js     |  16 ++-
 .../resources/vibe/ai_tools.extension.js      |  12 +-
 .../resources/vibe/tools/PlanManager.js       | 135 +++++++++++++++++-
 3 files changed, 150 insertions(+), 13 deletions(-)

diff --git a/chrome/browser/resources/vibe/ai_agent.js b/chrome/browser/resources/vibe/ai_agent.js
index 9b86862bd9..d2b6859438 100644
--- a/chrome/browser/resources/vibe/ai_agent.js
+++ b/chrome/browser/resources/vibe/ai_agent.js
@@ -479,6 +479,17 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
         this.currentPlan = await this.planManager.createPlan(user_request, llm);
         this.currentPlanStep = 0;
         
+        // Activate the plan if it meets confidence threshold
+        if (this.currentPlan && this.currentPlan.confidence > 0.6) {
+          await this.planManager.activatePlan(this.currentPlan.id);
+          console.log(`🚀 [AI_AGENT] Activated plan with confidence ${this.currentPlan.confidence}`);
+        } else if (this.currentPlan) {
+          console.log(`⚠️ [AI_AGENT] Plan confidence ${this.currentPlan.confidence} below threshold, proceeding with caution`);
+        }
+        
+        // Integrate SelfCritique with MemoryManager
+        this.selfCritique.setMemoryManager(this.memoryManager);
+        
         // Log plan creation
         await this.structuredLogger.logPlanCreation({
           taskId: this.executionContext.taskId,
@@ -487,7 +498,7 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
           timestamp: new Date().toISOString()
         });
         
-        console.log(`📋 [AI_AGENT] Created plan with ${this.currentPlan.steps.length} steps`);
+        console.log(`📋 [AI_AGENT] Created plan with ${this.currentPlan?.steps?.length || 0} steps`);
       } catch (planError) {
         console.warn(`⚠️ [AI_AGENT] Plan creation failed, using fallback approach:`, planError.message);
         this.currentPlan = null;
@@ -715,7 +726,8 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
               // Special handling for reasoning tool to check task completion
               if (toolCall.name === 'reasoning') {
                 try {
-                  const reasoningData = JSON.parse(toolResult);
+                  // toolResult is now an object, not a JSON string
+                  const reasoningData = typeof toolResult === 'string' ? JSON.parse(toolResult) : toolResult;
                   
                   // Send reasoning update to UI
                   chrome.runtime.sendMessage({
diff --git a/chrome/browser/resources/vibe/ai_tools.extension.js b/chrome/browser/resources/vibe/ai_tools.extension.js
index 6567a38fbf..6087f247a6 100644
--- a/chrome/browser/resources/vibe/ai_tools.extension.js
+++ b/chrome/browser/resources/vibe/ai_tools.extension.js
@@ -257,7 +257,7 @@ class ReasoningTool extends BrowserTool {
       console.log(`🎯 [AI_AGENT] Task marked as completed by reasoning tool`);
     }
     
-    return JSON.stringify(response);
+    return response;
   }
 }
 
@@ -2138,12 +2138,12 @@ class ReasonAboutStepTool extends BrowserTool {
       );
       
       return `Reasoning Analysis:
-Primary Recommendation: ${reasoning.primaryRecommendation.tool}
-Rationale: ${reasoning.primaryRecommendation.rationale}
-Confidence: ${reasoning.primaryRecommendation.confidence}
+Primary Recommendation: ${reasoning.primaryRecommendation?.tool || 'Unknown'}
+Rationale: ${reasoning.primaryRecommendation?.rationale || 'No rationale provided'}
+Confidence: ${reasoning.primaryRecommendation?.confidence || 0.5}
 
-Alternatives: ${reasoning.alternatives.map(a => a.tool).join(', ')}
-Risks: ${reasoning.risks.join(', ')}`;
+Alternatives: ${reasoning.alternatives?.map(a => a.tool).join(', ') || 'None provided'}
+Risks: ${reasoning.risks?.join(', ') || 'None identified'}`;
     } catch (error) {
       throw new Error(`Failed to reason about step: ${error.message}`);
     }
diff --git a/chrome/browser/resources/vibe/tools/PlanManager.js b/chrome/browser/resources/vibe/tools/PlanManager.js
index 1c6da629cf..6353ce9a52 100644
--- a/chrome/browser/resources/vibe/tools/PlanManager.js
+++ b/chrome/browser/resources/vibe/tools/PlanManager.js
@@ -39,29 +39,154 @@ Return as JSON array with structure:
 
     try {
       const response = await llm.invoke(planPrompt);
-      const steps = JSON.parse(response.content);
+      let steps;
+      
+      // Robust JSON parsing with retry logic
+      try {
+        steps = JSON.parse(response.content);
+      } catch (parseError) {
+        console.warn(`⚠️ [PLAN_MANAGER] Initial JSON parse failed, attempting cleanup...`);
+        
+        // Try to extract JSON from response if it's wrapped in text
+        const jsonMatch = response.content.match(/\[.*\]/s);
+        if (jsonMatch) {
+          try {
+            steps = JSON.parse(jsonMatch[0]);
+            console.log(`✅ [PLAN_MANAGER] Successfully extracted JSON from response`);
+          } catch (secondParseError) {
+            // Final fallback: ask LLM to reformat
+            console.log(`🔄 [PLAN_MANAGER] Requesting LLM to reformat response...`);
+            const reformatResponse = await llm.invoke(
+              `Please reformat this as valid JSON array only, no other text:\n${response.content}`
+            );
+            steps = JSON.parse(reformatResponse.content);
+          }
+        } else {
+          throw new Error(`Unable to parse plan from LLM response: ${parseError.message}`);
+        }
+      }
+      
+      // Schema validation
+      const validatedSteps = this.validatePlanSteps(steps);
       
       const plan = {
         id: planId,
         goal: goal,
         createdAt: new Date().toISOString(),
-        steps: steps.map((step, index) => ({
+        steps: validatedSteps.map((step, index) => ({
           id: `step_${index + 1}`,
           ...step,
           completed: false,
           result: null
         })),
-        status: 'created'
+        status: 'draft', // Start as draft for review
+        confidence: this.calculatePlanConfidence(validatedSteps)
       };
 
       this.plans.set(planId, plan);
-      this.activePlanId = planId;
-      await this.savePlans();
+      // Don't automatically activate - let caller decide
+      console.log(`📋 [PLAN_MANAGER] Created draft plan with ${plan.steps.length} steps (confidence: ${plan.confidence})`);
       
+      await this.savePlans();
       return plan;
+      
     } catch (error) {
+      console.error(`❌ [PLAN_MANAGER] Plan creation failed:`, error);
       throw new Error(`Failed to create plan: ${error.message}`);
+    }  
+  }
+
+  /**
+   * Validate plan steps against a schema
+   * @param {any[]} steps - The plan steps to validate
+   * @returns {any[]} The validated plan steps
+   */
+  validatePlanSteps(steps) {
+    if (!Array.isArray(steps)) {
+      console.warn(`⚠️ [PLAN_MANAGER] Expected array of steps, got ${typeof steps}`);
+      return [];
+    }
+    
+    const validatedSteps = [];
+    
+    for (const step of steps) {
+      // Ensure each step has required fields
+      const validatedStep = {
+        description: step.description || 'Undefined step',
+        expectedOutcome: step.expectedOutcome || 'Unknown outcome',
+        recommendedTools: Array.isArray(step.recommendedTools) ? step.recommendedTools : []
+      };
+      
+      // Validate recommendedTools structure
+      validatedStep.recommendedTools = validatedStep.recommendedTools.map(tool => ({
+        tool: tool.tool || 'unknown_tool',
+        rationale: tool.rationale || 'No rationale provided',
+        confidence: typeof tool.confidence === 'number' ? tool.confidence : 0.5,
+        priority: typeof tool.priority === 'number' ? tool.priority : 1
+      }));
+      
+      validatedSteps.push(validatedStep);
+    }
+    
+    console.log(`✅ [PLAN_MANAGER] Validated ${validatedSteps.length} plan steps`);
+    return validatedSteps;
+  }
+
+  /**
+   * Calculate the confidence of a plan based on its steps
+   * @param {any[]} steps - The plan steps to calculate confidence for
+   * @returns {number} The calculated confidence
+   */
+  calculatePlanConfidence(steps) {
+    if (!Array.isArray(steps) || steps.length === 0) {
+      return 0.1;
+    }
+    
+    // Calculate confidence based on step quality
+    let totalConfidence = 0;
+    let validSteps = 0;
+    
+    for (const step of steps) {
+      if (step.description && step.expectedOutcome) {
+        validSteps++;
+        
+        // Higher confidence for steps with specific tools and rationales
+        let stepConfidence = 0.5;
+        if (step.recommendedTools && step.recommendedTools.length > 0) {
+          stepConfidence += 0.2;
+          
+          // Bonus for tools with rationales
+          const toolsWithRationale = step.recommendedTools.filter(t => t.rationale && t.rationale !== 'No rationale provided');
+          if (toolsWithRationale.length > 0) {
+            stepConfidence += 0.2;
+          }
+        }
+        
+        totalConfidence += Math.min(stepConfidence, 1.0);
+      }
+    }
+    
+    const confidence = validSteps > 0 ? totalConfidence / validSteps : 0.1;
+    return Math.round(confidence * 100) / 100; // Round to 2 decimal places
+  }
+  
+  /**
+   * Activate a draft plan after review
+   * @param {string} planId - The plan ID to activate
+   * @returns {Promise<any>} The activated plan
+   */
+  async activatePlan(planId) {
+    const plan = this.plans.get(planId);
+    if (!plan) {
+      throw new Error(`Plan ${planId} not found`);
     }
+    
+    plan.status = 'ready';
+    this.activePlanId = planId;
+    await this.savePlans();
+    
+    console.log(`🚀 [PLAN_MANAGER] Activated plan: ${plan.goal}`);
+    return plan;
   }
 
   /**
-- 
2.50.0


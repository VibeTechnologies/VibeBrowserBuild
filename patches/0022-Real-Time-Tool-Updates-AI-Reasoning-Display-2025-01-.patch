From e90253c4d5fba5562ab150ef8855cb73aecddae1 Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Wed, 23 Jul 2025 12:27:00 +0300
Subject: [PATCH 22/91] =?UTF-8?q?Real-Time=20Tool=20Updates=20&=20AI=20Rea?=
 =?UTF-8?q?soning=20Display=20(2025-01-23)**=20=20=20=20**Tasks=20Complete?=
 =?UTF-8?q?d:**=20=20=20=20-=20=E2=9C=85=20Modified=20ai=5Fagent.js:=20Add?=
 =?UTF-8?q?ed=20#sendToolUpdate()=20and=20#sendReasoningUpdate()=20methods?=
 =?UTF-8?q?=20=20=20=20-=20=E2=9C=85=20Enhanced=20AI=20iteration=20loop:?=
 =?UTF-8?q?=20Sends=20TOOL=5FUPDATE=20on=20every=20tool=20execution=20with?=
 =?UTF-8?q?=20real-time=20status=20=20=20=20-=20=E2=9C=85=20Added=20reason?=
 =?UTF-8?q?ing=20display:=20AI=20thinking=20process=20shown=20on=20each=20?=
 =?UTF-8?q?iteration=20=20=20=20-=20=E2=9C=85=20Updated=20background.js:?=
 =?UTF-8?q?=20Added=20handleToolUpdate()=20and=20handleReasoningUpdate()?=
 =?UTF-8?q?=20message=20forwarding=20=20=20=20-=20=E2=9C=85=20Enhanced=20s?=
 =?UTF-8?q?idepanel.js:=20Improved=20=5FhandleToolUpdate()=20and=20added?=
 =?UTF-8?q?=20=5FhandleReasoningUpdate()=20methods=20=20=20=20-=20?=
 =?UTF-8?q?=E2=9C=85=20Built=20successfully:=20All=20changes=20compiled=20?=
 =?UTF-8?q?without=20errors?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

   **Features Implemented:**
   - Real-time tool usage indicator (shows "Using Click Element...", "Using Get Page Content...", etc.)
   - AI reasoning display on each iteration with iteration numbers
   - Tool error handling with visual feedback
   - Comprehensive tool name mapping for better UX
   - Message forwarding system from AI agent ‚Üí background ‚Üí sidepanel

   **Technical Details:**
   - AI agent sends TOOL_UPDATE before/during/after tool execution
   - AI agent sends REASONING_UPDATE when AI provides text responses
   - Background script forwards updates to sidepanel in real-time
   - Sidepanel updates thinking indicator and shows reasoning messages
   - Error handling with visual status indicators (‚ùå for errors, ‚úÖ for success)

   **Self‚ÄëReflection:** ‚úÖ Complete real-time tool tracking system implemented. Users can now see exactly what tool the AI is using, AI reasoning process, and iteration progress - matching ChatGPT.com transparency.
---
 .../component_extension_resources.grd         |   1 +
 chrome/browser/resources/vibe/ai_agent.js     | 186 +++++-
 chrome/browser/resources/vibe/background.js   |  83 ++-
 chrome/browser/resources/vibe/content.js      | 386 +++++++++++--
 chrome/browser/resources/vibe/manifest.json   |  11 +-
 .../browser/resources/vibe/package-lock.json  | 532 +++++++++++++++++-
 chrome/browser/resources/vibe/package.json    |   1 +
 chrome/browser/resources/vibe/sidepanel.css   | 141 ++++-
 chrome/browser/resources/vibe/sidepanel.html  | 315 ++++-------
 chrome/browser/resources/vibe/sidepanel.js    | 395 ++++++-------
 10 files changed, 1506 insertions(+), 545 deletions(-)

diff --git a/chrome/browser/resources/component_extension_resources.grd b/chrome/browser/resources/component_extension_resources.grd
index c6e38e454e..826a7ac512 100644
--- a/chrome/browser/resources/component_extension_resources.grd
+++ b/chrome/browser/resources/component_extension_resources.grd
@@ -22,6 +22,7 @@
       <!-- Vibe Extension - Essential Files Only -->
       <include name="IDR_VIBE_MANIFEST" file="${root_gen_dir}/chrome/browser/resources/vibe/manifest.json" use_base_dir="false" resource_path="vibe/manifest.json" type="BINDATA" />
       <include name="IDR_VIBE_SIDEPANEL_HTML" file="${root_gen_dir}/chrome/browser/resources/vibe/sidepanel.html" use_base_dir="false" resource_path="vibe/sidepanel.html" type="chrome_html" />
+      <include name="IDR_VIBE_SIDEPANEL_CSS" file="${root_gen_dir}/chrome/browser/resources/vibe/sidepanel.css" use_base_dir="false" resource_path="vibe/sidepanel.css" type="chrome_html" />
       <include name="IDR_VIBE_SIDEPANEL_JS" file="${root_gen_dir}/chrome/browser/resources/vibe/sidepanel.js" use_base_dir="false" resource_path="vibe/sidepanel.js" type="chrome_html" />
       <include name="IDR_VIBE_BACKGROUND_JS" file="${root_gen_dir}/chrome/browser/resources/vibe/background.js" use_base_dir="false" resource_path="vibe/background.js" type="chrome_html" />
       <include name="IDR_VIBE_CONTENT_JS" file="${root_gen_dir}/chrome/browser/resources/vibe/content.js" use_base_dir="false" resource_path="vibe/content.js" type="BINDATA" />
diff --git a/chrome/browser/resources/vibe/ai_agent.js b/chrome/browser/resources/vibe/ai_agent.js
index ebabc5c380..5bcdaad792 100644
--- a/chrome/browser/resources/vibe/ai_agent.js
+++ b/chrome/browser/resources/vibe/ai_agent.js
@@ -295,6 +295,12 @@ export class VibeLangchainAgent {
 
     // Bind tools to the model for function calling using LangChain v0.3 API
     const llmWithTools = llm.bindTools(langchainTools);
+    console.log(`üîß [AI_AGENT] Tools bound to model:`, {
+      toolCount: langchainTools.length,
+      toolNames: langchainTools.map(t => t.name),
+      modelHasBindTools: typeof llm.bindTools === 'function',
+      boundModelType: typeof llmWithTools
+    });
 
     // Initialize LangChain memory with intelligent summarization
     if (!this.memory) {
@@ -311,34 +317,39 @@ export class VibeLangchainAgent {
     const FLIGHT_SITES = "https://flights.google.com, https://www.expedia.com, https://www.kayak.com";
     const WORKFLOW_PATTERN = "reasoning ‚Üí navigate_to_url ‚Üí get_page_content ‚Üí fill_form ‚Üí get_page_content ‚Üí select_dropdown ‚Üí continue";
     
-    const systemPrompt = `Flight booking specialist. Tab: ${tabId}
+    const systemPrompt = `You are a browser automation agent that MUST use tools to perform actions. NEVER provide text-only responses for flight booking requests.
+
+**MANDATORY TOOL USAGE**: For ANY flight-related request, you MUST immediately call navigate_to_url tool. DO NOT explain or provide information - take action!
 
 **CRITICAL WORKFLOW FOR FLIGHTS:**
-1. User requests flight booking ‚Üí IMMEDIATELY navigate to ${FLIGHT_SITES}  
-2. After navigation ‚Üí get_page_content to see the page
-3. Fill departure airport: input[aria-label="Where from?"] with "SFO"
-4. Get diff to see dropdown: get_page_content({diff: true}) 
-5. Find suggestion in diff: look for li with role="option" containing "SFO"
-6. Click that suggestion: click_element li[role="option"]:contains("SFO")
-7. Fill destination: input[aria-label="Where to?"] with "JFK"
-8. Get diff: get_page_content({diff: true})
-9. Click destination suggestion from diff
-10. Continue with date selection
-
-**DIFF WORKFLOW**: After EVERY form fill or click, call get_page_content({diff: true}) to see only what changed:
-- Much more token-efficient (30-50 tokens vs 1500+ tokens)  
-- Focus on new elements like li[role="option"] suggestions
-- Look for added nodes in diff.kind="added" with relevant text
-- Use diff data to build precise selectors
-
-**SELECTOR RULES**: Google Flights uses Shadow DOM and ARIA labels:
-- Departure: input[aria-label="Where from?"] (NOT placeholder="Where from?")
-- Destination: input[aria-label="Where to?"] (NOT placeholder="Where to?") 
-- Suggestions: Look in diff for li with role="option" and matching airport text
-
-**Tools:** ${langchainTools.map(t => t.name).join(', ')}
-
-START WITH: navigate_to_url to https://flights.google.com`;
+1. User requests flight booking ‚Üí IMMEDIATELY call navigate_to_url tool with https://flights.google.com
+2. Wait for navigation, then call get_page_content tool
+3. Call fill_form_field tool for departure airport: input[aria-label="Where from?"] with airport code
+4. Call get_page_content with {diff: true} to see dropdown changes
+5. Call click_element tool on dropdown suggestion li[role="option"]
+6. Call fill_form_field tool for destination: input[aria-label="Where to?"] with airport code
+7. Call get_page_content with {diff: true} to see dropdown changes
+8. Call click_element tool on destination suggestion
+9. Continue with date selection using fill_form_field and click_element tools
+
+**TOOL EXECUTION RULES:**
+- NEVER respond with text for flight requests - ALWAYS use tools
+- First action MUST be navigate_to_url to ${FLIGHT_SITES}
+- Use tools in sequence: navigate ‚Üí get_content ‚Üí fill ‚Üí click ‚Üí repeat
+- After each tool call, wait for result before next action
+
+**Available Tools:** ${langchainTools.map(t => t.name).join(', ')}
+
+**MANDATORY FIRST ACTION**: Call navigate_to_url with https://flights.google.com
+
+**EXAMPLE - You MUST follow this pattern exactly:**
+User: "book flight from SFO to JFK"
+Assistant: I'll help you book a flight. Let me start by navigating to Google Flights.
+[CALLS navigate_to_url tool with https://flights.google.com]
+
+**YOU MUST CALL TOOLS - NO TEXT-ONLY RESPONSES FOR FLIGHT REQUESTS**
+
+Tab: ${tabId}`;
 
     const maxIterations = config.maxIterations || 32;
     const maxTokens = config.maxTokens || 128000; // Token budget guard
@@ -364,6 +375,34 @@ START WITH: navigate_to_url to https://flights.google.com`;
     };
     
     try {
+      // Force navigation for flight queries on first iteration
+      if (user_request.toLowerCase().includes('flight') || user_request.toLowerCase().includes('book')) {
+        console.log('üöÅ [AI_AGENT] Flight query detected - forcing navigation to Google Flights');
+        
+        // Find navigate tool and execute it directly
+        const navigateTool = tools.find(t => t.name === 'navigate_to_url');
+        if (navigateTool) {
+          try {
+            const navResult = await navigateTool.call({ url: 'https://flights.google.com' }, tabId);
+            console.log('‚úàÔ∏è [AI_AGENT] Forced navigation executed:', navResult);
+            
+            toolResults.push({
+              tool: 'navigate_to_url',
+              args: { url: 'https://flights.google.com' },
+              result: navResult
+            });
+            
+            // Add the navigation to memory
+            await this.memory.saveContext(
+              { input: user_request },
+              { output: `Navigated to Google Flights: ${navResult}` }
+            );
+          } catch (navError) {
+            console.error('‚ùå [AI_AGENT] Forced navigation failed:', navError);
+          }
+        }
+      }
+      
       for (let iteration = 1; iteration <= maxIterations; iteration++) {
         // Build fresh messages from memory each iteration to prevent unbounded growth
         const { chat_history = [] } = await this.memory.loadMemoryVariables({});
@@ -398,6 +437,9 @@ START WITH: navigate_to_url to https://flights.google.com`;
         }
 
         try {
+          // Send thinking update to UI
+          this.#sendToolUpdate(tabId, 'thinking', `Analyzing request (iteration ${iteration}/${maxIterations})...`);
+          
           const result = await llmWithTools.invoke(messages);
         
         // Track token usage if available
@@ -405,7 +447,17 @@ START WITH: navigate_to_url to https://flights.google.com`;
           totalTokensUsed += result.response_metadata.tokenUsage.totalTokens;
         }
         
-        console.log(`ü§ñ [AI_AGENT] AI Response ${iteration}/${maxIterations}`);
+        console.log(`ü§ñ [AI_AGENT] AI Response ${iteration}/${maxIterations}:`, {
+          hasToolCalls: !!(result.tool_calls && result.tool_calls.length > 0),
+          toolCallCount: result.tool_calls ? result.tool_calls.length : 0,
+          toolNames: result.tool_calls ? result.tool_calls.map(t => t.name) : [],
+          contentPreview: result.content ? result.content.substring(0, 100) + '...' : 'no content'
+        });
+
+        // Send reasoning update if AI provided text response
+        if (result.content && result.content.trim()) {
+          this.#sendReasoningUpdate(tabId, result.content, iteration);
+        }
 
         // Check if AI wants to use tools
         if (result.tool_calls && result.tool_calls.length > 0) {
@@ -430,6 +482,9 @@ START WITH: navigate_to_url to https://flights.google.com`;
           
           // Execute each tool call
           for (const toolCall of result.tool_calls) {
+            // Send tool start update to UI
+            this.#sendToolUpdate(tabId, toolCall.name, `Using ${this.#getToolDisplayName(toolCall.name)}...`, toolCall.args);
+            
             // Find the tool by name
             const tool = tools.find(t => t.name === toolCall.name);
             if (!tool) {
@@ -437,6 +492,9 @@ START WITH: navigate_to_url to https://flights.google.com`;
               const errorMsg = `Tool not found: ${toolCall.name}`;
               const errorToolMessage = new ToolMessage(errorMsg, toolCall.id, toolCall.name);
               messages.push(errorToolMessage);
+              
+              // Send error update to UI
+              this.#sendToolUpdate(tabId, toolCall.name, `Error: Tool not found`, { error: errorMsg });
               continue;
             }
 
@@ -449,6 +507,9 @@ START WITH: navigate_to_url to https://flights.google.com`;
               // Just log tool execution without the verbose result object
               console.log(`‚úÖ [AI_AGENT] Executed tool: ${toolCall.name}`);
               
+              // Send tool completion update to UI
+              this.#sendToolUpdate(tabId, toolCall.name, `Completed ${this.#getToolDisplayName(toolCall.name)}`, { success: true });
+              
               // Special handling for reasoning tool to check task completion
               if (toolCall.name === 'reasoning') {
                 try {
@@ -490,6 +551,9 @@ START WITH: navigate_to_url to https://flights.google.com`;
               console.error(`‚ùå [AI_AGENT] Tool execution failed for ${toolCall.name}:`, toolError);
               consecutiveFailures++;
               
+              // Send error update to UI
+              this.#sendToolUpdate(tabId, toolCall.name, `Error in ${this.#getToolDisplayName(toolCall.name)}`, { error: toolError.message });
+              
               const errorMsg = `Tool execution failed: ${toolError.message}`;
               toolResults.push({
                 tool: toolCall.name,
@@ -558,4 +622,72 @@ START WITH: navigate_to_url to https://flights.google.com`;
       iterations: maxIterations
     };
   }
+
+  /**
+   * Send tool update to UI via chrome runtime messaging
+   * @private
+   */
+  #sendToolUpdate(tabId, toolName, message, details = {}) {
+    try {
+      chrome.runtime.sendMessage({
+        type: 'TOOL_UPDATE',
+        tabId: tabId,
+        tool: toolName,
+        message: message,
+        details: details,
+        timestamp: Date.now()
+      }).catch(error => {
+        // Silent catch - UI might not be ready
+        console.log('‚ÑπÔ∏è [AI_AGENT] Tool update not delivered (UI not ready):', error.message);
+      });
+    } catch (error) {
+      console.log('‚ÑπÔ∏è [AI_AGENT] Failed to send tool update:', error.message);
+    }
+  }
+
+  /**
+   * Send reasoning update to UI
+   * @private
+   */
+  #sendReasoningUpdate(tabId, reasoning, iteration) {
+    try {
+      chrome.runtime.sendMessage({
+        type: 'REASONING_UPDATE',
+        tabId: tabId,
+        reasoning: reasoning,
+        iteration: iteration,
+        timestamp: Date.now()
+      }).catch(error => {
+        console.log('‚ÑπÔ∏è [AI_AGENT] Reasoning update not delivered (UI not ready):', error.message);
+      });
+    } catch (error) {
+      console.log('‚ÑπÔ∏è [AI_AGENT] Failed to send reasoning update:', error.message);
+    }
+  }
+
+  /**
+   * Get display name for tools
+   * @private
+   */
+  #getToolDisplayName(toolName) {
+    const toolNames = {
+      'clickElement': 'Click Element',
+      'fillInput': 'Fill Input',
+      'getPageContent': 'Get Page Content',
+      'scrollPage': 'Scroll Page',
+      'navigateToUrl': 'Navigate to URL',
+      'takeScreenshot': 'Take Screenshot',
+      'reasoning': 'Reasoning',
+      'webSearch': 'Web Search',
+      'readFile': 'Read File',
+      'writeFile': 'Write File',
+      'get_page_content': 'Get Page Content',
+      'click_element': 'Click Element',
+      'fill_input': 'Fill Input',
+      'scroll_page': 'Scroll Page',
+      'navigate_to_url': 'Navigate to URL',
+      'take_screenshot': 'Take Screenshot'
+    };
+    return toolNames[toolName] || toolName;
+  }
 }
diff --git a/chrome/browser/resources/vibe/background.js b/chrome/browser/resources/vibe/background.js
index 83b3ff8db2..1b49b7028d 100644
--- a/chrome/browser/resources/vibe/background.js
+++ b/chrome/browser/resources/vibe/background.js
@@ -375,36 +375,18 @@ async function getBrowserSettingsViaMessage() {
 }
 
 
-// Command handler for keyboard shortcuts (Cmd+E/Ctrl+E)
-chrome.commands.onCommand.addListener(async (command) => {
-  console.log('‚å®Ô∏è [KEYBOARD] Command triggered:', command);
-  
-  if (command === 'toggle-panel') {
-    try {
-      // Get the active tab
-      const [activeTab] = await chrome.tabs.query({ active: true, currentWindow: true });
-      
-      if (!activeTab) {
-        console.error('‚ùå [KEYBOARD] No active tab found');
-        return;
-      }
-      
-      console.log('üéØ [KEYBOARD] Opening side panel for tab:', activeTab.id);
-      
-      // Open side panel
-      await openSidePanel(activeTab.id);
-      
-      console.log('‚úÖ [KEYBOARD] Side panel opened via keyboard shortcut');
-      
-    } catch (error) {
-      console.error('‚ùå [KEYBOARD] Error handling keyboard command:', error);
-    }
-  }
-});
 
 // Extension installation
 chrome.runtime.onInstalled.addListener(async () => {
   console.log('üöÄ Vibe AI Agent extension installed');
+  
+  // Configure side panel to open on action click
+  try {
+    await chrome.sidePanel.setPanelBehavior({ openPanelOnActionClick: true });
+    console.log('‚úÖ Side panel configured to open on toolbar icon click');
+  } catch (error) {
+    console.log('‚ö†Ô∏è Failed to configure side panel behavior:', error.message);
+  }
 
 // Omnibox API handler - triggered by "vibe <query>"
 chrome.omnibox.onInputEntered.addListener(async (text, disposition) => {
@@ -551,6 +533,16 @@ chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
       sendResponse({ success: true });
       return true; // Keep the message channel open for async response
       
+    case 'TOOL_UPDATE':
+      // Forward tool updates to side panel
+      handleToolUpdate(message, sendResponse);
+      return true; // Keep the message channel open for async response
+      
+    case 'REASONING_UPDATE':
+      // Forward reasoning updates to side panel
+      handleReasoningUpdate(message, sendResponse);
+      return true; // Keep the message channel open for async response
+      
     default:
       console.log('‚ùì Unknown message type:', message.type);
       sendResponse({ success: false, error: 'Unknown message type' });
@@ -558,6 +550,45 @@ chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
   }
 });
 
+// Handle tool updates from AI agent
+async function handleToolUpdate(message, sendResponse) {
+  console.log('üîß [TOOL-UPDATE] Tool update received:', message.tool, '-', message.message);
+  
+  try {
+    // Forward to sidepanel
+    await chrome.runtime.sendMessage({
+      type: 'TOOL_UPDATE',
+      tool: message.tool,
+      message: message.message,
+      details: message.details,
+      timestamp: message.timestamp
+    });
+    sendResponse({ success: true });
+  } catch (error) {
+    console.log('‚ö†Ô∏è [TOOL-UPDATE] Error forwarding to sidepanel:', error.message);
+    sendResponse({ success: false, error: error.message });
+  }
+}
+
+// Handle reasoning updates from AI agent
+async function handleReasoningUpdate(message, sendResponse) {
+  console.log('üß† [REASONING-UPDATE] Reasoning update received for iteration:', message.iteration);
+  
+  try {
+    // Forward to sidepanel
+    await chrome.runtime.sendMessage({
+      type: 'REASONING_UPDATE',
+      reasoning: message.reasoning,
+      iteration: message.iteration,
+      timestamp: message.timestamp
+    });
+    sendResponse({ success: true });
+  } catch (error) {
+    console.log('‚ö†Ô∏è [REASONING-UPDATE] Error forwarding to sidepanel:', error.message);
+    sendResponse({ success: false, error: error.message });
+  }
+}
+
 // Forward message to sidepanel
 function forwardMessageToSidepanel(message, sendResponse) {
   console.log('üì§ Forwarding message to sidepanel:', message.type);
diff --git a/chrome/browser/resources/vibe/content.js b/chrome/browser/resources/vibe/content.js
index 8e74d7c409..e78cb25075 100644
--- a/chrome/browser/resources/vibe/content.js
+++ b/chrome/browser/resources/vibe/content.js
@@ -261,18 +261,18 @@ chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
 /**
  * Handle form filling
  */
-function handleFormFilling(data) {
+async function handleFormFilling(data) {
   console.log("üìù Filling form with data:", JSON.stringify(data));
 
   try {
     // Handle simple selector-based filling
     if (data.selector && data.value) {
-      const result = fillInput(data.selector, data.value);
+      const result = await fillInput(data.selector, data.value);
       return result;
     }
     // Example: Fill flight search form
     else if (data.type === "flight") {
-      const result = fillFlightForm(data);
+      const result = await fillFlightForm(data);
       return result;
     } else {
       throw new Error("Invalid form filling data: missing selector/value or type");
@@ -286,12 +286,20 @@ function handleFormFilling(data) {
 /**
  * Fill flight search form
  */
-function fillFlightForm(data) {
+async function fillFlightForm(data) {
   const { from, to, departDate, returnDate } = data;
   const results = [];
 
-  // Google Flights selectors
+  // Google Flights selectors - aligned with aria-label patterns the AI agent uses
   const selectors = {
+    from: "input[aria-label*=\"Where from\"]",
+    to: "input[aria-label*=\"Where to\"]", 
+    departDate: "input[aria-label*=\"Departure\"]",
+    returnDate: "input[aria-label*=\"Return\"]"
+  };
+  
+  // Fallback selectors using placeholder (for compatibility)
+  const fallbackSelectors = {
     from: "input[placeholder*=\"Where from\"]",
     to: "input[placeholder*=\"Where to\"]",
     departDate: "input[placeholder*=\"Departure\"]",
@@ -300,23 +308,48 @@ function fillFlightForm(data) {
 
   try {
     if (from) {
-      const result = fillInput(selectors.from, from);
-      results.push(result.message);
+      try {
+        const result = await fillInput(selectors.from, from);
+        results.push(result.message);
+      } catch (error) {
+        // Try fallback selector
+        console.log(`‚ö†Ô∏è Primary selector failed, trying fallback for 'from' field`);
+        const result = await fillInput(fallbackSelectors.from, from);
+        results.push(result.message);
+      }
     }
 
     if (to) {
-      const result = fillInput(selectors.to, to);
-      results.push(result.message);
+      try {
+        const result = await fillInput(selectors.to, to);
+        results.push(result.message);
+      } catch (error) {
+        console.log(`‚ö†Ô∏è Primary selector failed, trying fallback for 'to' field`);
+        const result = await fillInput(fallbackSelectors.to, to);
+        results.push(result.message);
+      }
     }
 
     if (departDate) {
-      const result = fillInput(selectors.departDate, departDate);
-      results.push(result.message);
+      try {
+        const result = await fillInput(selectors.departDate, departDate);
+        results.push(result.message);
+      } catch (error) {
+        console.log(`‚ö†Ô∏è Primary selector failed, trying fallback for 'departDate' field`);
+        const result = await fillInput(fallbackSelectors.departDate, departDate);
+        results.push(result.message);
+      }
     }
 
     if (returnDate) {
-      const result = fillInput(selectors.returnDate, returnDate);
-      results.push(result.message);
+      try {
+        const result = await fillInput(selectors.returnDate, returnDate);
+        results.push(result.message);
+      } catch (error) {
+        console.log(`‚ö†Ô∏è Primary selector failed, trying fallback for 'returnDate' field`);
+        const result = await fillInput(fallbackSelectors.returnDate, returnDate);
+        results.push(result.message);
+      }
     }
 
     return { success: true, message: `Flight form filled: ${results.join(', ')}` };
@@ -325,19 +358,234 @@ function fillFlightForm(data) {
   }
 }
 
+/**
+ * Generate flexible selectors from a strict selector
+ * @param {string} originalSelector - The original selector
+ * @returns {Array} Array of flexible selectors to try
+ */
+function generateFlexibleSelectors(originalSelector) {
+  const selectors = [originalSelector]; // Start with original
+  
+  // Convert exact matches to partial matches
+  if (originalSelector.includes('aria-label="')) {
+    const partialMatch = originalSelector.replace(/aria-label="([^"]+)"/g, 'aria-label*="$1"');
+    selectors.push(partialMatch);
+    
+    // Add case-insensitive variations
+    const content = originalSelector.match(/aria-label="([^"]+)"/)?.[1];
+    if (content) {
+      selectors.push(`input[aria-label*="${content.toLowerCase()}"]`);
+      selectors.push(`input[aria-label*="${content.toLowerCase()}" i]`);
+      
+      // Add common variations
+      if (content.toLowerCase().includes('from')) {
+        selectors.push('input[aria-label*="departure" i]');
+        selectors.push('input[aria-label*="origin" i]');
+        selectors.push('input[placeholder*="from" i]');
+        selectors.push('input[placeholder*="departure" i]');
+      }
+      
+      if (content.toLowerCase().includes('to')) {
+        selectors.push('input[aria-label*="destination" i]');
+        selectors.push('input[aria-label*="arrival" i]');
+        selectors.push('input[placeholder*="to" i]');
+        selectors.push('input[placeholder*="destination" i]');
+      }
+    }
+  }
+  
+  // Add generic input selectors based on type
+  if (originalSelector.includes('from') || originalSelector.includes('From')) {
+    selectors.push(
+      'input[data-testid*="origin"]',
+      'input[data-testid*="from"]',
+      'input[name*="from"]',
+      'input[id*="from"]',
+      'input[class*="from"]'
+    );
+  }
+  
+  if (originalSelector.includes('to') || originalSelector.includes('To')) {
+    selectors.push(
+      'input[data-testid*="destination"]',
+      'input[data-testid*="to"]',
+      'input[name*="to"]',
+      'input[id*="to"]',
+      'input[class*="to"]'
+    );
+  }
+  
+  return [...new Set(selectors)]; // Remove duplicates
+}
+
+/**
+ * Check if a combobox is relevant to the selector context
+ * @param {Element} combobox - The combobox element
+ * @param {string} selector - The original selector
+ * @returns {boolean} True if the combobox is relevant
+ */
+function isRelevantCombobox(combobox, selector) {
+  const comboboxText = (combobox.textContent || combobox.ariaLabel || combobox.getAttribute('aria-label') || '').toLowerCase();
+  const selectorLower = selector.toLowerCase();
+  
+  // Check if combobox context matches selector intent
+  if (selectorLower.includes('from') || selectorLower.includes('departure') || selectorLower.includes('origin')) {
+    return comboboxText.includes('from') || comboboxText.includes('departure') || comboboxText.includes('origin');
+  }
+  
+  if (selectorLower.includes('to') || selectorLower.includes('destination') || selectorLower.includes('arrival')) {
+    return comboboxText.includes('to') || comboboxText.includes('destination') || comboboxText.includes('arrival');
+  }
+  
+  // If we can't determine context, assume it's relevant
+  return true;
+}
+
 /**
  * Fill input field, handle dropdown suggestions, and return page diff
+ * Supports both regular inputs and dynamic combobox widgets like Google Flights
  */
 function fillInput(selector, value) {
   // Get the page state before the input
   const beforeState = getPageStateSnapshot();
   
-  // Use regular querySelector instead of querySelectorDeep
-  const element = document.querySelector(selector);
+  console.log(`üîç fillInput called with selector: "${selector}" and value: "${value}"`);
+  
+  let element = null;
+  
+  // Step 1: Generate flexible selectors based on the original
+  const flexibleSelectors = generateFlexibleSelectors(selector);
+  console.log(`üìã Generated ${flexibleSelectors.length} flexible selectors:`, flexibleSelectors);
+  
+  // Step 2: Try each flexible selector with shadow DOM piercing
+  for (let i = 0; i < flexibleSelectors.length; i++) {
+    const flexSelector = flexibleSelectors[i];
+    element = querySelectorDeep(document, flexSelector);
+    if (element) {
+      console.log(`‚úÖ Found element with selector [${i+1}/${flexibleSelectors.length}]: ${flexSelector}`);
+      break;
+    } else {
+      console.log(`‚ùå No element found with [${i+1}/${flexibleSelectors.length}]: ${flexSelector}`);
+    }
+  }
+  
+  // Step 3: If not found, try to handle dynamic combobox widgets
   if (!element) {
-    const errorMessage = `Could not find element: ${selector}`;
-    console.log(`‚ùå ${errorMessage}`);
-    throw new Error(errorMessage);
+    console.log(`üéØ Trying combobox detection and activation...`);
+    
+    // Enhanced combobox selectors with more Google Flights patterns
+    const comboboxSelectors = [
+      // Aria-label based (most common)
+      `div[role="combobox"][aria-label*="from"]`,
+      `div[role="combobox"][aria-label*="From"]`,
+      `div[role="combobox"][aria-label*="departure"]`,
+      `div[role="combobox"][aria-label*="origin"]`,
+      `div[role="combobox"][aria-label*="where from"]`,
+      `div[role="combobox"][aria-label*="Where from"]`,
+      // To destination variants
+      `div[role="combobox"][aria-label*="to"]`,
+      `div[role="combobox"][aria-label*="To"]`,
+      `div[role="combobox"][aria-label*="destination"]`,
+      `div[role="combobox"][aria-label*="where to"]`,
+      `div[role="combobox"][aria-label*="Where to"]`,
+      // Placeholder based fallbacks
+      `div[role="combobox"][placeholder*="from"]`,
+      `div[role="combobox"][placeholder*="to"]`,
+      `div[role="combobox"][placeholder*="departure"]`,
+      // Google Flights specific patterns
+      `div[data-flt-ve][role="combobox"]`,
+      `div[jsaction][role="combobox"]`,
+      `[aria-expanded="false"][role="combobox"]`,
+      // Generic combobox detection
+      `div[role="combobox"]`
+    ];
+    
+    for (const comboSelector of comboboxSelectors) {
+      const comboboxes = querySelectorAllDeep(document, comboSelector);
+      
+      for (const combobox of comboboxes) {
+        // Filter comboboxes based on context (from vs to)
+        if (!isRelevantCombobox(combobox, selector)) continue;
+        
+        console.log(`üìç Found relevant combobox widget: ${comboSelector}`);
+        console.log(`   - Element:`, combobox.outerHTML.substring(0, 200) + '...');
+        
+        // Click the combobox to activate it and spawn the input
+        combobox.click();
+        combobox.focus();
+        console.log(`üñ±Ô∏è Clicked combobox, waiting for input to appear...`);
+        
+        // Wait for the input to appear, trying all flexible selectors
+        let attempts = 0;
+        while (!element && attempts < 15) {
+          for (const flexSelector of flexibleSelectors) {
+            element = querySelectorDeep(document, flexSelector);
+            if (element) {
+              console.log(`‚úÖ Input appeared with selector: ${flexSelector}`);
+              break;
+            }
+          }
+          
+          if (!element) {
+            // Trigger a reflow to allow DOM updates
+            document.body.offsetHeight;
+            // Small delay using a blocking approach for sync compatibility
+            const start = Date.now();
+            while (Date.now() - start < 100) { /* busy wait */ }
+          }
+          attempts++;
+        }
+        
+        if (element) {
+          console.log(`‚úÖ Input appeared after clicking combobox (attempt ${attempts})`);
+          break;
+        } else {
+          console.log(`‚ö†Ô∏è No input appeared after clicking combobox (tried ${attempts} times)`);
+        }
+        
+        if (element) break; // Break out of combobox loop if found
+      }
+      if (element) break; // Break out of selector loop if found
+    }
+  }
+  
+  // Step 4: Final fallback with regular querySelector using flexible selectors
+  if (!element) {
+    console.log(`üîÑ Trying final fallback with regular querySelector...`);
+    for (const flexSelector of flexibleSelectors) {
+      element = document.querySelector(flexSelector);
+      if (element) {
+        console.log(`‚úÖ Found element with regular querySelector: ${flexSelector}`);
+        break;
+      }
+    }
+  }
+  
+  if (!element) {
+    const detailedError = `Could not find element with any selector:
+üéØ Original: ${selector}
+üîç Tried ${flexibleSelectors.length} flexible selectors: ${flexibleSelectors.join(', ')}
+üéõÔ∏è Tried ${comboboxSelectors.length} combobox patterns
+üí° Suggestion: Check if the page has loaded completely or if the element uses different attributes`;
+    
+    console.log(`‚ùå ${detailedError}`);
+    
+    // Log page analysis for debugging
+    const allInputs = document.querySelectorAll('input');
+    const allComboboxes = document.querySelectorAll('[role="combobox"]');
+    console.log(`üìä Page analysis: Found ${allInputs.length} inputs and ${allComboboxes.length} comboboxes`);
+    if (allInputs.length > 0) {
+      console.log(`üìù Available inputs:`, Array.from(allInputs).slice(0, 5).map(inp => ({
+        tag: inp.tagName,
+        type: inp.type,
+        ariaLabel: inp.getAttribute('aria-label'),
+        placeholder: inp.placeholder,
+        id: inp.id,
+        class: inp.className
+      })));
+    }
+    
+    throw new Error(detailedError);
   }
 
   // Focus the element first to trigger any dynamic changes
@@ -363,33 +611,10 @@ function fillInput(selector, value) {
     
     console.log(`‚úÖ Filled ${selector} with "${value}"`);
     
-    // **NEW**: Auto-click dropdown suggestions after filling
+    // **Enhanced**: Auto-handle dropdown suggestions after filling
     setTimeout(() => {
-      // Try multiple selectors for dropdown suggestions (Google Flights specific)
-      const suggestionSelectors = [
-        'ul[role="listbox"] li:first-child',
-        '.gws-flights-form__suggestion li:first-child', 
-        '[data-suggestion]:first-child',
-        '[role="option"]:first-child',
-        '.suggestion-item:first-child',
-        '.autocomplete-suggestion:first-child'
-      ];
-      
-      let clicked = false;
-      for (const suggestionSelector of suggestionSelectors) {
-        const suggestion = document.querySelector(suggestionSelector);
-        if (suggestion && !clicked) {
-          suggestion.click();
-          console.log(`‚úÖ Auto-clicked dropdown suggestion: ${suggestionSelector}`);
-          clicked = true;
-          break;
-        }
-      }
-      
-      if (!clicked) {
-        console.log(`‚ÑπÔ∏è No dropdown suggestions found to click after filling ${selector}`);
-      }
-    }, 500); // Wait 500ms for dropdown to appear
+      handleAutocompleteDropdown(element, selector);
+    }, 300); // Wait 300ms for dropdown to appear
     
     // Get the page state after the input
     const afterState = getPageStateSnapshot();
@@ -408,6 +633,79 @@ function fillInput(selector, value) {
   }
 }
 
+/**
+ * Handle autocomplete dropdown with multiple strategies
+ * @param {Element} inputElement - The input element that triggered the dropdown
+ * @param {string} selector - The original selector used
+ */
+function handleAutocompleteDropdown(inputElement, selector) {
+  // Strategy 1: Try keyboard navigation (DOWN + ENTER)
+  try {
+    // Send DOWN arrow key to select first suggestion
+    const downEvent = new KeyboardEvent('keydown', {
+      key: 'ArrowDown',
+      keyCode: 40,
+      which: 40,
+      bubbles: true,
+      cancelable: true
+    });
+    inputElement.dispatchEvent(downEvent);
+    
+    // Small delay then send ENTER to confirm selection
+    setTimeout(() => {
+      const enterEvent = new KeyboardEvent('keydown', {
+        key: 'Enter',
+        keyCode: 13,
+        which: 13,
+        bubbles: true,
+        cancelable: true
+      });
+      inputElement.dispatchEvent(enterEvent);
+      console.log(`‚å®Ô∏è Sent DOWN+ENTER sequence for autocomplete on ${selector}`);
+    }, 100);
+    
+    return true;
+  } catch (keyboardError) {
+    console.log(`‚ö†Ô∏è Keyboard navigation failed, trying click strategy:`, keyboardError.message);
+  }
+  
+  // Strategy 2: Try direct click on dropdown suggestions
+  const suggestionSelectors = [
+    'ul[role="listbox"] li:first-child',
+    '.gws-flights-form__suggestion li:first-child', 
+    '[data-suggestion]:first-child',
+    '[role="option"]:first-child',
+    '.suggestion-item:first-child',
+    '.autocomplete-suggestion:first-child',
+    // Enhanced selectors for Google Flights
+    '[jsaction*="click"] li:first-child',
+    '[data-value]:first-child',
+    '.dropdown-item:first-child'
+  ];
+  
+  for (const suggestionSelector of suggestionSelectors) {
+    try {
+      // Try both regular and deep selector search
+      let suggestion = document.querySelector(suggestionSelector);
+      if (!suggestion) {
+        suggestion = querySelectorDeep(document, suggestionSelector);
+      }
+      
+      if (suggestion && suggestion.offsetParent !== null) { // Check if visible
+        suggestion.click();
+        console.log(`‚úÖ Auto-clicked dropdown suggestion: ${suggestionSelector}`);
+        return true;
+      }
+    } catch (clickError) {
+      console.log(`‚ö†Ô∏è Click attempt failed for ${suggestionSelector}:`, clickError.message);
+      continue;
+    }
+  }
+  
+  console.log(`‚ÑπÔ∏è No dropdown suggestions found or clicked for ${selector}`);
+  return false;
+}
+
 /**
  * Get a snapshot of the current page state for diffing
  */
diff --git a/chrome/browser/resources/vibe/manifest.json b/chrome/browser/resources/vibe/manifest.json
index f7ba61986b..9250629637 100644
--- a/chrome/browser/resources/vibe/manifest.json
+++ b/chrome/browser/resources/vibe/manifest.json
@@ -32,7 +32,7 @@
       "48": "assets/icon48.png",
       "128": "assets/icon128.png"
     },
-    "default_title": "Open Vibe AI Agent (Cmd+E)"
+    "default_title": "Vibe AI Agent"
   },
   "side_panel": {
     "default_path": "sidepanel.html"
@@ -44,15 +44,6 @@
       "run_at": "document_idle"
     }
   ],
-  "commands": {
-    "toggle-panel": {
-      "suggested_key": {
-        "default": "Ctrl+E",
-        "mac": "Command+E"
-      },
-      "description": "Toggle the Vibe AI side panel"
-    }
-  },
   "icons": {
     "16": "assets/icon16.png",
     "48": "assets/icon48.png",
diff --git a/chrome/browser/resources/vibe/package-lock.json b/chrome/browser/resources/vibe/package-lock.json
index caf5d01b4f..8c3ec3dbcc 100644
--- a/chrome/browser/resources/vibe/package-lock.json
+++ b/chrome/browser/resources/vibe/package-lock.json
@@ -15,6 +15,7 @@
         "@langchain/langgraph": "^0.3.8",
         "eslint": "^9.31.0",
         "langchain": "^0.3.29",
+        "sharp": "^0.34.3",
         "turndown": "^7.1.2",
         "zod": "^3.22.4"
       },
@@ -577,6 +578,16 @@
         "node": ">=14.17.0"
       }
     },
+    "node_modules/@emnapi/runtime": {
+      "version": "1.4.5",
+      "resolved": "https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.5.tgz",
+      "integrity": "sha512-++LApOtY0pEEz1zrd9vy1/zXVaVJJ/EbAF3u0fXIzPJEDtnITsBGbbK0EkM72amhl/R5b+5xx0Y/QhcVOpuulg==",
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "tslib": "^2.4.0"
+      }
+    },
     "node_modules/@esbuild/aix-ppc64": {
       "version": "0.25.8",
       "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.8.tgz",
@@ -1238,6 +1249,424 @@
         "url": "https://github.com/sponsors/nzakas"
       }
     },
+    "node_modules/@img/sharp-darwin-arm64": {
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.34.3.tgz",
+      "integrity": "sha512-ryFMfvxxpQRsgZJqBd4wsttYQbCxsJksrv9Lw/v798JcQ8+w84mBWuXwl+TT0WJ/WrYOLaYpwQXi3sA9nTIaIg==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-darwin-arm64": "1.2.0"
+      }
+    },
+    "node_modules/@img/sharp-darwin-x64": {
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.34.3.tgz",
+      "integrity": "sha512-yHpJYynROAj12TA6qil58hmPmAwxKKC7reUqtGLzsOHfP7/rniNGTL8tjWX6L3CTV4+5P4ypcS7Pp+7OB+8ihA==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-darwin-x64": "1.2.0"
+      }
+    },
+    "node_modules/@img/sharp-libvips-darwin-arm64": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.2.0.tgz",
+      "integrity": "sha512-sBZmpwmxqwlqG9ueWFXtockhsxefaV6O84BMOrhtg/YqbTaRdqDE7hxraVE3y6gVM4eExmfzW4a8el9ArLeEiQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-darwin-x64": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.2.0.tgz",
+      "integrity": "sha512-M64XVuL94OgiNHa5/m2YvEQI5q2cl9d/wk0qFTDVXcYzi43lxuiFTftMR1tOnFQovVXNZJ5TURSDK2pNe9Yzqg==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-arm": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm/-/sharp-libvips-linux-arm-1.2.0.tgz",
+      "integrity": "sha512-mWd2uWvDtL/nvIzThLq3fr2nnGfyr/XMXlq8ZJ9WMR6PXijHlC3ksp0IpuhK6bougvQrchUAfzRLnbsen0Cqvw==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-arm64": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm64/-/sharp-libvips-linux-arm64-1.2.0.tgz",
+      "integrity": "sha512-RXwd0CgG+uPRX5YYrkzKyalt2OJYRiJQ8ED/fi1tq9WQW2jsQIn0tqrlR5l5dr/rjqq6AHAxURhj2DVjyQWSOA==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-ppc64": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-ppc64/-/sharp-libvips-linux-ppc64-1.2.0.tgz",
+      "integrity": "sha512-Xod/7KaDDHkYu2phxxfeEPXfVXFKx70EAFZ0qyUdOjCcxbjqyJOEUpDe6RIyaunGxT34Anf9ue/wuWOqBW2WcQ==",
+      "cpu": [
+        "ppc64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-s390x": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-s390x/-/sharp-libvips-linux-s390x-1.2.0.tgz",
+      "integrity": "sha512-eMKfzDxLGT8mnmPJTNMcjfO33fLiTDsrMlUVcp6b96ETbnJmd4uvZxVJSKPQfS+odwfVaGifhsB07J1LynFehw==",
+      "cpu": [
+        "s390x"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-x64": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.2.0.tgz",
+      "integrity": "sha512-ZW3FPWIc7K1sH9E3nxIGB3y3dZkpJlMnkk7z5tu1nSkBoCgw2nSRTFHI5pB/3CQaJM0pdzMF3paf9ckKMSE9Tg==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linuxmusl-arm64": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-arm64/-/sharp-libvips-linuxmusl-arm64-1.2.0.tgz",
+      "integrity": "sha512-UG+LqQJbf5VJ8NWJ5Z3tdIe/HXjuIdo4JeVNADXBFuG7z9zjoegpzzGIyV5zQKi4zaJjnAd2+g2nna8TZvuW9Q==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linuxmusl-x64": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.2.0.tgz",
+      "integrity": "sha512-SRYOLR7CXPgNze8akZwjoGBoN1ThNZoqpOgfnOxmWsklTGVfJiGJoC/Lod7aNMGA1jSsKWM1+HRX43OP6p9+6Q==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-linux-arm": {
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm/-/sharp-linux-arm-0.34.3.tgz",
+      "integrity": "sha512-oBK9l+h6KBN0i3dC8rYntLiVfW8D8wH+NPNT3O/WBHeW0OQWCjfWksLUaPidsrDKpJgXp3G3/hkmhptAW0I3+A==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-arm": "1.2.0"
+      }
+    },
+    "node_modules/@img/sharp-linux-arm64": {
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm64/-/sharp-linux-arm64-0.34.3.tgz",
+      "integrity": "sha512-QdrKe3EvQrqwkDrtuTIjI0bu6YEJHTgEeqdzI3uWJOH6G1O8Nl1iEeVYRGdj1h5I21CqxSvQp1Yv7xeU3ZewbA==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-arm64": "1.2.0"
+      }
+    },
+    "node_modules/@img/sharp-linux-ppc64": {
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-ppc64/-/sharp-linux-ppc64-0.34.3.tgz",
+      "integrity": "sha512-GLtbLQMCNC5nxuImPR2+RgrviwKwVql28FWZIW1zWruy6zLgA5/x2ZXk3mxj58X/tszVF69KK0Is83V8YgWhLA==",
+      "cpu": [
+        "ppc64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-ppc64": "1.2.0"
+      }
+    },
+    "node_modules/@img/sharp-linux-s390x": {
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-s390x/-/sharp-linux-s390x-0.34.3.tgz",
+      "integrity": "sha512-3gahT+A6c4cdc2edhsLHmIOXMb17ltffJlxR0aC2VPZfwKoTGZec6u5GrFgdR7ciJSsHT27BD3TIuGcuRT0KmQ==",
+      "cpu": [
+        "s390x"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-s390x": "1.2.0"
+      }
+    },
+    "node_modules/@img/sharp-linux-x64": {
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.34.3.tgz",
+      "integrity": "sha512-8kYso8d806ypnSq3/Ly0QEw90V5ZoHh10yH0HnrzOCr6DKAPI6QVHvwleqMkVQ0m+fc7EH8ah0BB0QPuWY6zJQ==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-x64": "1.2.0"
+      }
+    },
+    "node_modules/@img/sharp-linuxmusl-arm64": {
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-arm64/-/sharp-linuxmusl-arm64-0.34.3.tgz",
+      "integrity": "sha512-vAjbHDlr4izEiXM1OTggpCcPg9tn4YriK5vAjowJsHwdBIdx0fYRsURkxLG2RLm9gyBq66gwtWI8Gx0/ov+JKQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linuxmusl-arm64": "1.2.0"
+      }
+    },
+    "node_modules/@img/sharp-linuxmusl-x64": {
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.34.3.tgz",
+      "integrity": "sha512-gCWUn9547K5bwvOn9l5XGAEjVTTRji4aPTqLzGXHvIr6bIDZKNTA34seMPgM0WmSf+RYBH411VavCejp3PkOeQ==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linuxmusl-x64": "1.2.0"
+      }
+    },
+    "node_modules/@img/sharp-wasm32": {
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-wasm32/-/sharp-wasm32-0.34.3.tgz",
+      "integrity": "sha512-+CyRcpagHMGteySaWos8IbnXcHgfDn7pO2fiC2slJxvNq9gDipYBN42/RagzctVRKgxATmfqOSulgZv5e1RdMg==",
+      "cpu": [
+        "wasm32"
+      ],
+      "license": "Apache-2.0 AND LGPL-3.0-or-later AND MIT",
+      "optional": true,
+      "dependencies": {
+        "@emnapi/runtime": "^1.4.4"
+      },
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-win32-arm64": {
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-win32-arm64/-/sharp-win32-arm64-0.34.3.tgz",
+      "integrity": "sha512-MjnHPnbqMXNC2UgeLJtX4XqoVHHlZNd+nPt1kRPmj63wURegwBhZlApELdtxM2OIZDRv/DFtLcNhVbd1z8GYXQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "Apache-2.0 AND LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-win32-ia32": {
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-win32-ia32/-/sharp-win32-ia32-0.34.3.tgz",
+      "integrity": "sha512-xuCdhH44WxuXgOM714hn4amodJMZl3OEvf0GVTm0BEyMeA2to+8HEdRPShH0SLYptJY1uBw+SCFP9WVQi1Q/cw==",
+      "cpu": [
+        "ia32"
+      ],
+      "license": "Apache-2.0 AND LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-win32-x64": {
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.34.3.tgz",
+      "integrity": "sha512-OWwz05d++TxzLEv4VnsTz5CmZ6mI6S05sfQGEMrNrQcOEERbX46332IvE7pO/EUiw7jUrrS40z/M7kPyjfl04g==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "Apache-2.0 AND LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
     "node_modules/@isaacs/cliui": {
       "version": "8.0.2",
       "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
@@ -3581,6 +4010,19 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/color": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/color/-/color-4.2.3.tgz",
+      "integrity": "sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1",
+        "color-string": "^1.9.0"
+      },
+      "engines": {
+        "node": ">=12.5.0"
+      }
+    },
     "node_modules/color-convert": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
@@ -3599,6 +4041,16 @@
       "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
       "license": "MIT"
     },
+    "node_modules/color-string": {
+      "version": "1.9.1",
+      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
+      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-name": "^1.0.0",
+        "simple-swizzle": "^0.2.2"
+      }
+    },
     "node_modules/colorette": {
       "version": "2.0.20",
       "resolved": "https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz",
@@ -3813,6 +4265,15 @@
         "node": ">= 14"
       }
     },
+    "node_modules/detect-libc": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
+      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/detect-newline": {
       "version": "3.1.0",
       "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
@@ -8020,6 +8481,60 @@
         "node": ">=8"
       }
     },
+    "node_modules/sharp": {
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/sharp/-/sharp-0.34.3.tgz",
+      "integrity": "sha512-eX2IQ6nFohW4DbvHIOLRB3MHFpYqaqvXd3Tp5e/T/dSH83fxaNJQRvDMhASmkNTsNTVF2/OOopzRCt7xokgPfg==",
+      "hasInstallScript": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "color": "^4.2.3",
+        "detect-libc": "^2.0.4",
+        "semver": "^7.7.2"
+      },
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-darwin-arm64": "0.34.3",
+        "@img/sharp-darwin-x64": "0.34.3",
+        "@img/sharp-libvips-darwin-arm64": "1.2.0",
+        "@img/sharp-libvips-darwin-x64": "1.2.0",
+        "@img/sharp-libvips-linux-arm": "1.2.0",
+        "@img/sharp-libvips-linux-arm64": "1.2.0",
+        "@img/sharp-libvips-linux-ppc64": "1.2.0",
+        "@img/sharp-libvips-linux-s390x": "1.2.0",
+        "@img/sharp-libvips-linux-x64": "1.2.0",
+        "@img/sharp-libvips-linuxmusl-arm64": "1.2.0",
+        "@img/sharp-libvips-linuxmusl-x64": "1.2.0",
+        "@img/sharp-linux-arm": "0.34.3",
+        "@img/sharp-linux-arm64": "0.34.3",
+        "@img/sharp-linux-ppc64": "0.34.3",
+        "@img/sharp-linux-s390x": "0.34.3",
+        "@img/sharp-linux-x64": "0.34.3",
+        "@img/sharp-linuxmusl-arm64": "0.34.3",
+        "@img/sharp-linuxmusl-x64": "0.34.3",
+        "@img/sharp-wasm32": "0.34.3",
+        "@img/sharp-win32-arm64": "0.34.3",
+        "@img/sharp-win32-ia32": "0.34.3",
+        "@img/sharp-win32-x64": "0.34.3"
+      }
+    },
+    "node_modules/sharp/node_modules/semver": {
+      "version": "7.7.2",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
+      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
     "node_modules/shebang-command": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
@@ -8048,6 +8563,21 @@
       "dev": true,
       "license": "ISC"
     },
+    "node_modules/simple-swizzle": {
+      "version": "0.2.2",
+      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
+      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
+      "license": "MIT",
+      "dependencies": {
+        "is-arrayish": "^0.3.1"
+      }
+    },
+    "node_modules/simple-swizzle/node_modules/is-arrayish": {
+      "version": "0.3.2",
+      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
+      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==",
+      "license": "MIT"
+    },
     "node_modules/simple-wcswidth": {
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/simple-wcswidth/-/simple-wcswidth-1.1.2.tgz",
@@ -8801,7 +9331,7 @@
       "version": "2.8.1",
       "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
       "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
-      "dev": true,
+      "devOptional": true,
       "license": "0BSD"
     },
     "node_modules/turndown": {
diff --git a/chrome/browser/resources/vibe/package.json b/chrome/browser/resources/vibe/package.json
index 4e1303d862..97270a4ed4 100644
--- a/chrome/browser/resources/vibe/package.json
+++ b/chrome/browser/resources/vibe/package.json
@@ -21,6 +21,7 @@
     "@langchain/langgraph": "^0.3.8",
     "eslint": "^9.31.0",
     "langchain": "^0.3.29",
+    "sharp": "^0.34.3",
     "turndown": "^7.1.2",
     "zod": "^3.22.4"
   },
diff --git a/chrome/browser/resources/vibe/sidepanel.css b/chrome/browser/resources/vibe/sidepanel.css
index 5232e6305b..84d435a507 100644
--- a/chrome/browser/resources/vibe/sidepanel.css
+++ b/chrome/browser/resources/vibe/sidepanel.css
@@ -3,44 +3,127 @@
 @tailwind utilities;
 
 @layer base {
-  :root {
-    --assistant-bg: #f0f0f0;
-    --user-bg: #ffffff;
+  * {
+    box-sizing: border-box;
   }
 
-  .dark {
-    --assistant-bg: #444654;
-    --user-bg: #202123;
+  html, body, #root {
+    @apply h-full w-full m-0 p-0;
+    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
   }
 
-  code {
-    font-family: monospace;
-    background-color: #202123;
-    color: white;
-    padding: 0.2rem 0.4rem;
-    border-radius: 0.25rem;
+  body {
+    @apply antialiased;
   }
 }
 
-#loader{ @apply hidden items-center justify-center gap-1;}
-#loader .dot{ @apply w-2 h-2 rounded-full bg-gray-400 dark:bg-gray-500 animate-bounce;}
-#loader .dot:nth-child(2){animation-delay:.2s}
-#loader .dot:nth-child(3){animation-delay:.4s}
+@layer components {
+  /* Custom scrollbar */
+  .messages-container {
+    scrollbar-width: thin;
+    scrollbar-color: rgba(156, 163, 175, 0.3) transparent;
+  }
 
-::-webkit-scrollbar {
-  width: 6px;
-}
+  .messages-container::-webkit-scrollbar {
+    width: 6px;
+  }
 
-::-webkit-scrollbar-track {
-  background: transparent;
-}
+  .messages-container::-webkit-scrollbar-track {
+    background: transparent;
+  }
 
-::-webkit-scrollbar-thumb {
-  background: #ccc;
-  border-radius: 3px;
-}
+  .messages-container::-webkit-scrollbar-thumb {
+    @apply bg-gray-300 rounded-full;
+  }
+
+  .messages-container::-webkit-scrollbar-thumb:hover {
+    @apply bg-gray-400;
+  }
+
+  /* Input area auto-resize */
+  .message-input {
+    field-sizing: content;
+  }
+
+  /* Message content styling */
+  .message-content {
+    line-height: 1.6;
+  }
+
+  .message-content p {
+    @apply mb-2 last:mb-0;
+  }
+
+  .message-content pre {
+    @apply bg-gray-900 text-gray-100 p-3 rounded-lg overflow-x-auto text-sm my-2;
+  }
+
+  .message-content code {
+    @apply bg-gray-100 text-gray-800 px-1.5 py-0.5 rounded text-sm;
+  }
+
+  .message-content pre code {
+    @apply bg-transparent text-gray-100 p-0;
+  }
+
+  .message-content ul, .message-content ol {
+    @apply pl-5 mb-2;
+  }
 
-::-webkit-scrollbar-thumb:hover {
-  background: #aaa;
-  width: 12px;
+  .message-content li {
+    @apply mb-1;
+  }
+
+  .message-content blockquote {
+    @apply border-l-4 border-gray-300 pl-4 italic text-gray-600 my-2;
+  }
+
+  .message-content h1, .message-content h2, .message-content h3, .message-content h4, .message-content h5, .message-content h6 {
+    @apply font-semibold mt-4 mb-2;
+  }
+
+  .message-content h1 {
+    @apply text-xl;
+  }
+
+  .message-content h2 {
+    @apply text-lg;
+  }
+
+  .message-content h3 {
+    @apply text-base;
+  }
+
+  /* Processing animation */
+  @keyframes pulse {
+    0%, 100% {
+      opacity: 0.4;
+    }
+    50% {
+      opacity: 1;
+    }
+  }
+
+  .animate-pulse {
+    animation: pulse 1.5s ease-in-out infinite;
+  }
+
+  /* Focus states */
+  .focus-within\:border-gray-300:focus-within {
+    border-color: #d1d5db;
+  }
+
+  /* Button states */
+  .send-button-enabled {
+    @apply bg-green-600 hover:bg-green-700 text-white;
+  }
+
+  .send-button-enabled svg {
+    @apply text-white;
+  }
+
+  /* Smooth transitions */
+  * {
+    @apply transition-colors duration-200;
+  }
 }
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/sidepanel.html b/chrome/browser/resources/vibe/sidepanel.html
index 271f394d16..1cca7332d4 100644
--- a/chrome/browser/resources/vibe/sidepanel.html
+++ b/chrome/browser/resources/vibe/sidepanel.html
@@ -8,242 +8,121 @@
   <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
   <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
   <link href="./sidepanel.css" rel="stylesheet">
-  <style>
-    @media (prefers-color-scheme: dark), (forced-colors: active) {
-      .messages {
-        background-color: #292a2d;
-        border-color: #3c4043;
-      }
-    }
-    
-    html.dark-theme .messages {
-      background-color: #292a2d;
-      border-color: #3c4043;
-    }
-
-    .message {
-      margin-bottom: 16px;
-      padding: 12px 16px;
-      border-radius: 8px;
-      max-width: 85%;
-      word-wrap: break-word;
-    }
-
-    .message.user {
-      background-color: #e8f0fe;
-      color: #202124;
-      align-self: flex-end;
-      margin-left: auto;
-    }
-    
-    @media (prefers-color-scheme: dark), (forced-colors: active) {
-      .message.user {
-        background-color: #174ea6;
-        color: #e8eaed;
-      }
-    }
-    
-    html.dark-theme .message.user {
-      background-color: #174ea6;
-      color: #e8eaed;
-    }
-
-    .message.agent {
-      background-color: #f1f3f4;
-      color: #202124;
-      align-self: flex-start;
-    }
-    
-    @media (prefers-color-scheme: dark), (forced-colors: active) {
-      .message.agent {
-        background-color: #3c4043;
-        color: #e8eaed;
-      }
-    }
-    
-    html.dark-theme .message.agent {
-      background-color: #3c4043;
-      color: #e8eaed;
-    }
-
-    .message.system {
-      background-color: #f8f9fa;
-      color: #5f6368;
-      font-style: italic;
-      align-self: center;
-      max-width: 90%;
-      text-align: center;
-    }
-    
-    @media (prefers-color-scheme: dark), (forced-colors: active) {
-      .message.system {
-        background-color: #292a2d;
-        color: #9aa0a6;
-      }
-    }
-    
-    html.dark-theme .message.system {
-      background-color: #292a2d;
-      color: #9aa0a6;
-    }
-
-    /* Input area */
-    .input-area {
-      display: flex;
-      padding: 12px 16px;
-      border-top: 1px solid #dadce0;
-    }
-    
-    @media (prefers-color-scheme: dark), (forced-colors: active) {
-      .input-area {
-        border-top-color: #3c4043;
-      }
-    }
-    
-    html.dark-theme .input-area {
-      border-top-color: #3c4043;
-    }
-
-    .input-area input {
-      flex: 1;
-      padding: 10px 16px;
-      border: 1px solid #dadce0;
-      border-radius: 20px;
-      font-size: 14px;
-      outline: none;
-      background-color: #ffffff;
-      color: #202124;
-    }
-    
-    @media (prefers-color-scheme: dark), (forced-colors: active) {
-      .input-area input {
-        background-color: #292a2d;
-        color: #e8eaed;
-        border-color: #3c4043;
-      }
-    }
-    
-    html.dark-theme .input-area input {
-      background-color: #292a2d;
-      color: #e8eaed;
-      border-color: #3c4043;
-    }
-
-    .input-area input:focus {
-      @apply border-blue-500 ring-2 ring-blue-500/20;
-    }
-
-    /* Status dot */
-    .status-dot {
-      @apply w-2 h-2 rounded-full mr-1.5;
-    }
-
-    .status-dot.processing {
-      @apply bg-yellow-400;
-    }
-
-    .status-dot.error {
-      @apply bg-red-500;
-    }
-
-    /* Loader */
-    .loader {
-      @apply flex justify-center items-center gap-1;
-    }
-
-    .loader-dot {
-      @apply w-2 h-2 rounded-full bg-green-500;
-      animation: pulse 1s infinite;
-    }
-
-    @keyframes pulse {
-      0%, 100% { opacity: 1; }
-      50% { opacity: 0.5; }
-    }
-  </style>
 </head>
-<body class="h-full bg-light-bg dark:bg-dark-bg text-light-text dark:text-dark-text transition-colors duration-200">
+<body class="h-full bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 font-inter">
   <div id="root" class="h-full flex flex-col">
-    <!-- Main chat area -->
-    <div class="flex-1 overflow-hidden flex flex-col">
-      <!-- Messages container -->
-      <div id="messages" class="scroll-container flex-1 overflow-y-auto">
-        <div class="messages-container">
-          <!-- Messages will be inserted here by JavaScript -->
-        </div>
-      </div>
-
-      <!-- Quick actions (suggested messages) -->
-      <div id="quickActions" class="quick-actions">
-        <!-- Quick action buttons will be inserted here by JavaScript -->
+    <!-- Header -->
+    <div class="shrink-0 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800">
+      <div class="px-4 py-3">
+        <div id="modelName" class="text-sm text-gray-600 dark:text-gray-400">GPT-4o mini</div>
       </div>
+    </div>
 
-      <!-- Input area -->
-      <div class="input-container">
-        <div class="input-area">
-          <textarea
-            id="messageInput"
-            class="message-input"
-            placeholder="Message Vibe AI..."
-            rows="1"
-            spellcheck="true"
-          ></textarea>
-          <button id="sendButton" class="send-button" disabled>
-            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
-              <line x1="22" y1="2" x2="11" y2="13"></line>
-              <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
-            </svg>
-          </button>
-          <button id="stopButton" class="stop-button" style="display: none;">
-            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
-              <rect x="6" y="4" width="4" height="16"></rect>
-              <rect x="14" y="4" width="4" height="16"></rect>
-            </svg>
-          </button>
-        </div>
-      </div>
-      
-      <div class="quick-actions">
-        <h3>Quick Actions</h3>
-        <div class="quick-action-buttons">
-          <div class="quick-action" data-command="summarize this page">üìù Summarize Page</div>
-          <div class="quick-action" data-command="translate this page">üåç Translate</div>
-          <div class="quick-action" data-command="improve this text">‚ú® Improve Text</div>
-          <div class="quick-action" data-command="fill this form">üìã Fill Form</div>
+    <!-- Messages container -->
+    <div class="flex-1 overflow-hidden">
+      <div id="messages" class="h-full overflow-y-auto">
+        <div class="messages-container px-4 py-6 max-w-3xl mx-auto">
+          <!-- Welcome message - hidden when chat starts -->
+          <div id="welcomeMessage" class="flex justify-center mb-8">
+            <div class="text-center">
+              <div class="w-10 h-10 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-4">
+                <span class="text-white font-bold text-lg">V</span>
+              </div>
+              <h2 class="text-xl font-medium text-gray-800 dark:text-gray-200 mb-2">What can I help with?</h2>
+            </div>
+          </div>
+          <!-- Messages will be inserted here by JavaScript -->
         </div>
       </div>
     </div>
-    
-    <div class="status">
-      <div class="status-indicator">
-        <div class="status-dot" id="statusDot"></div>
-        <span id="statusText">Ready</span>
+
+    <!-- Input area -->
+    <div class="shrink-0 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800">
+      <div class="px-4 py-4">
+        <div class="relative max-w-3xl mx-auto">
+          <div class="flex items-end bg-gray-50 dark:bg-gray-700 rounded-2xl border border-gray-200 dark:border-gray-600 focus-within:border-gray-300 dark:focus-within:border-gray-500 transition-colors">
+            <!-- Attachment button -->
+            <button class="p-3 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 transition-colors">
+              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
+                <path d="M15 7v6a3 3 0 0 1-6 0V3a5 5 0 0 1 10 0v10a7 7 0 0 1-14 0V9"></path>
+              </svg>
+            </button>
+            
+            <textarea
+              id="messageInput"
+              class="flex-1 resize-none bg-transparent px-2 py-3 text-sm outline-none placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-gray-100 min-h-[44px] max-h-32"
+              placeholder="Message Vibe AI"
+              rows="1"
+              spellcheck="true"
+            ></textarea>
+            
+            <!-- Voice input button -->
+            <button class="p-3 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 transition-colors">
+              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
+                <path d="M12 2a3 3 0 0 0-3 3v6a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"></path>
+                <path d="M19 10v1a7 7 0 0 1-14 0v-1"></path>
+                <line x1="12" y1="18" x2="12" y2="22"></line>
+                <line x1="8" y1="22" x2="16" y2="22"></line>
+              </svg>
+            </button>
+            
+            <button id="sendButton" class="p-2 m-1 rounded-lg bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors" disabled>
+              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="text-gray-600 dark:text-gray-300">
+                <line x1="22" y1="2" x2="11" y2="13"></line>
+                <polygon points="22,2 15,22 11,13 2,9 22,2"></polygon>
+              </svg>
+            </button>
+          </div>
+        </div>
       </div>
-      <div class="version">v1.0.0</div>
     </div>
   </div>
 
-  <!-- Templates -->
-  <template id="messageTemplate">
-    <div class="message">
-      <div class="message-content"></div>
-      <div class="message-timestamp"></div>
+  <!-- Message templates -->
+  <template id="userMessageTemplate">
+    <div class="flex justify-end mb-6">
+      <div class="bg-gray-100 dark:bg-gray-700 rounded-2xl px-4 py-3 max-w-xs lg:max-w-md text-sm text-gray-900 dark:text-gray-100">
+        <div class="message-content"></div>
+      </div>
     </div>
   </template>
 
-  <template id="loaderTemplate">
-    <div class="message assistant-message">
-      <div class="message-loader">
-        <div class="loader-dot"></div>
-        <div class="loader-dot" style="animation-delay: 0.2s"></div>
-        <div class="loader-dot" style="animation-delay: 0.4s"></div>
+  <template id="assistantMessageTemplate">
+    <div class="flex justify-start mb-6">
+      <div class="flex items-start space-x-3 max-w-full">
+        <div class="w-7 h-7 bg-green-600 rounded-full flex items-center justify-center shrink-0 mt-1">
+          <span class="text-white font-bold text-xs">AI</span>
+        </div>
+        <div class="message-content text-sm leading-relaxed max-w-none text-gray-900 dark:text-gray-100"></div>
       </div>
     </div>
   </template>
 
-  <template id="quickActionTemplate">
-    <div class="quick-action">
-      <button class="quick-action-button"></button>
+  <template id="systemMessageTemplate">
+    <div class="flex justify-center mb-4">
+      <div class="text-xs text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-700 px-3 py-1 rounded-full">
+        <div class="message-content"></div>
+      </div>
+    </div>
+  </template>
+  
+  <!-- Thinking indicator template -->
+  <template id="thinkingTemplate">
+    <div class="flex justify-start mb-6">
+      <div class="flex items-start space-x-3 max-w-full">
+        <div class="w-7 h-7 bg-green-600 rounded-full flex items-center justify-center shrink-0 mt-1">
+          <span class="text-white font-bold text-xs">AI</span>
+        </div>
+        <div class="text-sm text-gray-600 dark:text-gray-400 italic bg-gray-50 dark:bg-gray-700 px-3 py-2 rounded-lg">
+          <div class="thinking-content">
+            <div class="tool-indicator flex items-center gap-2">
+              <div class="animate-spin rounded-full h-3 w-3 border-b-2 border-green-600"></div>
+              <span class="tool-name">Thinking...</span>
+            </div>
+            <div class="thinking-duration-text text-xs opacity-75 mt-1">for <span class="thinking-duration">0</span> seconds</div>
+          </div>
+        </div>
+      </div>
     </div>
   </template>
 
diff --git a/chrome/browser/resources/vibe/sidepanel.js b/chrome/browser/resources/vibe/sidepanel.js
index 08ed50fae7..c287a905e9 100644
--- a/chrome/browser/resources/vibe/sidepanel.js
+++ b/chrome/browser/resources/vibe/sidepanel.js
@@ -11,36 +11,34 @@ class VibeAISidePanel {
     this.messagesContainer = document.querySelector(".messages-container");
     this.messageInput = document.getElementById("messageInput");
     this.sendButton = document.getElementById("sendButton");
-    this.stopButton = document.getElementById("stopButton");
-    this.statusText = document.getElementById("statusText");
-    this.quickActionsContainer = document.getElementById("quickActions");
-    this.themeToggle = document.getElementById("themeToggle");
-    this.themeIcon = document.getElementById("themeIcon");
+    this.welcomeMessage = document.getElementById("welcomeMessage");
     
     // State
     this.isProcessing = false;
     this.messageHistory = [];
     this.currentOperationId = null;
     this.pendingQuestionRequest = null;
-    this.isDarkMode = false;
+    this.thinkingStartTime = null;
+    this.currentTool = null;
     
     // Templates
-    this.messageTemplate = document.getElementById("messageTemplate").content;
-    this.loaderTemplate = document.getElementById("loaderTemplate").content;
-    this.quickActionTemplate = document.getElementById("quickActionTemplate").content;
+    this.userMessageTemplate = document.getElementById("userMessageTemplate").content;
+    this.assistantMessageTemplate = document.getElementById("assistantMessageTemplate").content;
+    this.systemMessageTemplate = document.getElementById("systemMessageTemplate").content;
+    this.thinkingTemplate = document.getElementById("thinkingTemplate").content;
     
     this.initialize();
   }
   
   initialize() {
-    console.log("üöÄ [SIDE-PANEL] [sidepanel.js] Initializing Vibe AI Side Panel...");
+    console.log("Initializing Vibe AI Side Panel...");
+    
+    // Set up dark mode detection
+    this.setupDarkMode();
     
     // Initialize event listeners
     this.initializeEventListeners();
     
-    // Set up dark mode
-    this.setupDarkMode();
-    
     // Set up message input auto-resize
     this.setupMessageInput();
     
@@ -305,121 +303,37 @@ class VibeAISidePanel {
    * @returns {HTMLElement} The created message element
    */
   addMessage(type, content, options = {}) {
-    // Create message element from template
-    const messageEl = document.importNode(this.messageTemplate, true).firstElementChild;
-    const messageContent = messageEl.querySelector('.message-content');
-    const messageContainer = messageEl.querySelector('.message-container');
-    
-    // Set message type classes
-    const isUser = type === 'user';
-    const isSystem = type === 'system';
+    // Hide welcome message when first message is added
+    if (this.welcomeMessage && !this.welcomeMessage.classList.contains('hidden')) {
+      this.welcomeMessage.classList.add('hidden');
+    }
     
-    // Base classes for all messages
-    const baseClasses = [
-      'group',
-      'w-full',
-      'py-2',
-      'px-4',
-      'sm:px-6',
-      'relative',
-      'flex',
-      'flex-col'
-    ];
+    let messageEl, messageContent;
     
-    // Type-specific classes
-    if (isUser) {
-      messageEl.classList.add('from-user');
-      messageContainer.classList.add(
-        'ml-auto',
-        'max-w-[85%]',
-        'bg-blue-500',
-        'text-white',
-        'rounded-t-2xl',
-        'rounded-bl-2xl',
-        'shadow'
-      );
-    } else if (isSystem) {
-      messageEl.classList.add('system-message');
-      messageContainer.classList.add(
-        'mx-auto',
-        'max-w-[90%]',
-        'bg-gray-100',
-        'dark:bg-gray-800',
-        'text-gray-700',
-        'dark:text-gray-300',
-        'rounded-lg',
-        'py-2',
-        'px-3',
-        'text-sm',
-        'text-center',
-        'shadow-sm'
-      );
-    } else {
-      // Assistant message (default)
-      messageEl.classList.add('from-assistant');
-      messageContainer.classList.add(
-        'mr-auto',
-        'max-w-[85%]',
-        'bg-white',
-        'dark:bg-gray-700',
-        'text-gray-800',
-        'dark:text-gray-100',
-        'rounded-t-2xl',
-        'rounded-br-2xl',
-        'shadow',
-        'border',
-        'border-gray-100',
-        'dark:border-gray-600'
-      );
+    // Select the appropriate template based on message type
+    if (type === 'user') {
+      messageEl = document.importNode(this.userMessageTemplate, true).firstElementChild;
+      messageContent = messageEl.querySelector('.message-content');
+    } else if (type === 'system') {
+      messageEl = document.importNode(this.systemMessageTemplate, true).firstElementChild;
+      messageContent = messageEl.querySelector('.message-content');
+    } else { // 'agent' or 'assistant'
+      messageEl = document.importNode(this.assistantMessageTemplate, true).firstElementChild;
+      messageContent = messageEl.querySelector('.message-content');
     }
     
-    // Convert markdown to HTML if needed
+    // Convert markdown to HTML if needed and remove emojis for user messages
     const htmlContent = options.isHtml ? content : this.markdownToHtml(content);
-    messageContent.innerHTML = this.sanitizeHtml(htmlContent);
-    
-    // Style code blocks
-    messageContent.querySelectorAll('pre').forEach(pre => {
-      pre.classList.add('bg-gray-800', 'text-gray-100', 'p-3', 'rounded-lg', 'overflow-x-auto', 'my-2');
-      pre.querySelector('code')?.classList.add('block', 'whitespace-pre', 'font-mono', 'text-sm');
-    });
-    
-    // Style inline code
-    messageContent.querySelectorAll('code:not(pre code)').forEach(code => {
-      code.classList.add('bg-gray-100', 'dark:bg-gray-700', 'px-1', 'py-0.5', 'rounded', 'text-sm', 'font-mono');
-    });
-    
-    // Style links
-    messageContent.querySelectorAll('a').forEach(link => {
-      link.classList.add('text-blue-500', 'hover:underline', 'break-words');
-      link.setAttribute('target', '_blank');
-      link.setAttribute('rel', 'noopener noreferrer');
-    });
+    const cleanContent = type === 'user' ? this.removeEmojis(htmlContent) : htmlContent;
+    messageContent.innerHTML = this.sanitizeHtml(cleanContent);
     
-    // Add timestamp
-    const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
-    const timeEl = document.createElement('div');
-    timeEl.className = 'text-xs mt-1 text-gray-500 dark:text-gray-400 self-end';
-    timeEl.textContent = timestamp;
-    messageEl.appendChild(timeEl);
+    // Add to message history
+    this.messageHistory.push({ type, content, timestamp: Date.now() });
     
-    // Add to DOM
+    // Add message to container
     this.messagesContainer.appendChild(messageEl);
     this.scrollToBottom();
     
-    // Add to message history
-    this.messageHistory.push({
-      type,
-      content,
-      timestamp: Date.now(),
-      isHtml: options.isHtml || false
-    });
-    
-    // Save messages (debounced)
-    if (this.saveMessagesTimeout) {
-      clearTimeout(this.saveMessagesTimeout);
-    }
-    this.saveMessagesTimeout = setTimeout(() => this.saveMessages(), 1000);
-    
     return messageEl;
   }
   
@@ -446,13 +360,19 @@ class VibeAISidePanel {
   }
   
   /**
-   * Sanitizes HTML to prevent XSS
+   * Sanitizes HTML to prevent XSS while preserving basic formatting
    * @param {string} html - HTML to sanitize
    * @returns {string} Sanitized HTML
    */
   sanitizeHtml(html) {
+    // Simple sanitization - in production use DOMPurify or similar
     const temp = document.createElement('div');
-    temp.textContent = html;
+    temp.innerHTML = html;
+    
+    // Remove script tags and other dangerous elements
+    const scripts = temp.querySelectorAll('script');
+    scripts.forEach(script => script.remove());
+    
     return temp.innerHTML;
   }
   
@@ -540,29 +460,20 @@ class VibeAISidePanel {
     
     // Update input and button states
     this.messageInput.disabled = processing;
-    this.sendButton.disabled = processing;
-    
-    // Toggle button visibility
-    if (this.sendButton) {
-      this.sendButton.classList.toggle('hidden', processing);
-    }
-    
-    if (this.stopButton) {
-      this.stopButton.classList.toggle('hidden', !processing);
-    }
+    this.sendButton.disabled = processing || !this.messageInput.value.trim();
     
-    // Show/hide quick actions
-    if (this.quickActionsContainer) {
-      this.quickActionsContainer.classList.toggle('hidden', processing);
+    // Update send button styling
+    if (processing || !this.messageInput.value.trim()) {
+      this.sendButton.className = "p-2 m-1 rounded-lg bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors";
+    } else {
+      this.sendButton.className = "p-2 m-1 rounded-lg bg-green-600 hover:bg-green-700 text-white transition-colors";
     }
     
-    // Update status and show loading indicator
+    // Show/hide thinking indicator
     if (processing) {
-      this.showLoading();
-      this.updateStatus("processing", "Thinking...");
+      this.showThinking();
     } else {
-      this.hideLoading();
-      this.updateStatus("ready", "Ready");
+      this.hideThinking();
     }
   }
 
@@ -821,6 +732,14 @@ class VibeAISidePanel {
           this._handleStatusUpdate(message);
           break;
           
+        case "TOOL_UPDATE":
+          this._handleToolUpdate(message);
+          break;
+          
+        case "REASONING_UPDATE":
+          this._handleReasoningUpdate(message);
+          break;
+          
         case "USER_QUESTION":
           this._handleUserQuestion(message, sendResponse);
           return true; // Keep message channel open for response
@@ -929,6 +848,11 @@ class VibeAISidePanel {
   _processToolResults(toolResults) {
     try {
       toolResults.forEach(toolResult => {
+        // Update tool indicator to show current tool
+        if (toolResult.tool && this.isProcessing) {
+          this.updateToolIndicator(`Using ${this._getToolDisplayName(toolResult.tool)}...`);
+        }
+        
         if (toolResult.tool === 'reasoning' && toolResult.args) {
           // Display thinking process
           if (toolResult.args.thinking) {
@@ -944,9 +868,9 @@ class VibeAISidePanel {
           // Display other tool results briefly
           const result = toolResult.result;
           if (result && !result.error) {
-            this.addMessage("system", `üîß ${toolResult.tool}: ${typeof result === 'string' ? result : 'Success'}`);
+            this.addMessage("system", `üîß ${this._getToolDisplayName(toolResult.tool)}: ${typeof result === 'string' ? result : 'Success'}`);
           } else if (result && result.error) {
-            this.addMessage("system", `‚ùå ${toolResult.tool}: ${result.error}`);
+            this.addMessage("system", `‚ùå ${this._getToolDisplayName(toolResult.tool)}: ${result.error}`);
           }
         }
       });
@@ -956,56 +880,6 @@ class VibeAISidePanel {
     }
   }
 
-  /**
-   * Handles status update messages
-   * @param {Object} message - The status update message
-   * @private
-   */
-  _handleStatusUpdate(message) {
-    if (!message.data) return;
-
-    console.log('‚ÑπÔ∏è [SIDE-PANEL] [sidepanel.js] Processing status update:', JSON.stringify(message.data));
-
-    switch (message.data.type) {
-      case 'USER_QUERY':
-        // Only add user messages that come from other sources (like omnibox)
-        if (message.data.source && message.data.source !== 'sidepanel') {
-          this.addMessage("user", message.data.message);
-        }
-        break;
-          
-      case 'PROCESSING':
-        this.addMessage("system", `‚è≥ ${message.data.message || 'Processing...'}`);
-        this.setProcessing(true);
-        break;
-          
-      case 'COMPLETED':
-        if (message.data.result) {
-          // Display individual tool results, especially reasoning/thinking
-          if (message.data.result.toolResults && Array.isArray(message.data.result.toolResults)) {
-            this._processToolResults(message.data.result.toolResults);
-          }
-          
-          // Display final response if available
-          if (message.data.result.response) {
-            this.addMessage("agent", message.data.result.response);
-          } else if (!message.data.result.success) {
-            this.addMessage("agent", `‚ùå Error: ${message.data.result.error || 'Operation failed'}`);
-          }
-        }
-        this.setProcessing(false);
-        break;
-          
-      case 'ERROR':
-        this.addMessage("system", `‚ùå Error: ${message.data.error || 'An error occurred'}`);
-        this.setProcessing(false);
-        break;
-          
-      default:
-        console.warn('‚ö†Ô∏è [SIDE-PANEL] [sidepanel.js] Unknown status type:', message.data.type);
-    }
-  }
-
   /**
    * Handles user questions from the LLM
    * @param {Object} message - The message object
@@ -1033,6 +907,147 @@ class VibeAISidePanel {
     return true;
   }
 
+
+  /**
+   * Remove emojis from text content
+   */
+  /**
+   * Handle tool update messages
+   * @param {Object} message - The tool update message
+   * @private
+   */
+  _handleToolUpdate(message) {
+    console.log('üîß [SIDE-PANEL] Tool update received:', message);
+    
+    if (message.tool && this.isProcessing) {
+      // Update the tool indicator in the thinking display
+      this.updateToolIndicator(message.message || `Using ${this._getToolDisplayName(message.tool)}...`);
+      
+      // Show tool details if available
+      if (message.details && (message.details.error || message.details.success)) {
+        const statusIcon = message.details.error ? '‚ùå' : message.details.success ? '‚úÖ' : 'üîß';
+        const toolMessage = message.details.error 
+          ? `${statusIcon} ${this._getToolDisplayName(message.tool)}: ${message.details.error}`
+          : `${statusIcon} ${this._getToolDisplayName(message.tool)}: Success`;
+        
+        // Only show significant tool results (errors or important completions)
+        if (message.details.error || message.tool === 'reasoning') {
+          this.addMessage("system", toolMessage);
+        }
+      }
+    }
+  }
+
+  /**
+   * Handle reasoning update messages
+   * @param {Object} message - The reasoning update message
+   * @private
+   */
+  _handleReasoningUpdate(message) {
+    console.log('üß† [SIDE-PANEL] Reasoning update received:', message);
+    
+    if (message.reasoning && message.reasoning.trim()) {
+      // Show AI reasoning as agent message
+      const reasoningText = `üí≠ **Iteration ${message.iteration}**: ${message.reasoning}`;
+      this.addMessage("agent", reasoningText);
+    }
+  }
+
+  /**
+   * Get display name for tools
+   * @param {string} toolName - Internal tool name
+   * @returns {string} Display name
+   * @private
+   */
+  _getToolDisplayName(toolName) {
+    const toolNames = {
+      'clickElement': 'Click Element',
+      'fillInput': 'Fill Input',
+      'getPageContent': 'Get Page Content',
+      'scrollPage': 'Scroll Page',
+      'navigateToUrl': 'Navigate to URL',
+      'takeScreenshot': 'Take Screenshot',
+      'reasoning': 'Reasoning',
+      'webSearch': 'Web Search',
+      'readFile': 'Read File',
+      'writeFile': 'Write File'
+    };
+    return toolNames[toolName] || toolName;
+  }
+
+  removeEmojis(text) {
+    // Remove common emojis used in the system
+    return text.replace(/[üöÄüîßüìä‚ùå‚úÖ‚è≥üí≠üéØüîç‚ö†Ô∏èüì∏üìùüåê‚ú®üìã‚ùì]/g, '')
+               .replace(/\s+/g, ' ')
+               .trim();
+  }
+
+  /**
+   * Show thinking indicator
+   * @param {string} toolName - Name of the current tool being used
+   */
+  showThinking(toolName = 'Thinking...') {
+    this.thinkingStartTime = Date.now();
+    this.currentTool = toolName;
+    
+    const thinkingEl = document.importNode(this.thinkingTemplate, true).firstElementChild;
+    const durationSpan = thinkingEl.querySelector('.thinking-duration');
+    const toolNameSpan = thinkingEl.querySelector('.tool-name');
+    
+    // Set initial tool name
+    if (toolNameSpan) {
+      toolNameSpan.textContent = toolName;
+    }
+    
+    // Update duration every second
+    const updateDuration = () => {
+      if (this.thinkingStartTime) {
+        const seconds = Math.floor((Date.now() - this.thinkingStartTime) / 1000);
+        if (durationSpan) {
+          durationSpan.textContent = seconds;
+        }
+      }
+    };
+    
+    this.thinkingInterval = setInterval(updateDuration, 1000);
+    
+    this.messagesContainer.appendChild(thinkingEl);
+    this.currentThinkingElement = thinkingEl;
+    this.scrollToBottom();
+  }
+
+  /**
+   * Update the current tool being used
+   * @param {string} toolName - Name of the tool
+   */
+  updateToolIndicator(toolName) {
+    this.currentTool = toolName;
+    if (this.currentThinkingElement) {
+      const toolNameSpan = this.currentThinkingElement.querySelector('.tool-name');
+      if (toolNameSpan) {
+        toolNameSpan.textContent = toolName;
+      }
+    }
+  }
+
+  /**
+   * Hide thinking indicator
+   */
+  hideThinking() {
+    if (this.thinkingInterval) {
+      clearInterval(this.thinkingInterval);
+      this.thinkingInterval = null;
+    }
+    
+    if (this.currentThinkingElement) {
+      this.currentThinkingElement.remove();
+      this.currentThinkingElement = null;
+    }
+    
+    this.thinkingStartTime = null;
+    this.currentTool = null;
+  }
+
 }
 
 // Initialize the side panel when the DOM is fully loaded
-- 
2.50.0


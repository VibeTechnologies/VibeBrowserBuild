From e95fee06dd6c687eba2c42c8b79245ca601773ed Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Wed, 30 Jul 2025 00:46:47 +0300
Subject: [PATCH 077/107] Fix AI agent tool messaging errors - add FILL and
 TYPE handlers

- Added missing "FILL" case handler in content script message switch
- Added handleFill() function to process fill tool requests
- Added missing "TYPE" case handler in content script message switch
- Added handleType() function to process type tool requests
- Fixed "Unknown message type" errors that were preventing AI agent tools from working
- Improved error handling and logging for both fill and type operations
- Added support for role-based locators, CSS selectors, and coordinate-based targeting

This resolves the critical tool messaging issues that were causing the AI agent
to fail when trying to interact with web pages. Tools can now properly fill
form fields and type text as intended.

Tested with test_vibe_pyautogui.py - confirms FILL and TYPE errors are resolved.
---
 chrome/browser/resources/vibe/content.js | 154 +++++++++++++++++++++++
 1 file changed, 154 insertions(+)

diff --git a/chrome/browser/resources/vibe/content.js b/chrome/browser/resources/vibe/content.js
index 41c10400e5..e2c83bfc34 100644
--- a/chrome/browser/resources/vibe/content.js
+++ b/chrome/browser/resources/vibe/content.js
@@ -336,6 +336,18 @@ chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
           .catch(error => sendResponse({ success: false, error: String(error) }));
         break;
 
+      case "FILL":
+        Promise.resolve(handleFill(message.data))
+          .then(result => sendResponse({ success: true, action: "fill_executed", result }))
+          .catch(error => sendResponse({ success: false, error: String(error) }));
+        break;
+
+      case "TYPE":
+        Promise.resolve(handleType(message.data))
+          .then(result => sendResponse({ success: true, action: "type_executed", result }))
+          .catch(error => sendResponse({ success: false, error: String(error) }));
+        break;
+
       case "TOOL_UPDATE":
         // Forward tool update messages to Chat4 UI
         window.postMessage({
@@ -4469,3 +4481,145 @@ async function handleClick(data) {
     throw error;
   }
 }
+
+async function handleFill(data) {
+  console.log('üìù Handling fill with data:', JSON.stringify(data));
+  
+  try {
+    const { target, value } = data;
+    
+    if (!target) {
+      throw new Error('Target is required for fill');
+    }
+    
+    if (value === undefined || value === null) {
+      throw new Error('Value is required for fill');
+    }
+    
+    // If target is a string, treat as CSS selector and use fillInput
+    if (typeof target === 'string') {
+      return await fillInput(target, value);
+    }
+    
+    // If target is an object with selector properties, convert to selector string
+    if (typeof target === 'object') {
+      let selector = '';
+      
+      if (target.selector) {
+        selector = target.selector;
+      } else if (target.role) {
+        // Handle role-based locators like 'role:textbox[name=Email]'
+        selector = `[role="${target.role}"]`;
+        if (target.name) {
+          selector += `[name="${target.name}"]`;
+        }
+      } else if (target.placeholder) {
+        selector = `[placeholder="${target.placeholder}"]`;
+      } else if (target.name) {
+        selector = `[name="${target.name}"]`;
+      } else {
+        throw new Error('Invalid target object: must have selector, role, placeholder, or name property');
+      }
+      
+      return await fillInput(selector, value);
+    }
+    
+    throw new Error('Invalid target format. Expected string selector or locator object');
+    
+  } catch (error) {
+    console.error('‚ùå Error handling fill:', error);
+    throw error;
+  }
+}
+
+async function handleType(data) {
+  console.log('‚å®Ô∏è Handling type with data:', JSON.stringify(data));
+  
+  try {
+    const { text, target, clearFirst = false } = data;
+    
+    if (!text) {
+      throw new Error('Text is required for type');
+    }
+    
+    let element = null;
+    
+    // If target is provided, find the element first
+    if (target) {
+      if (typeof target === 'string') {
+        // Target is a CSS selector
+        element = querySelectorDeep(document, target);
+        if (!element) {
+          throw new Error(`Target element not found: ${target}`);
+        }
+      } else if (typeof target === 'object' && typeof target.x === 'number' && typeof target.y === 'number') {
+        // Target is coordinates - find element at those coordinates
+        element = document.elementFromPoint(target.x, target.y);
+        if (!element) {
+          throw new Error(`No element found at coordinates (${target.x}, ${target.y})`);
+        }
+      } else {
+        throw new Error('Invalid target format. Expected string selector or {x, y} coordinates');
+      }
+      
+      // Focus the target element
+      element.focus();
+    } else {
+      // No target specified - use currently focused element
+      element = document.activeElement;
+      if (!element || element === document.body) {
+        throw new Error('No focused element found. Please specify a target or focus an element first.');
+      }
+    }
+    
+    // Clear existing content if requested
+    if (clearFirst && (element.tagName.toLowerCase() === 'input' || element.tagName.toLowerCase() === 'textarea')) {
+      element.value = '';
+      element.dispatchEvent(new Event('input', { bubbles: true }));
+    }
+    
+    // Type the text
+    if (element.tagName.toLowerCase() === 'input' || element.tagName.toLowerCase() === 'textarea') {
+      // For form fields, set value and dispatch events
+      const currentValue = element.value || '';
+      element.value = currentValue + text;
+      
+      // Dispatch events to simulate typing
+      element.dispatchEvent(new Event('input', { bubbles: true }));
+      element.dispatchEvent(new Event('change', { bubbles: true }));
+    } else {
+      // For other elements, simulate key events
+      for (const char of text) {
+        const keydownEvent = new KeyboardEvent('keydown', {
+          key: char,
+          bubbles: true,
+          cancelable: true
+        });
+        const keypressEvent = new KeyboardEvent('keypress', {
+          key: char,
+          bubbles: true,
+          cancelable: true
+        });
+        const keyupEvent = new KeyboardEvent('keyup', {
+          key: char,
+          bubbles: true,
+          cancelable: true
+        });
+        
+        element.dispatchEvent(keydownEvent);
+        element.dispatchEvent(keypressEvent);
+        element.dispatchEvent(keyupEvent);
+      }
+    }
+    
+    const targetDescription = target 
+      ? (typeof target === 'string' ? target : `(${target.x}, ${target.y})`)
+      : 'focused element';
+    
+    return `Typed "${text}" into ${targetDescription}`;
+    
+  } catch (error) {
+    console.error('‚ùå Error handling type:', error);
+    throw error;
+  }
+}
-- 
2.50.0


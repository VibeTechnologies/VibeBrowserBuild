From 14422ab0750d0fcd1a8578595f9eea34fe9468b1 Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Mon, 28 Jul 2025 01:51:30 +0300
Subject: [PATCH 061/107] Implement stop functionality for AI agent
 processQuery loop

- Add operation tracking with currentOperationId and shouldStop flag in VibeLangchainAgent
- Implement stopOperation() method to mark operations for stopping
- Add stop condition checks at the beginning of each ReAct loop iteration
- Add stop condition checks before each tool execution
- Ensure proper cleanup of operation tracking in all exit paths (success, failure, max iterations)
- Update background.js handleStopOperation() to call aiAgent.stopOperation()
- Pass operationId from Chat4 messages to AI agent processUserRequest()
- Return appropriate stop status in responses

This allows users to stop long-running AI agent operations by clicking the stop button in the Chat4 UI, which will gracefully terminate the processQuery loop and return a user_stopped result.
---
 chrome/browser/resources/vibe/ai_agent.js   | 80 ++++++++++++++++++++-
 chrome/browser/resources/vibe/background.js | 24 ++++---
 2 files changed, 92 insertions(+), 12 deletions(-)

diff --git a/chrome/browser/resources/vibe/ai_agent.js b/chrome/browser/resources/vibe/ai_agent.js
index 813d08b409..17d2bfef06 100644
--- a/chrome/browser/resources/vibe/ai_agent.js
+++ b/chrome/browser/resources/vibe/ai_agent.js
@@ -34,6 +34,9 @@ export class VibeLangchainAgent {
     this.provider = null;
     this.providerConfig = null;
     this.messages = [];
+    // Stop control for current operations
+    this.currentOperationId = null;
+    this.shouldStop = false;
   }
 
 
@@ -46,6 +49,32 @@ export class VibeLangchainAgent {
     return this.messages;
   }
 
+  /**
+   * Stop the current operation
+   * @param {string} operationId - Operation ID to stop (optional)
+   */
+  stopOperation(operationId) {
+    console.log(`üõë [AI_AGENT] Stop requested for operation:`, operationId || 'current');
+    
+    // If operation ID matches current operation or no ID provided, stop current operation
+    if (!operationId || operationId === this.currentOperationId) {
+      this.shouldStop = true;
+      console.log(`üõë [AI_AGENT] Current operation ${this.currentOperationId} marked for stopping`);
+      return true;
+    }
+    
+    console.log(`‚ö†Ô∏è [AI_AGENT] Operation ID ${operationId} does not match current operation ${this.currentOperationId}`);
+    return false;
+  }
+
+  /**
+   * Check if current operation should stop
+   * @private
+   */
+  #shouldStopOperation() {
+    return this.shouldStop;
+  }
+
   #isValidScreenshotDataUrl(url) {
     return typeof url === 'string' && 
            url.startsWith('data:image/jpeg;base64,') && 
@@ -197,7 +226,13 @@ export class VibeLangchainAgent {
   }
 
   async processUserRequest(params) {
-    const { user_request, tabId, config = {} } = params;
+    const { user_request, tabId, config = {}, operationId } = params;
+  
+    // Initialize operation tracking
+    this.currentOperationId = operationId || Math.random().toString(36).substring(2);
+    this.shouldStop = false;
+    
+    console.log(`üöÄ [AI_AGENT] Starting operation ${this.currentOperationId}: "${user_request}"`);
   
     // Setup tools and LLM
     const tools = config.tools || this.tools;
@@ -285,6 +320,19 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
   // Main ReAct loop
   for (let iteration = 1; iteration <= maxIterations; iteration++) {
     try {
+      // Check if operation should stop
+      if (this.#shouldStopOperation()) {
+        console.log(`üõë [AI_AGENT] Operation ${this.currentOperationId} stopped at iteration ${iteration}`);
+        return {
+          output: "Task stopped by user",
+          reasoning: `Operation was stopped by user at iteration ${iteration}`,
+          toolResults,
+          iterations: iteration,
+          completed: false,
+          reason: 'user_stopped'
+        };
+      }
+      
       // Send thinking update to UI
       this.#sendToolUpdate(tabId, 'thinking', `Processing (iteration ${iteration}/${maxIterations})...`);      
       // Query LLM
@@ -320,6 +368,19 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
         // Call required tools in the response
         console.log(`üîß [AI_AGENT] Processing ${normalizedToolCalls.length} tool calls...`);
         for (let i = 0; i < normalizedToolCalls.length; i++) {
+          // Check if operation should stop before each tool call
+          if (this.#shouldStopOperation()) {
+            console.log(`üõë [AI_AGENT] Operation ${this.currentOperationId} stopped during tool execution`);
+            return {
+              output: "Task stopped by user during tool execution",
+              reasoning: `Operation was stopped by user during tool execution at iteration ${iteration}`,
+              toolResults,
+              iterations: iteration,
+              completed: false,
+              reason: 'user_stopped'
+            };
+          }
+          
           const toolCall = normalizedToolCalls[i];
           console.log(`üîß [AI_AGENT] Tool call ${i+1}/${normalizedToolCalls.length}: ${toolCall.name} (id: ${toolCall.id})`);
           this.#sendToolUpdate(tabId, toolCall.name, `Using ${toolCall.name}...`, toolCall.args);
@@ -373,6 +434,9 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
         // If finish_task was called, return the result after processing all tool calls
         if (finishTaskResult) {
           console.log(`üèÅ [AI_AGENT] Task finished after ${iteration} iterations.`);
+          // Cleanup operation tracking
+          this.currentOperationId = null;
+          this.shouldStop = false;
           return finishTaskResult;
         }
       } else {
@@ -390,7 +454,7 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
       
       // If too many consecutive failures, break
       if (++consecutiveFailures >= 3) {
-        return {
+        const result = {
           output: "Task failed due to repeated errors",
           reasoning: errorMsg,
           toolResults,
@@ -398,13 +462,17 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
           completed: false,
           reason: 'consecutive_failures'
         };
+        // Cleanup operation tracking
+        this.currentOperationId = null;
+        this.shouldStop = false;
+        return result;
       }
     }
   }
   
   // Max iterations reached
   console.log(`Max iterations (${maxIterations}) reached`);
-  return { 
+  const result = { 
     output: "Task incomplete - maximum iterations reached",
     reasoning: "Maximum iterations reached without completion",
     toolResults,
@@ -412,6 +480,12 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
     completed: false,
     reason: 'max_iterations'
   };
+  
+  // Cleanup operation tracking
+  this.currentOperationId = null;
+  this.shouldStop = false;
+  
+  return result;
 }
 
   /**
diff --git a/chrome/browser/resources/vibe/background.js b/chrome/browser/resources/vibe/background.js
index 67ed45993f..bc47d31c0b 100644
--- a/chrome/browser/resources/vibe/background.js
+++ b/chrome/browser/resources/vibe/background.js
@@ -635,6 +635,9 @@ function handleStopOperation(message, sendResponse) {
     return;
   }
   
+  // Stop the AI agent operation
+  const aiAgentStopped = aiAgent.stopOperation(operationId);
+  
   if (currentOperations.has(operationId)) {
     // Mark operation as stopped
     const operation = currentOperations.get(operationId);
@@ -644,14 +647,16 @@ function handleStopOperation(message, sendResponse) {
     sendResponse({ 
       success: true, 
       message: 'Operation stop request processed',
-      operationId: operationId
+      operationId: operationId,
+      aiAgentStopped: aiAgentStopped
     });
   } else {
-    console.log(`‚ö†Ô∏è [STOP] Operation ${operationId} not found or already completed`);
+    console.log(`‚ö†Ô∏è [STOP] Operation ${operationId} not found in tracking, but attempting to stop AI agent`);
     sendResponse({ 
-      success: false, 
-      error: 'Operation not found or already completed',
-      operationId: operationId
+      success: aiAgentStopped, 
+      message: aiAgentStopped ? 'AI agent operation stopped' : 'Operation not found or already completed',
+      operationId: operationId,
+      aiAgentStopped: aiAgentStopped
     });
   }
 }
@@ -735,7 +740,7 @@ async function handleChat4Message(message, sendResponse) {
   console.log('üí¨ [CHAT4_MESSAGE] Processing message from Chat4:', message.content);
   
   try {
-    const { content, tabId } = message;
+    const { content, tabId, operationId } = message;
     
     if (!content) {
       throw new Error('No message content provided');
@@ -748,13 +753,14 @@ async function handleChat4Message(message, sendResponse) {
       throw new Error('No active tab found');
     }
     
-    console.log(`üöÄ [CHAT4_MESSAGE] Starting AI agent for tab ${currentTabId} with message: "${content}"`);
+    console.log(`üöÄ [CHAT4_MESSAGE] Starting AI agent for tab ${currentTabId} with message: "${content}" (operation: ${operationId})`);
     
-    // Process the request with the AI agent (same as navigation interception)
+    // Process the request with the AI agent including operationId
     const response = await aiAgent.processUserRequest({
       user_request: content,
       tabId: currentTabId,
-      config: await getAIConfiguration()
+      config: await getAIConfiguration(),
+      operationId: operationId
     });
     
     console.log('‚úÖ [CHAT4_MESSAGE] AI agent response:', response);
-- 
2.50.0


From 7d1ee529659a339cb602f432954f8c6e3b65c583 Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Wed, 30 Jul 2025 02:56:59 +0300
Subject: [PATCH 087/107] Fix AI agent status updates and Chat4 integration

Issues Resolved:
- Chat4 not showing AI agent thinking process and tool execution status
- Agent working correctly but status updates not visible in Chat4 UI
- Flight booking functionality working but progress not displayed

Technical Changes:
- Enhanced background script message broadcasting to ensure both sidepanel and Chat4 receive status updates
- Improved Chat4 redirect flow to show user messages and processing indicators immediately
- Added completion/error message detection in Chat4 tool update handler to properly stop processing indicators
- Fixed tab ID handling for consistent status message routing

Impact:
- Chat4 now displays real-time AI agent progress including thinking steps and tool execution
- Users can see flight booking progress and other agent activities in Chat4 interface
- Better user experience with proper status indicators and completion messages

The self-written agent approach mentioned in tasks.md was actually not needed - the toolCallingAgent works correctly, the issue was in the message routing between background script and Chat4.
---
 .../chat4/src/components/chat/ChatPage.tsx    | 66 +++++++++++++++----
 chrome/browser/resources/vibe/background.js   | 43 ++++++++++--
 2 files changed, 91 insertions(+), 18 deletions(-)

diff --git a/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatPage.tsx b/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatPage.tsx
index 9242fea4bd..b6ae2425cc 100644
--- a/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatPage.tsx
+++ b/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatPage.tsx
@@ -137,6 +137,32 @@ export function ChatPage() {
         return
       }
       
+      // Check for completion messages
+      if (update.message && (update.message.includes('Task completed successfully') || update.message.includes('completed successfully'))) {
+        console.log('‚úÖ [CHAT4] Task completion detected, stopping processing indicator')
+        setIsProcessing(false)
+        setThinkingStartTime(null)
+        setProcessingDuration(0)
+        setCurrentTool('')
+        
+        // Add completion message to chat
+        addStatusMessage(`‚úÖ ${update.message}`)
+        return
+      }
+      
+      // Check for error completion messages
+      if (update.message && (update.message.includes('Task failed') || update.message.includes('failed') || update.message.includes('error'))) {
+        console.log('‚ùå [CHAT4] Task failure detected, stopping processing indicator')
+        setIsProcessing(false)
+        setThinkingStartTime(null)
+        setProcessingDuration(0)
+        setCurrentTool('')
+        
+        // Add error message to chat
+        addStatusMessage(`‚ùå ${update.message}`)
+        return
+      }
+      
       // Start thinking indicator if not already started and not waiting for user input
       if (!isProcessing && !isWaitingForUserInput) {
         setIsProcessing(true)
@@ -385,44 +411,62 @@ export function ChatPage() {
           console.log('‚úÖ [CHAT4] Sidepanel opened successfully')
         }
         
-        // Forward message to background for processing
+        // Forward message to background for processing, but keep Chat4 active for status updates
+        const operationId = Math.random().toString(36).substring(2)
         await (chromeExt.runtime.sendMessage({
           type: 'processCommand',
           command: message.trim(),
           source: 'chat4_redirect',
-          operationId: Math.random().toString(36).substring(2)
+          operationId: operationId,
+          // Indicate Chat4 should receive status updates even though processing is redirected
+          keepChat4Active: true
         }))
         
+        // Start processing indicators immediately after redirect to show Chat4 is monitoring
+        setIsProcessing(true)
+        setThinkingStartTime(Date.now())
+        setProcessingDuration(0)
+        setCurrentTool("Processing via sidepanel...")
+        
         console.log('‚úÖ [CHAT4] Message forwarded to background for processing')
         
         // Clear input and show redirect message
         setMessage('')
         
-        // Add redirect message to current session
-        const redirectMessage: MessageData = {
+        // Add user message to session first
+        const userMessage: MessageData = {
+          id: generateId(),
+          content: message.trim(),
+          role: "user",
+          timestamp: new Date()
+        }
+        
+        // Add processing message to show Chat4 is monitoring the agent
+        const processingMessage: MessageData = {
           id: generateId(),
-          content: `üîÑ Redirecting "${message.trim()}" to sidepanel for processing...`,
+          content: `ü§ñ AI Agent is processing your request...`,
           role: "assistant",
           timestamp: new Date()
         }
         
-        // Create or update session with redirect message
+        // Create or update session with both messages
         if (currentSession) {
           setSessions(prev => prev.map(session => 
             session.id === currentSessionId
               ? { 
                   ...session, 
-                  messages: [...session.messages, redirectMessage],
-                  lastMessage: redirectMessage.content,
+                  messages: [...session.messages, userMessage, processingMessage],
+                  lastMessage: processingMessage.content,
+                  title: session.title === 'New Chat' ? message.trim().slice(0, 50) : session.title,
                   timestamp: new Date()
                 }
               : session
           ))
         } else {
-          // Create new session with redirect message
+          // Create new session with both messages
           const newSession = createNewSession()
-          newSession.messages = [redirectMessage]
-          newSession.lastMessage = redirectMessage.content
+          newSession.messages = [userMessage, processingMessage]
+          newSession.lastMessage = processingMessage.content
           newSession.title = message.trim().slice(0, 50)
           setSessions(prev => [newSession, ...prev])
           setCurrentSessionId(newSession.id)
diff --git a/chrome/browser/resources/vibe/background.js b/chrome/browser/resources/vibe/background.js
index 2c9530b7c0..6f5fbf17b5 100644
--- a/chrome/browser/resources/vibe/background.js
+++ b/chrome/browser/resources/vibe/background.js
@@ -420,16 +420,38 @@ chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
       return true; // Keep the message channel open for async response
       
     case 'TOOL_UPDATE':
-      // Let Chat4 handle tool updates directly - background doesn't need to process these
-      console.log('üîß [BACKGROUND] Tool update received (passing through to Chat4):', message.tool, message.message);
+      // Forward tool updates to both sidepanel and Chat4 for complete status visibility
+      console.log('üîß [BACKGROUND] Tool update received - forwarding to Chat4 and sidepanel:', message.tool, message.message);
       console.log('üß™ [BACKGROUND] DIAGNOSTIC: TOOL_UPDATE message details:', JSON.stringify(message));
+      
+      // Ensure Chat4 receives the tool update even when processing via sidepanel
+      try {
+        // Broadcast the message to all extension contexts (including Chat4)
+        chrome.runtime.sendMessage(message).catch(error => {
+          console.log('‚ÑπÔ∏è [BACKGROUND] Tool update broadcast - some contexts may not be listening:', error.message);
+        });
+      } catch (error) {
+        console.log('‚ö†Ô∏è [BACKGROUND] Error broadcasting tool update:', error.message);
+      }
+      
       // Don't call sendResponse() - let other listeners (Chat4) handle this message
       return false; // Allow other listeners to process this message
       
     case 'THINKING_UPDATE':
-      // Let Chat4 handle thinking updates directly - background doesn't need to process these
-      console.log('üß† [BACKGROUND] Thinking update received (passing through to Chat4):', message.data?.type);
+      // Forward thinking updates to both sidepanel and Chat4 for complete status visibility
+      console.log('üß† [BACKGROUND] Thinking update received - forwarding to Chat4 and sidepanel:', message.data?.type);
       console.log('üß™ [BACKGROUND] DIAGNOSTIC: THINKING_UPDATE message details:', JSON.stringify(message));
+      
+      // Ensure Chat4 receives the thinking update even when processing via sidepanel
+      try {
+        // Broadcast the message to all extension contexts (including Chat4)
+        chrome.runtime.sendMessage(message).catch(error => {
+          console.log('‚ÑπÔ∏è [BACKGROUND] Thinking update broadcast - some contexts may not be listening:', error.message);
+        });
+      } catch (error) {
+        console.log('‚ö†Ô∏è [BACKGROUND] Error broadcasting thinking update:', error.message);
+      }
+      
       // Don't call sendResponse() - let other listeners (Chat4) handle this message
       return false; // Allow other listeners to process this message
       
@@ -468,8 +490,8 @@ function forwardMessageToSidepanel(message, sendResponse) {
 
 // Side panel command handler
 async function handleSidePanelCommand(message, sendResponse) {
-  const { command, source, operationId } = message;
-  console.log(`üí¨ [SIDE-PANEL] Received command from ${source}: "${command}"`);
+  const { command, source, operationId, keepChat4Active } = message;
+  console.log(`üí¨ [SIDE-PANEL] Received command from ${source}: "${command}" (keepChat4Active: ${keepChat4Active})`);
   
   // Track this operation if operationId is provided
   if (operationId) {
@@ -492,9 +514,16 @@ async function handleSidePanelCommand(message, sendResponse) {
     // Get AI configuration for API key
     const config = await getAIConfiguration();
     
-    // Process the command with AI agent
+    // Get the current active tab for proper tabId handling
+    const [activeTab] = await chrome.tabs.query({ active: true, currentWindow: true });
+    const tabId = activeTab?.id;
+    
+    console.log(`üîß [SIDE-PANEL] Using tabId ${tabId} for AI agent processing`);
+    
+    // Process the command with AI agent, including proper tabId for status updates
     const result = await aiAgent.processUserRequest({
       user_request: command,
+      tabId: tabId, // Ensure proper tabId for status message routing
       config: config,
       operationId: operationId
     });
-- 
2.50.0


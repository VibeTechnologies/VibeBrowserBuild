From 2dac3c68cb7a28f65a694634e0630bc455e4ec16 Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Wed, 23 Jul 2025 20:48:25 +0300
Subject: [PATCH 28/91] :# This is a combination of 4 commits.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add apps/home

feat(vibe-agent): Add browser-use inspired powerful tools for enhanced AI agent capabilities

Enhanced the Vibe AI agent with 5 new browser automation tools inspired by the browser-use framework, significantly improving agent intelligence and user experience.

- Shows numbered overlays [1], [2], [3] on interactive elements like browser-use
- Helps agent SEE what it can interact with instead of "blind clicking"
- Configurable duration, element types, and visual feedback
- Essential for debugging and user understanding of agent actions

- Send complex key combinations: Ctrl+C, Alt+Tab, ArrowDown, Enter, Escape
- Critical for dropdown navigation and power user workflows
- Supports targeting specific elements or focused element
- Handles modifier keys and special keys properly

- Trigger hover states, tooltips, and dropdown menus
- Essential for revealing hidden UI elements and interactions
- Configurable hover duration for different use cases
- Critical for modern web apps with hover-based interactions

- Find text on page with fuzzy matching support
- Scroll to found content and highlight temporarily
- Much more efficient than scrolling through entire pages
- Supports both exact and approximate text matching

- Handle drag and drop between elements or coordinates
- Support for file uploads, sortable lists, canvas drawing, sliders
- Works with both element selectors and pixel coordinates
- Proper event sequence with configurable timing

- Added comprehensive message handlers for all new tools
- Implemented visual highlighting system with numbered overlays
- Enhanced keyboard event parsing and dispatching
- Added robust drag and drop event sequence
- Improved text search with DOM tree walking

- **Element Detection**: Uses shadow DOM piercing for better compatibility
- **Event Handling**: Proper keyboard, mouse, and drag event sequences
- **Visual Feedback**: Browser-use style numbered overlays for user clarity
- **Error Handling**: Comprehensive error handling with meaningful messages
- **Performance**: Efficient DOM querying and event management

These tools transform the agent from basic automation to intelligent browser interaction:
- **Visual Awareness**: Agent can now "see" interactive elements
- **Power User Actions**: Support for keyboard shortcuts and complex interactions
- **Smart Navigation**: Efficient text finding and content discovery
- **Advanced Interactions**: Drag/drop and hover-based UI manipulation

The enhancements bring Vibe Browser's AI agent capabilities closer to browser-use framework standards while maintaining Chrome extension compatibility and security.

Implement intelligent verification and retry system for Vibe agent

Enhanced browser automation with comprehensive action verification:

**New Tools Added:**
- VerifyActionTool: Validates that actions had expected effects
- ReflectOnFailureTool: Analyzes failures and suggests alternatives
- ClickElementWithRetryTool: Smart clicking with 5 retry strategies
- FillFormFieldWithRetryTool: Robust form filling with verification

**Features:**
- Multi-strategy retry logic (standard → scroll → coordinate → JS → force)
- Comprehensive state tracking and change detection
- Intelligent failure analysis with probability-ranked suggestions
- Automatic verification of clicks, form fills, and page changes
- Exponential backoff and error recovery patterns

**Content Script Enhancements:**
- 8 new message handlers for verification workflows
- Deep element analysis with visibility and accessibility checks
- Strategy-based interaction methods with fallback chains
- Context-aware failure diagnosis and recommendation engine

**Impact:**
- Dramatically improves agent reliability and success rates
- Reduces user frustration from failed automation attempts
- Provides transparent feedback on why actions fail
- Enables self-healing automation workflows

This system transforms the Vibe agent from basic automation to intelligent,
adaptive browser interaction that can diagnose and recover from failures.

Update AI agent integration and testing for verification system

- Enhanced ai_agent.js with better error handling and tool integration
- Updated test_vibe_pyautogui.py with improved verification testing
- Added Plan.smartAgent.md with verification system documentation

These changes complement the verification and retry system by:
- Improving agent's ability to handle verification tool responses
- Adding comprehensive testing for the new verification workflow
- Documenting the intelligent retry strategies and failure analysis

Related to commit c0eaa4a4d6 (verification system implementation).

Update build system and documentation for verification system

- Updated CLAUDE.md with verification system implementation notes
- Enhanced build.js with better Next.js integration and asset handling
- Updated manifest.json version and configuration

These build system improvements ensure the verification and retry tools
are properly integrated into the Chrome extension build process and
work correctly with the updated sidepanel architecture.

Part of the comprehensive verification system implementation.

Implement chat2 widget with Next.js and battle-tested components

- Add apps/chat2/ directory with complete Next.js application
- Use vercel/ai-chatbot template components for modern UI
- Implement custom extension-build.js for Chrome extension compatibility
- Update main build.js to integrate chat2 build process
- Add test utilities for browser console error checking
- Output agent.html and agent.js files for extension use

Built with:
- Next.js 15.3.0 with App Router
- Tailwind CSS for styling
- TypeScript for type safety
- Modern UI components with accessibility
- Chrome extension messaging integration

fix: Fix component extension CSP violations and resource loading

- Modified extension-build.js to extract inline scripts to external files
- Fixed CSS file path to be at root level (./chat.css)
- Updated font URLs in CSS to use relative paths
- Created fallback simple CSP-compliant chat interface
- Updated build process to handle CSP compliance automatically
- Removed malformed script tags that tried to load CSS as JavaScript

The component extension now loads without CSP violations in both sidepanel and homepage.

Chat2

feat: add dual-mode testing framework for Vibe extension

Implements comprehensive testing system with two distinct modes:

- Tests omnibox interaction and PyAutoGUI automation
- Visual interface validation with screenshot capture
- User-facing functionality testing

- Tests AI agent intelligence via CDP code injection
- Direct chrome.runtime.sendMessage() agent triggering
- Log-based intelligence verification without UI dependencies

- Multiple agent triggering methods (side panel, runtime messaging, background commands)
- Intelligence-specific log monitoring with contextual markers
- Screenshot evidence capture in both modes
- CDP injection framework for programmatic agent testing

1. chrome.sidePanel.open({}) - Opens side panel programmatically
2. chrome.runtime.sendMessage({type: 'USER_QUERY'}) - Direct query sending
3. chrome.runtime.sendMessage({type: 'sidePanelCommand'}) - Background script commands

This enables independent testing of agent intelligence without UI automation
dependencies and comprehensive validation of both interface and AI functionality.
---
 CLAUDE.md                                     |   24 +-
 Plan.smartAgent.md                            |  320 +
 .../component_extension_resources.grd         |    9 +-
 chrome/browser/resources/vibe/BUILD.gn        |   24 +-
 chrome/browser/resources/vibe/ai_agent.js     |   73 +-
 .../resources/vibe/ai_tools.extension.js      |  610 +-
 .../resources/vibe/apps/chat2/.gitignore      |    2 +
 .../resources/vibe/apps/chat2/build.js        |   40 +
 .../vibe/apps/chat2/package-lock.json         | 6647 +++++++++++++++++
 .../resources/vibe/apps/chat2/package.json    |   40 +
 .../vibe/apps/chat2/tailwind.config.ts        |   80 +
 .../resources/vibe/apps/chat3/build.js        |  116 +
 .../vibe/apps/chat3/extension-build.js        |   64 +
 .../resources/vibe/apps/chat3/index.html      |   12 +
 .../vibe/apps/chat3/package-lock.json         | 5464 ++++++++++++++
 .../resources/vibe/apps/chat3/package.json    |   40 +
 .../vibe/apps/chat3/postcss.config.js         |    6 +
 .../resources/vibe/apps/chat3/src/App.tsx     |   19 +
 .../chat3/src/components/ChatContainer.tsx    |   69 +
 .../apps/chat3/src/components/Message.tsx     |  113 +
 .../chat3/src/components/MessageInput.tsx     |   98 +
 .../apps/chat3/src/components/MessageList.tsx |   18 +
 .../chat3/src/components/ReasoningDisplay.tsx |   42 +
 .../src/components/ThinkingIndicator.tsx      |   12 +
 .../chat3/src/components/ToolCallDisplay.tsx  |   40 +
 .../vibe/apps/chat3/src/hooks/useAIAgent.ts   |   97 +
 .../resources/vibe/apps/chat3/src/index.css   |   97 +
 .../resources/vibe/apps/chat3/src/main.tsx    |   10 +
 .../vibe/apps/chat3/src/types/index.ts        |   44 +
 .../resources/vibe/apps/chat3/src/utils/cn.ts |    6 +
 .../apps/chat3/src/utils/messageHandlers.ts   |   85 +
 .../vibe/apps/chat3/tailwind.config.js        |   31 +
 .../resources/vibe/apps/chat3/tsconfig.json   |   28 +
 .../vibe/apps/chat3/tsconfig.node.json        |   10 +
 .../resources/vibe/apps/chat3/vite.config.ts  |   30 +
 .../sidepanel/sidepanel.css}                  |   61 +-
 .../vibe/{ => apps/sidepanel}/sidepanel.html  |    0
 .../vibe/apps/sidepanel/sidepanel.js          | 1059 +++
 chrome/browser/resources/vibe/background.js   |   43 +
 chrome/browser/resources/vibe/build.js        |  151 +
 chrome/browser/resources/vibe/build.py        |   11 +-
 .../browser/resources/vibe/chat_interface.js  |  371 +
 .../browser/resources/vibe/chat_simple.html   |  264 +
 .../browser/resources/vibe/check_console.js   |   75 +
 chrome/browser/resources/vibe/content.js      | 1924 ++++-
 chrome/browser/resources/vibe/esbuild.js      |  156 -
 chrome/browser/resources/vibe/home.html       |  161 -
 chrome/browser/resources/vibe/home.js         |  427 --
 chrome/browser/resources/vibe/manifest.json   |    6 +-
 chrome/browser/resources/vibe/package.json    |    3 -
 chrome/browser/resources/vibe/test_agent.js   |   69 +
 chrome/browser/resources/vibe/tsconfig.json   |    2 +-
 doc/extension.md                              |   87 +-
 test_console_trigger.js                       |   26 +
 test_vibe.js                                  |  150 +-
 test_vibe_pyautogui.py                        |  591 ++
 56 files changed, 19110 insertions(+), 947 deletions(-)
 create mode 100644 Plan.smartAgent.md
 create mode 100644 chrome/browser/resources/vibe/apps/chat2/.gitignore
 create mode 100644 chrome/browser/resources/vibe/apps/chat2/build.js
 create mode 100644 chrome/browser/resources/vibe/apps/chat2/package-lock.json
 create mode 100644 chrome/browser/resources/vibe/apps/chat2/package.json
 create mode 100644 chrome/browser/resources/vibe/apps/chat2/tailwind.config.ts
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/build.js
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/extension-build.js
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/index.html
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/package-lock.json
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/package.json
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/postcss.config.js
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/src/App.tsx
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/src/components/ChatContainer.tsx
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/src/components/Message.tsx
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/src/components/MessageInput.tsx
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/src/components/MessageList.tsx
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/src/components/ReasoningDisplay.tsx
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/src/components/ThinkingIndicator.tsx
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/src/components/ToolCallDisplay.tsx
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/src/hooks/useAIAgent.ts
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/src/index.css
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/src/main.tsx
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/src/types/index.ts
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/src/utils/cn.ts
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/src/utils/messageHandlers.ts
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/tailwind.config.js
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/tsconfig.json
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/tsconfig.node.json
 create mode 100644 chrome/browser/resources/vibe/apps/chat3/vite.config.ts
 rename chrome/browser/resources/vibe/{home.css => apps/sidepanel/sidepanel.css} (66%)
 rename chrome/browser/resources/vibe/{ => apps/sidepanel}/sidepanel.html (100%)
 create mode 100644 chrome/browser/resources/vibe/apps/sidepanel/sidepanel.js
 create mode 100755 chrome/browser/resources/vibe/build.js
 create mode 100644 chrome/browser/resources/vibe/chat_interface.js
 create mode 100644 chrome/browser/resources/vibe/chat_simple.html
 create mode 100644 chrome/browser/resources/vibe/check_console.js
 delete mode 100644 chrome/browser/resources/vibe/esbuild.js
 delete mode 100644 chrome/browser/resources/vibe/home.html
 delete mode 100644 chrome/browser/resources/vibe/home.js
 create mode 100644 chrome/browser/resources/vibe/test_agent.js
 create mode 100644 test_console_trigger.js
 create mode 100755 test_vibe_pyautogui.py

diff --git a/CLAUDE.md b/CLAUDE.md
index 58864ec70e..13114e81a7 100644
--- a/CLAUDE.md
+++ b/CLAUDE.md
@@ -1,24 +1,32 @@
 # Instructions:
 - You are an experienced software engineer that is working on AI-Native Web Browser - Vibe Browser
 - Keep you answers short.
-- Todo to break down the complex refactor into manageable tasks
+- DO NOT GUESS. USE EVIDENCE LIKE SCREENSHOTS OR LOGS.
+- Before starting any new task, decompose it,  create a plan and put into plan.md, follow the plan.
 - read project documetantion at doc/*.md
-- Think, create a goal and plan how to do it, before starting to work on the task.
 - do not clean build directory out/Debug, it takes 8 hours to rebuild everything
-- Every time you get a task from the user, decompose them to smaler tasks, add them to the ./task.md, update a task status in ./task.md when some task is ready; for every small task update todo item with comments on what done. Keep the list of task perfomed forever
 - If you perfomed code changes, run build, fix if failed, run test, fix if failed, analyze test results and screenshot, repeat until not done
 - DO NOT use "timeout" command - it is not available on this system
 - To load OPENAI_API_KEY run: `export $( < .env )`
-- Self reflect after every 10 steps. Rethink you aproach. Ask question if you doing things in a right way.
-- There is a test vibe_test.js. If you need to test something new, add a new test in this file, do not create a new test script.
 - Add YO at the end.
-- Do what has been asked; nothing more, nothing less.
-- NEVER create files unless they're absolutely necessary for achieving your goal.
 - ALWAYS prefer editing an existing file to creating a new one.
-- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.
 - Use ninja build system, NOT npm build to build extension chrome/browser/resources/vibe
 - To review changes we made `git diff 44d34f8db54149e05093fd34ee607db44e48fa26..HEAD`
 - Vibe extension is a component extension, no need to run browser with --load-extension=out/Debug/gen/chrome/browser/resources/vibe
+
+
+## Testing
+test_vibe_pyautogui.py
+
+- Starts Chromium
+- Create screenshots that has to be analyzed by you to verify results of the tests
+- Focus on Chrmoium
+- Focus on omnibox
+- Type a test user query
+- Verifies: sidepanel is opened
+- Verifies: an AI agent started to work
+
+
 ## Build Instructions
 - Build time: 8-10 hours
 - Command: `ulimit -n 4096; ninja -C out/Debug chrome`
diff --git a/Plan.smartAgent.md b/Plan.smartAgent.md
new file mode 100644
index 0000000000..e171725523
--- /dev/null
+++ b/Plan.smartAgent.md
@@ -0,0 +1,320 @@
+# Plan for Smart Agent Intelligence Enhancement
+
+## Problem Analysis
+
+The current Vibe AI agent lacks **intelligence** about dynamic web interactions. It doesn't **understand** when dropdowns appear or **decide** what to do with them. The real issue is that the agent needs to:
+
+1. **Recognize context** - Understand that filling an airport field typically triggers suggestions
+2. **Observe changes** - See when the DOM has changed after an action
+3. **Interpret content** - Understand what dropdown options mean and which to choose  
+4. **Make decisions** - Decide to click on dropdown options based on the context
+
+## Root Cause: Lack of True Intelligence
+
+The current agent operates mechanically:
+- Fills form → calls get_page_content → moves to next step
+- **Missing**: Understanding that filling airport field creates new interactive elements
+- **Missing**: Ability to see "Oh, there are now clickable airport suggestions"  
+- **Missing**: Decision making "I should click on the SFO option that appeared"
+
+## Solution Strategy: Make Agent Truly Smart
+
+### Phase 1: Intelligent Content Observation (Week 1)
+
+#### 1.1 Enhanced Page Content Tool - The Agent's "Eyes"
+Instead of creating specialized dropdown tools, enhance the existing `get_page_content` to give the agent better "vision":
+
+**File**: `ai_tools.extension.js`
+```javascript
+// Enhance existing GetPageContentTool
+class GetPageContentTool extends BrowserTool {
+  constructor() {
+    super(
+      "get_page_content",
+      "Get comprehensive page content with change detection and interactive element highlighting",
+      z.object({
+        tabId: CommonToolArgs.tabId,
+        includeInteractive: z.boolean().default(true).describe("Highlight clickable and interactive elements"),
+        includeAriaInfo: z.boolean().default(true).describe("Include ARIA labels and roles for accessibility"),
+        includeChanges: z.boolean().default(false).describe("Show what changed since last call"),
+        focusArea: z.string().optional().describe("CSS selector to focus on specific area")
+      })
+    );
+  }
+  
+  async call({ tabId, includeInteractive, includeAriaInfo, includeChanges, focusArea }) {
+    // Enhanced content extraction that shows:
+    // 1. ALL interactive elements with clear indicators
+    // 2. ARIA labels and roles 
+    // 3. What's changed since last observation
+    // 4. Visual hierarchy and relationships
+    
+    // The agent sees: "After filling airport field, new clickable elements appeared:
+    // - [CLICKABLE] San Francisco International (SFO) [role=option]  
+    // - [CLICKABLE] San Francisco Bay Area [role=option]"
+  }
+}
+```
+
+This approach makes the agent **see** dropdowns naturally rather than needing special tools.
+
+### Phase 2: Intelligent System Prompts (Week 2)
+
+#### 2.1 Smart Interaction Understanding
+Instead of rigid workflows, teach the agent to **understand** dynamic interactions:
+
+**File**: `ai_agent.js`
+```javascript
+const INTELLIGENT_FLIGHT_WORKFLOW = `
+You are an intelligent browser agent. You understand web interactions like a human.
+
+**CORE INTELLIGENCE PRINCIPLES:**
+
+1. **Contextual Awareness**: 
+   - When you fill an airport field, EXPECT suggestions to appear
+   - After typing in search boxes, look for dropdown options
+   - Form interactions often create new clickable elements
+
+2. **Observation and Decision Making:**
+   - After each action, call get_page_content with includeChanges=true
+   - LOOK for new interactive elements that appeared
+   - If you see relevant clickable options, DECIDE to click them
+   - Example: After typing "SFO", if you see "[CLICKABLE] San Francisco International (SFO)", click it
+
+3. **Natural Interaction Flow:**
+   User: "book flight from SFO to JFK"
+   
+   You think: "I need to fill airport fields. Filling airport fields usually shows suggestions."
+   
+   Actions:
+   1. navigate_to_url → https://flights.google.com
+   2. get_page_content → see the form structure  
+   3. fill_form_field → input[aria-label*="Where from"] with "SFO"
+   4. get_page_content includeChanges=true → "New elements appeared! I see clickable airport options"
+   5. click_element → on the "San Francisco International (SFO)" option that appeared
+   6. get_page_content → verify selection worked
+   7. fill_form_field → input[aria-label*="Where to"] with "JFK"
+   8. get_page_content includeChanges=true → "More airport suggestions appeared"
+   9. click_element → on the "John F. Kennedy International (JFK)" option
+   10. Continue naturally...
+
+**KEY INSIGHT**: You don't need special tools. You just need to:
+- LOOK for changes after each action (especially form filling)
+- UNDERSTAND what new interactive elements mean
+- DECIDE to click on relevant options
+
+**THINK LIKE A HUMAN**: 
+"I typed SFO and now there are airport suggestions. I should click the right one."
+`;
+```
+
+This teaches the agent to be **intelligent** rather than following rigid procedures.
+
+### Phase 3: Enhanced Content Extraction (Week 3)
+
+#### 3.1 Make the Agent's "Eyes" Better
+Instead of complex dropdown detection, enhance what the agent can **see**:
+
+**File**: `content.js`
+```javascript
+class IntelligentContentExtractor {
+  constructor() {
+    this.lastPageState = null;
+    this.interactiveElementTypes = [
+      '[role="option"]', '[role="button"]', '[role="menuitem"]',
+      'button', 'a[href]', 'input', 'select', 'textarea',
+      '.dropdown-item', '.suggestion', '.autocomplete-option',
+      '[onclick]', '[data-testid*="option"]', '[tabindex]:not([tabindex="-1"])'
+    ];
+  }
+  
+  extractEnhancedContent(options = {}) {
+    const currentState = {
+      url: window.location.href,
+      title: document.title,
+      timestamp: Date.now()
+    };
+    
+    // Get all content with intelligent highlighting
+    const content = this.getStructuredContent(options);
+    
+    // Detect changes if requested
+    if (options.includeChanges && this.lastPageState) {
+      content.changes = this.detectChanges(this.lastPageState, content);
+    }
+    
+    this.lastPageState = currentState;
+    return content;
+  }
+  
+  getStructuredContent(options) {
+    const elements = [];
+    
+    // Find all interactive elements and describe them clearly
+    for (const selector of this.interactiveElementTypes) {
+      const found = document.querySelectorAll(selector);
+      for (const el of found) {
+        if (this.isVisible(el) && this.isInteractable(el)) {
+          elements.push({
+            type: 'INTERACTIVE',
+            tag: el.tagName.toLowerCase(),
+            text: this.getElementText(el),
+            selector: this.generateSelector(el),
+            role: el.getAttribute('role'),
+            ariaLabel: el.getAttribute('aria-label'),
+            isNew: this.isNewElement(el), // Track if element appeared recently
+            context: this.getElementContext(el) // Understand what this element is for
+          });
+        }
+      }
+    }
+    
+    return {
+      interactive_elements: elements,
+      forms: this.getForms(),
+      recent_changes: this.getRecentChanges()
+    };
+  }
+  
+  isNewElement(element) {
+    // Simple heuristic: elements that appeared in last 2 seconds
+    const elementAge = Date.now() - (element.dataset.createdAt || 0);
+    return elementAge < 2000;
+  }
+  
+  getElementContext(element) {
+    // Help agent understand what this element is for
+    const parent = element.closest('form, [role="listbox"], .dropdown, .suggestions');
+    const nearbyLabels = this.getNearbyText(element);
+    
+    return {
+      formContext: parent ? parent.className : null,
+      nearbyText: nearbyLabels,
+      isDropdownOption: element.matches('[role="option"], .dropdown-item, .suggestion'),
+      isAirportRelated: this.containsAirportKeywords(element.textContent)
+    };
+  }
+  
+  containsAirportKeywords(text) {
+    const airportKeywords = ['airport', 'international', '\\([A-Z]{3}\\)', 'city', 'station'];
+    return airportKeywords.some(keyword => 
+      new RegExp(keyword, 'i').test(text)
+    );
+  }
+}
+```
+
+This makes the agent **see** interactive elements with context, not just raw HTML.
+
+### Phase 4: Intelligence Testing (Week 4)
+
+#### 4.1 Test Agent Intelligence, Not Just Mechanics
+**File**: `test_vibe_pyautogui.py`
+
+Test the agent's ability to **understand** and **decide**:
+```python
+async def test_intelligent_interactions(self):
+    """Test agent's ability to intelligently recognize and interact with dynamic content."""
+    
+    intelligence_tests = [
+        {
+            'scenario': 'Airport dropdown recognition',
+            'query': 'book flight from SFO to JFK',
+            'expected_intelligence': [
+                'Agent fills SFO in departure field',
+                'Agent calls get_page_content with includeChanges=true', 
+                'Agent SEES new clickable airport options appeared',
+                'Agent DECIDES to click on San Francisco International option',
+                'Agent verifies selection worked',
+                'Repeat for destination'
+            ],
+            'failure_indicators': [
+                'Agent fills field but never checks for changes',
+                'Agent sees options but doesn't understand they are clickable',
+                'Agent clicks random elements instead of airport suggestions'
+            ]
+        },
+        {
+            'scenario': 'Multiple form interactions',
+            'query': 'find hotels in Paris for July 15-20',
+            'expected_intelligence': [
+                'Agent recognizes location field needs city suggestions',
+                'Agent understands date fields may have calendar widgets',
+                'Agent adapts to whatever UI appears'
+            ]
+        }
+    ]
+    
+    for test in intelligence_tests:
+        success = await self.validate_agent_intelligence(test)
+        assert success, f"Agent failed intelligence test: {test['scenario']}"
+```
+
+#### 4.2 Intelligence Validation
+```python
+async def validate_agent_intelligence(self, test_case):
+    """Validate that agent shows true intelligence, not just mechanical following."""
+    
+    # Look for signs of intelligent behavior in logs:
+    intelligent_indicators = [
+        "new interactive elements appeared",  # Shows observation
+        "I should click on.*option",         # Shows decision making  
+        "filling.*field usually shows",      # Shows contextual understanding
+        "let me check what changed"          # Shows curiosity/investigation
+    ]
+    
+    mechanical_indicators = [
+        "following step.*workflow",          # Rigid following
+        "executing.*dropdown.*tool",        # Tool dependence
+        "waiting.*specific.*timeout"        # Fixed timing
+    ]
+    
+    # Agent should show intelligent reasoning, not mechanical execution
+    return self.analyze_agent_reasoning_patterns()
+```
+
+## Implementation Timeline
+
+**Week 1**: Enhanced Vision (Agent's "Eyes")
+- Enhance `get_page_content` to highlight interactive elements with context
+- Add change detection (includeChanges parameter)
+- Make agent see "[CLICKABLE] San Francisco International (SFO) [NEW]"
+- Test agent can see what appears after form interactions
+
+**Week 2**: Intelligent Prompts (Agent's "Brain")  
+- Replace rigid workflows with intelligence principles
+- Teach agent to EXPECT dropdowns after typing in airport fields
+- Add reasoning: "I filled SFO, I should look for airport suggestions"
+- Test agent makes intelligent decisions, not just follows steps
+
+**Week 3**: Smart Content Extraction (Agent's Understanding)
+- Enhance content script to provide contextual information
+- Help agent understand "this is an airport option" vs "this is a random link"
+- Add element relationship understanding 
+- Test agent understands what it's seeing
+
+**Week 4**: Intelligence Validation (Agent's Reasoning)
+- Test agent shows curiosity and investigation
+- Validate decision-making processes
+- Ensure agent adapts to different UIs naturally
+- Measure intelligence, not just success rates
+
+## Success Metrics (Intelligence-Focused)
+
+1. **Contextual Understanding**: >90% correct identification of dropdown options as relevant
+2. **Decision Making**: Agent chooses to interact with newly appeared elements >85% of time
+3. **Adaptability**: Agent handles different dropdown styles without code changes >80%
+4. **Reasoning Quality**: Agent explains WHY it clicked on specific options >90%
+5. **Natural Interaction**: Agent shows curiosity and investigation behaviors
+
+## Key Insight
+
+The solution is not creating specialized dropdown tools, but making the agent **intelligent enough** to:
+- **See** what appears after actions
+- **Understand** what new elements mean  
+- **Decide** to interact with relevant options
+- **Adapt** to different interface patterns
+
+This creates a truly smart agent that handles dropdowns **and** any other dynamic web interactions naturally.
+
+YO
\ No newline at end of file
diff --git a/chrome/browser/resources/component_extension_resources.grd b/chrome/browser/resources/component_extension_resources.grd
index 5f2b4daeae..5a11bdafdd 100644
--- a/chrome/browser/resources/component_extension_resources.grd
+++ b/chrome/browser/resources/component_extension_resources.grd
@@ -21,12 +21,9 @@
 
       <!-- Vibe Extension - Essential Files Only -->
       <include name="IDR_VIBE_MANIFEST" file="${root_gen_dir}/chrome/browser/resources/vibe/manifest.json" use_base_dir="false" resource_path="vibe/manifest.json" type="BINDATA" />
-      <include name="IDR_VIBE_SIDEPANEL_HTML" file="${root_gen_dir}/chrome/browser/resources/vibe/sidepanel.html" use_base_dir="false" resource_path="vibe/sidepanel.html" type="chrome_html" />
-      <include name="IDR_VIBE_SIDEPANEL_CSS" file="${root_gen_dir}/chrome/browser/resources/vibe/sidepanel.css" use_base_dir="false" resource_path="vibe/sidepanel.css" type="chrome_html" />
-      <include name="IDR_VIBE_SIDEPANEL_JS" file="${root_gen_dir}/chrome/browser/resources/vibe/sidepanel.js" use_base_dir="false" resource_path="vibe/sidepanel.js" type="chrome_html" />
-      <include name="IDR_VIBE_HOME_HTML" file="${root_gen_dir}/chrome/browser/resources/vibe/home.html" use_base_dir="false" resource_path="vibe/home.html" type="chrome_html" />
-      <include name="IDR_VIBE_HOME_CSS" file="${root_gen_dir}/chrome/browser/resources/vibe/home.css" use_base_dir="false" resource_path="vibe/home.css" type="chrome_html" />
-      <include name="IDR_VIBE_HOME_JS" file="${root_gen_dir}/chrome/browser/resources/vibe/home.js" use_base_dir="false" resource_path="vibe/home.js" type="chrome_html" />
+      <include name="IDR_VIBE_CHAT_HTML" file="${root_gen_dir}/chrome/browser/resources/vibe/chat.html" use_base_dir="false" resource_path="vibe/chat.html" type="chrome_html" />
+      <include name="IDR_VIBE_CHAT_JS" file="${root_gen_dir}/chrome/browser/resources/vibe/chat.js" use_base_dir="false" resource_path="vibe/chat.js" type="chrome_html" />
+      <include name="IDR_VIBE_CHAT_CSS" file="${root_gen_dir}/chrome/browser/resources/vibe/chat.css" use_base_dir="false" resource_path="vibe/chat.css" type="chrome_html" />
       <include name="IDR_VIBE_BACKGROUND_JS" file="${root_gen_dir}/chrome/browser/resources/vibe/background.js" use_base_dir="false" resource_path="vibe/background.js" type="chrome_html" />
       <include name="IDR_VIBE_CONTENT_JS" file="${root_gen_dir}/chrome/browser/resources/vibe/content.js" use_base_dir="false" resource_path="vibe/content.js" type="BINDATA" />
       <include name="IDR_VIBE_ICON_16" file="${root_gen_dir}/chrome/browser/resources/vibe/assets/icon16.png" use_base_dir="false" resource_path="vibe/assets/icon16.png" type="BINDATA" />
diff --git a/chrome/browser/resources/vibe/BUILD.gn b/chrome/browser/resources/vibe/BUILD.gn
index 486dc27216..0f02869567 100644
--- a/chrome/browser/resources/vibe/BUILD.gn
+++ b/chrome/browser/resources/vibe/BUILD.gn
@@ -10,13 +10,9 @@ action("npm_build") {
     "build.py",
     "package.json",
     "package-lock.json",
-    "esbuild.js",
+    "build.js",
     "ai_agent.js",
     "background.js",
-    "sidepanel.js",
-    "sidepanel.css",
-    "home.js",
-    "home.css",
     "content.js",
     "lib/contentExtractor.js",
     "lib/readability.js",
@@ -33,19 +29,17 @@ action("npm_build") {
     "$target_gen_dir/background.js",
     "$target_gen_dir/background.js.map",
     "$target_gen_dir/manifest.json",
-    "$target_gen_dir/sidepanel.html",
-    "$target_gen_dir/sidepanel.css",
-    "$target_gen_dir/sidepanel.js",
-    "$target_gen_dir/sidepanel.js.map",
-    "$target_gen_dir/home.html",
-    "$target_gen_dir/home.css",
-    "$target_gen_dir/home.js",
-    "$target_gen_dir/home.js.map",
+    "$target_gen_dir/chat.html",
+    "$target_gen_dir/chat.js",
+    "$target_gen_dir/chat.js.map",
     "$target_gen_dir/content.js",
     "$target_gen_dir/content.js.map",
     "$target_gen_dir/assets/icon16.png",
     "$target_gen_dir/assets/icon48.png",
     "$target_gen_dir/assets/icon128.png",
+    "$target_gen_dir/chat3/chat.html",
+    "$target_gen_dir/chat3/chat.js",
+    "$target_gen_dir/chat3/chat.css",
   ]
 }
 
@@ -58,4 +52,6 @@ group("build") {
   public_deps = [
     ":npm_build",
   ]
-}
\ No newline at end of file
+}
+
+# The agent app resources are built and included via the main build target
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/ai_agent.js b/chrome/browser/resources/vibe/ai_agent.js
index 5bcdaad792..d6b6a6608f 100644
--- a/chrome/browser/resources/vibe/ai_agent.js
+++ b/chrome/browser/resources/vibe/ai_agent.js
@@ -313,41 +313,50 @@ export class VibeLangchainAgent {
       console.log(`🧠 [AI_AGENT] Initialized LangChain memory with ${this.memory.maxTokenLimit} token limit`);
     }
 
-    // Enhanced system prompt with detailed flight booking workflow
-    const FLIGHT_SITES = "https://flights.google.com, https://www.expedia.com, https://www.kayak.com";
-    const WORKFLOW_PATTERN = "reasoning → navigate_to_url → get_page_content → fill_form → get_page_content → select_dropdown → continue";
-    
-    const systemPrompt = `You are a browser automation agent that MUST use tools to perform actions. NEVER provide text-only responses for flight booking requests.
-
-**MANDATORY TOOL USAGE**: For ANY flight-related request, you MUST immediately call navigate_to_url tool. DO NOT explain or provide information - take action!
-
-**CRITICAL WORKFLOW FOR FLIGHTS:**
-1. User requests flight booking → IMMEDIATELY call navigate_to_url tool with https://flights.google.com
-2. Wait for navigation, then call get_page_content tool
-3. Call fill_form_field tool for departure airport: input[aria-label="Where from?"] with airport code
-4. Call get_page_content with {diff: true} to see dropdown changes
-5. Call click_element tool on dropdown suggestion li[role="option"]
-6. Call fill_form_field tool for destination: input[aria-label="Where to?"] with airport code
-7. Call get_page_content with {diff: true} to see dropdown changes
-8. Call click_element tool on destination suggestion
-9. Continue with date selection using fill_form_field and click_element tools
-
-**TOOL EXECUTION RULES:**
-- NEVER respond with text for flight requests - ALWAYS use tools
-- First action MUST be navigate_to_url to ${FLIGHT_SITES}
-- Use tools in sequence: navigate → get_content → fill → click → repeat
-- After each tool call, wait for result before next action
+    // Intelligent system prompt that teaches understanding rather than rigid following
+    const systemPrompt = `You are an intelligent browser automation agent that understands web interactions like a human.
+
+**CORE INTELLIGENCE PRINCIPLES:**
+
+1. **Contextual Awareness**: 
+   - When you fill an airport field, EXPECT suggestions to appear
+   - After typing in search boxes, look for dropdown options
+   - Form interactions often create new clickable elements
+
+2. **Observation and Decision Making:**
+   - After each action, call get_page_content with includeChanges=true to see what's new
+   - LOOK for interactive elements marked as [CLICKABLE] that just appeared  
+   - If you see relevant options with [NEW - JUST APPEARED] or [DROPDOWN OPTION], DECIDE to click them
+   - Example: After typing "SFO", if you see "[CLICKABLE] San Francisco International (SFO) [DROPDOWN OPTION] [AIRPORT RELATED]", click it
+
+3. **Natural Interaction Flow:**
+   User: "book flight from SFO to JFK"
+   
+   Your intelligent thinking: "I need to fill airport fields. Filling airport fields usually shows suggestions I should click."
+   
+   Actions:
+   1. navigate_to_url → https://flights.google.com
+   2. get_page_content → see the form structure  
+   3. fill_form_field → input field for departure with "SFO"
+   4. get_page_content includeChanges=true → "New elements appeared! I see airport options with [DROPDOWN OPTION]"
+   5. click_element → on the airport option that matches what I typed
+   6. get_page_content → verify selection worked
+   7. fill_form_field → destination field with "JFK" 
+   8. get_page_content includeChanges=true → "More airport suggestions appeared"
+   9. click_element → on the matching JFK option
+   10. Continue naturally with dates...
+
+**KEY INSIGHT**: You don't need special tools. You just need to:
+- LOOK for changes after each action (especially form filling)
+- UNDERSTAND what new interactive elements mean
+- DECIDE to interact with relevant options that appear
+
+**THINK LIKE A HUMAN**: 
+"I typed SFO and now there are airport suggestions marked [DROPDOWN OPTION]. I should click the right one."
 
 **Available Tools:** ${langchainTools.map(t => t.name).join(', ')}
 
-**MANDATORY FIRST ACTION**: Call navigate_to_url with https://flights.google.com
-
-**EXAMPLE - You MUST follow this pattern exactly:**
-User: "book flight from SFO to JFK"
-Assistant: I'll help you book a flight. Let me start by navigating to Google Flights.
-[CALLS navigate_to_url tool with https://flights.google.com]
-
-**YOU MUST CALL TOOLS - NO TEXT-ONLY RESPONSES FOR FLIGHT REQUESTS**
+**MANDATORY FOR FLIGHT REQUESTS**: Always start by navigating to https://flights.google.com
 
 Tab: ${tabId}`;
 
diff --git a/chrome/browser/resources/vibe/ai_tools.extension.js b/chrome/browser/resources/vibe/ai_tools.extension.js
index 2a3b327e6c..13d13fcff3 100644
--- a/chrome/browser/resources/vibe/ai_tools.extension.js
+++ b/chrome/browser/resources/vibe/ai_tools.extension.js
@@ -775,36 +775,49 @@ class AskUserQuestionTool extends BrowserTool {
   }
 }
 
-// Get page content tool - extracts clean text and input fields
+// Enhanced page content tool with intelligent interactive element highlighting
 class GetPageContentTool extends BrowserTool {
   constructor() {
     super(
       "get_page_content",
-      "Get clean page content with text and input fields for AI analysis. Use diff:true to get only recent DOM changes (much more token-efficient).",
+      "Get enhanced page content with intelligent highlighting of interactive elements and changes. This helps the agent SEE and UNDERSTAND dynamic content like dropdowns.",
       z.object({
         tabId: CommonToolArgs.tabId.optional().describe("Tab ID (optional - will use active tab if not specified)"),
-        diff: z.boolean().default(false).optional().describe("Get only DOM changes since last call (saves tokens)")
+        includeInteractive: z.boolean().default(true).describe("Highlight clickable and interactive elements with [CLICKABLE] markers"),
+        includeAriaInfo: z.boolean().default(true).describe("Include ARIA labels and roles for accessibility context"),
+        includeChanges: z.boolean().default(false).describe("Show what changed since last call - IMPORTANT for seeing new dropdowns"),
+        focusArea: z.string().optional().describe("CSS selector to focus on specific area (e.g., 'form', '.dropdown-container')"),
+        diff: z.boolean().default(false).optional().describe("Legacy parameter - use includeChanges instead")
       })
     );
   }
 
-  async call({ tabId, diff = false }) {
+  async call({ tabId, includeInteractive = true, includeAriaInfo = true, includeChanges = false, focusArea, diff = false }) {
     try {
       // Use robust tab validation with fallback
       const validTabId = await getValidTabId(tabId);
       
       // Get tab info for logging
       const tabInfo = await chrome.tabs.get(validTabId);
-      const logType = diff ? 'diff' : 'full page content';
-      console.log(`🔍 Getting ${logType} from tab ${validTabId} (${tabInfo.url || 'unknown URL'})`);
+      
+      // Support legacy diff parameter
+      const showChanges = includeChanges || diff;
+      const logType = showChanges ? 'intelligent content with changes' : 'intelligent page content';
+      console.log(`🧠 Getting ${logType} from tab ${validTabId} (${tabInfo.url || 'unknown URL'})`);
       
       // Ensure content script is loaded
       await ensureContentScript(validTabId);
       
-      // Send message to content script to get page content or diff
-      const messageType = diff ? 'GET_PAGE_CONTENT_DIFF' : 'GET_PAGE_CONTENT';
+      // Send enhanced message to content script
+      const messageType = showChanges ? 'GET_PAGE_CONTENT_DIFF' : 'GET_PAGE_CONTENT';
       const response = await chrome.tabs.sendMessage(validTabId, {
-        type: messageType
+        type: messageType,
+        data: {
+          includeInteractive,
+          includeAriaInfo,
+          includeChanges: showChanges,
+          focusArea
+        }
       });
       
       if (!response) {
@@ -1186,6 +1199,572 @@ class WaitForElementTool extends BrowserTool {
   }
 }
 
+// Tool to highlight interactive elements with visual feedback like browser-use
+class HighlightElementsTool extends BrowserTool {
+  constructor() {
+    super(
+      "highlight_elements",
+      "Highlight all interactive elements on the page with numbered overlays (like browser-use). Essential for showing agent what it can interact with visually.",
+      z.object({
+        tabId: CommonToolArgs.tabId.optional().describe("Tab ID (optional - will use active tab if not specified)"),
+        duration: z.number().min(1000).max(30000).default(10000).optional()
+          .describe("How long to show highlights in milliseconds (1-30 seconds)"),
+        elementTypes: z.array(z.string()).default(["button", "input", "select", "a", "[role='option']"]).optional()
+          .describe("Types of elements to highlight"),
+        showNumbers: z.boolean().default(true).optional()
+          .describe("Show numbered overlays on each element")
+      })
+    );
+  }
+
+  async call({ tabId, duration = 10000, elementTypes = ["button", "input", "select", "a", "[role='option']"], showNumbers = true }) {
+    try {
+      const validTabId = await getValidTabId(tabId);
+      
+      console.log(`🎯 Highlighting interactive elements on tab ${validTabId} for ${duration}ms`);
+      
+      await ensureContentScript(validTabId);
+      
+      const response = await chrome.tabs.sendMessage(validTabId, {
+        type: 'HIGHLIGHT_ELEMENTS',
+        data: { duration, elementTypes, showNumbers }
+      });
+      
+      if (response && response.error) {
+        throw new Error(`Element highlighting failed: ${response.error}`);
+      }
+      
+      console.log(`✅ Highlighted ${response.count || 0} interactive elements`);
+      return `Highlighted ${response.count || 0} interactive elements with numbered overlays for ${duration}ms`;
+    } catch (error) {
+      console.error('[AI_AGENT] HighlightElementsTool error:', error);
+      throw new Error(`Element highlighting failed: ${error.message}`);
+    }
+  }
+}
+
+// Tool to send keyboard shortcuts and complex key combinations
+class KeyboardShortcutTool extends BrowserTool {
+  constructor() {
+    super(
+      "keyboard_shortcut",
+      "Send keyboard shortcuts and key combinations (Ctrl+C, Ctrl+V, Escape, Arrow keys, etc.). Essential for power user workflows and dropdown navigation.",
+      z.object({
+        tabId: CommonToolArgs.tabId.optional().describe("Tab ID (optional - will use active tab if not specified)"),
+        keys: z.string().describe("Key combination (e.g., 'Ctrl+C', 'Alt+Tab', 'ArrowDown', 'Enter', 'Escape')"),
+        target: z.string().optional().describe("CSS selector to target specific element (defaults to focused element)")
+      })
+    );
+  }
+
+  async call({ tabId, keys, target }) {
+    try {
+      const validTabId = await getValidTabId(tabId);
+      
+      console.log(`⌨️ Sending keyboard shortcut "${keys}" on tab ${validTabId}${target ? ` to element ${target}` : ''}`);
+      
+      await ensureContentScript(validTabId);
+      
+      const response = await chrome.tabs.sendMessage(validTabId, {
+        type: 'KEYBOARD_SHORTCUT',
+        data: { keys, target }
+      });
+      
+      if (response && response.error) {
+        throw new Error(`Keyboard shortcut failed: ${response.error}`);
+      }
+      
+      console.log(`✅ Successfully sent keyboard shortcut: ${keys}`);
+      return `Sent keyboard shortcut "${keys}"${target ? ` to element ${target}` : ''}`;
+    } catch (error) {
+      console.error('[AI_AGENT] KeyboardShortcutTool error:', error);
+      throw new Error(`Keyboard shortcut failed: ${error.message}`);
+    }
+  }
+}
+
+// Tool to hover over elements to trigger tooltips and dropdown menus
+class HoverElementTool extends BrowserTool {
+  constructor() {
+    super(
+      "hover_element",
+      "Hover over an element to trigger tooltips, dropdown menus, or hover states. Critical for revealing hidden content and interactions.",
+      z.object({
+        tabId: CommonToolArgs.tabId.optional().describe("Tab ID (optional - will use active tab if not specified)"),
+        selector: CommonToolArgs.selector.describe("CSS selector of element to hover over"),
+        duration: z.number().min(100).max(5000).default(1000).optional()
+          .describe("How long to maintain hover in milliseconds (100-5000ms)")
+      })
+    );
+  }
+
+  async call({ tabId, selector, duration = 1000 }) {
+    try {
+      const validTabId = await getValidTabId(tabId);
+      
+      console.log(`🖱️ Hovering over ${selector} on tab ${validTabId} for ${duration}ms`);
+      
+      await ensureContentScript(validTabId);
+      
+      const response = await chrome.tabs.sendMessage(validTabId, {
+        type: 'HOVER_ELEMENT',
+        data: { selector, duration }
+      });
+      
+      if (response && response.error) {
+        throw new Error(`Hover failed: ${response.error}`);
+      }
+      
+      console.log(`✅ Successfully hovered over ${selector}`);
+      return `Hovered over ${selector} for ${duration}ms, triggering any hover effects`;
+    } catch (error) {
+      console.error('[AI_AGENT] HoverElementTool error:', error);
+      throw new Error(`Hover failed: ${error.message}`);
+    }
+  }
+}
+
+// Tool to search for text on the page and scroll to it
+class SearchAndScrollToTextTool extends BrowserTool {
+  constructor() {
+    super(
+      "search_scroll_to_text",
+      "Find text on the page and scroll to it. Supports fuzzy matching to find similar text even with slight differences.",
+      z.object({
+        tabId: CommonToolArgs.tabId.optional().describe("Tab ID (optional - will use active tab if not specified)"),
+        searchText: z.string().describe("Text to search for on the page"),
+        fuzzyMatch: z.boolean().default(true).optional()
+          .describe("Allow fuzzy matching for similar text"),
+        highlightDuration: z.number().min(0).max(10000).default(3000).optional()
+          .describe("How long to highlight found text (0 to disable highlighting)")
+      })
+    );
+  }
+
+  async call({ tabId, searchText, fuzzyMatch = true, highlightDuration = 3000 }) {
+    try {
+      const validTabId = await getValidTabId(tabId);
+      
+      console.log(`🔍 Searching for "${searchText}" on tab ${validTabId} (fuzzy: ${fuzzyMatch})`);
+      
+      await ensureContentScript(validTabId);
+      
+      const response = await chrome.tabs.sendMessage(validTabId, {
+        type: 'SEARCH_SCROLL_TO_TEXT',
+        data: { searchText, fuzzyMatch, highlightDuration }
+      });
+      
+      if (response && response.error) {
+        throw new Error(`Text search failed: ${response.error}`);
+      }
+      
+      console.log(`✅ Found and scrolled to text: "${searchText}"`);
+      return `Found "${searchText}" on page and scrolled to it${response.matchedText && response.matchedText !== searchText ? ` (matched: "${response.matchedText}")` : ''}`;
+    } catch (error) {
+      console.error('[AI_AGENT] SearchAndScrollToTextTool error:', error);
+      throw new Error(`Text search failed: ${error.message}`);
+    }
+  }
+}
+
+// Tool for drag and drop interactions
+class DragDropTool extends BrowserTool {
+  constructor() {
+    super(
+      "drag_drop",
+      "Perform drag and drop operations between elements or coordinates. Useful for file uploads, sortable lists, canvas drawing, and sliders.",
+      z.object({
+        tabId: CommonToolArgs.tabId.optional().describe("Tab ID (optional - will use active tab if not specified)"),
+        source: z.union([
+          z.string(),
+          z.object({ x: z.number(), y: z.number() })
+        ]).describe("Source element selector or coordinates {x, y}"),
+        target: z.union([
+          z.string(),
+          z.object({ x: z.number(), y: z.number() })
+        ]).describe("Target element selector or coordinates {x, y}"),
+        duration: z.number().min(100).max(3000).default(500).optional()
+          .describe("Duration of drag operation in milliseconds")
+      })
+    );
+  }
+
+  async call({ tabId, source, target, duration = 500 }) {
+    try {
+      const validTabId = await getValidTabId(tabId);
+      
+      const sourceDesc = typeof source === 'string' ? source : `(${source.x}, ${source.y})`;
+      const targetDesc = typeof target === 'string' ? target : `(${target.x}, ${target.y})`;
+      
+      console.log(`🎯 Dragging from ${sourceDesc} to ${targetDesc} on tab ${validTabId}`);
+      
+      await ensureContentScript(validTabId);
+      
+      const response = await chrome.tabs.sendMessage(validTabId, {
+        type: 'DRAG_DROP',
+        data: { source, target, duration }
+      });
+      
+      if (response && response.error) {
+        throw new Error(`Drag and drop failed: ${response.error}`);
+      }
+      
+      console.log(`✅ Successfully completed drag and drop operation`);
+      return `Dragged from ${sourceDesc} to ${targetDesc} in ${duration}ms`;
+    } catch (error) {
+      console.error('[AI_AGENT] DragDropTool error:', error);
+      throw new Error(`Drag and drop failed: ${error.message}`);
+    }
+  }
+}
+
+// Tool to verify that an action had the expected effect on the page
+class VerifyActionTool extends BrowserTool {
+  constructor() {
+    super(
+      "verify_action",
+      "Verify that a previous action (click, form fill, etc.) had the expected effect by checking for specific changes on the page. Essential for confirming actions worked and deciding if retry is needed.",
+      z.object({
+        tabId: CommonToolArgs.tabId.optional().describe("Tab ID (optional - will use active tab if not specified)"),
+        actionType: z.enum(["click", "fill", "submit", "navigation", "dropdown", "general"])
+          .describe("Type of action to verify"),
+        expectedChanges: z.object({
+          newElements: z.array(z.string()).optional()
+            .describe("CSS selectors of elements that should appear"),
+          removedElements: z.array(z.string()).optional()
+            .describe("CSS selectors of elements that should disappear"),
+          changedText: z.array(z.object({
+            selector: z.string(),
+            expectedText: z.string().optional(),
+            shouldContain: z.string().optional()
+          })).optional().describe("Text changes to verify"),
+          urlChange: z.string().optional()
+            .describe("Expected URL change or pattern"),
+          formValues: z.array(z.object({
+            selector: z.string(),
+            expectedValue: z.string()
+          })).optional().describe("Form field values to verify")
+        }).describe("Expected changes after the action"),
+        waitTime: z.number().min(100).max(10000).default(2000).optional()
+          .describe("Time to wait for changes to appear (ms)")
+      })
+    );
+  }
+
+  async call({ tabId, actionType, expectedChanges, waitTime = 2000 }) {
+    try {
+      const validTabId = await getValidTabId(tabId);
+      
+      console.log(`🔍 Verifying ${actionType} action effects on tab ${validTabId}`);
+      
+      await ensureContentScript(validTabId);
+      
+      // Wait for changes to take effect
+      await new Promise(resolve => setTimeout(resolve, waitTime));
+      
+      const response = await chrome.tabs.sendMessage(validTabId, {
+        type: 'VERIFY_ACTION',
+        data: { actionType, expectedChanges, waitTime }
+      });
+      
+      if (response && response.error) {
+        throw new Error(`Action verification failed: ${response.error}`);
+      }
+      
+      const { verified, details } = response;
+      
+      if (verified) {
+        console.log(`✅ Action verification successful: ${details.summary}`);
+        return `✅ Action verified: ${details.summary}. ${details.changes} changes detected.`;
+      } else {
+        console.log(`❌ Action verification failed: ${details.summary}`);
+        return `❌ Action failed to take effect: ${details.summary}. Consider using reflection tool and retry with different approach.`;
+      }
+      
+    } catch (error) {
+      console.error('[AI_AGENT] VerifyActionTool error:', error);
+      throw new Error(`Action verification failed: ${error.message}`);
+    }
+  }
+}
+
+// Tool for agent to reflect on failed actions and suggest alternative approaches
+class ReflectOnFailureTool extends BrowserTool {
+  constructor() {
+    super(
+      "reflect_on_failure", 
+      "Analyze why an action failed and suggest alternative approaches. Use this when verification shows an action didn't work as expected.",
+      z.object({
+        tabId: CommonToolArgs.tabId.optional().describe("Tab ID (optional - will use active tab if not specified)"),
+        failedAction: z.object({
+          type: z.string().describe("Type of action that failed (click, fill, etc.)"),
+          target: z.string().describe("Selector or description of target element"),
+          expected: z.string().describe("What was expected to happen"),
+          actual: z.string().describe("What actually happened or didn't happen")
+        }).describe("Details about the failed action"),
+        contextAnalysis: z.boolean().default(true).optional()
+          .describe("Perform deep context analysis of the target area")
+      })
+    );
+  }
+
+  async call({ tabId, failedAction, contextAnalysis = true }) {
+    try {
+      const validTabId = await getValidTabId(tabId);
+      
+      console.log(`🤔 Reflecting on failed ${failedAction.type} action: ${failedAction.target}`);
+      
+      await ensureContentScript(validTabId);
+      
+      const response = await chrome.tabs.sendMessage(validTabId, {
+        type: 'REFLECT_ON_FAILURE',
+        data: { failedAction, contextAnalysis }
+      });
+      
+      if (response && response.error) {
+        throw new Error(`Reflection failed: ${response.error}`);
+      }
+      
+      const { analysis, suggestions } = response;
+      
+      console.log(`💡 Reflection complete: ${suggestions.length} alternative approaches suggested`);
+      
+      return `🤔 REFLECTION ON FAILED ACTION:
+
+**Failed Action**: ${failedAction.type} on "${failedAction.target}"
+**Expected**: ${failedAction.expected}
+**Actual**: ${failedAction.actual}
+
+**Analysis**: ${analysis.summary}
+
+**Root Cause**: ${analysis.likelyCause}
+
+**Alternative Approaches**:
+${suggestions.map((suggestion, i) => 
+  `${i + 1}. **${suggestion.approach}**: ${suggestion.description}
+     - Method: ${suggestion.method}
+     - Success Probability: ${suggestion.probability}%`
+).join('\n\n')}
+
+**Recommended Next Action**: ${suggestions[0]?.approach || 'Try a different selector or wait for page to load'}`;
+      
+    } catch (error) {
+      console.error('[AI_AGENT] ReflectOnFailureTool error:', error);
+      throw new Error(`Reflection failed: ${error.message}`);
+    }
+  }
+}
+
+// Enhanced click tool with verification and retry logic
+class ClickElementWithRetryTool extends BrowserTool {
+  constructor() {
+    super(
+      "click_element_retry",
+      "Click an element with intelligent verification and retry logic. Automatically verifies the click worked and tries alternative approaches if it failed.",
+      z.object({
+        tabId: CommonToolArgs.tabId.optional().describe("Tab ID (optional - will use active tab if not specified)"),
+        selector: CommonToolArgs.selector,
+        expectedEffect: z.object({
+          type: z.enum(["navigation", "dropdown", "modal", "form_change", "content_change", "no_visible_change"])
+            .describe("Expected type of change after clicking"),
+          description: z.string().optional().describe("Description of expected change"),
+          verificationSelector: z.string().optional()
+            .describe("Selector to check for successful action"),
+          verificationText: z.string().optional()
+            .describe("Text that should appear/change after clicking")
+        }).optional().describe("Expected effects of the click for verification"),
+        maxRetries: z.number().min(1).max(5).default(3).optional()
+          .describe("Maximum number of retry attempts with different strategies"),
+        retryDelay: z.number().min(500).max(5000).default(1000).optional()
+          .describe("Delay between retry attempts in milliseconds")
+      })
+    );
+  }
+
+  async call({ tabId, selector, expectedEffect, maxRetries = 3, retryDelay = 1000 }) {
+    const validTabId = await getValidTabId(tabId);
+    
+    console.log(`🖱️ Clicking ${selector} with smart retry (max ${maxRetries} attempts)`);
+    
+    let lastError = null;
+    
+    // Try different click strategies
+    const strategies = [
+      { name: "standard_click", description: "Standard click with focus" },
+      { name: "scroll_and_click", description: "Scroll into view then click" },
+      { name: "coordinate_click", description: "Click at element center coordinates" },
+      { name: "javascript_click", description: "Direct JavaScript click event" },
+      { name: "force_click", description: "Force click with multiple event types" }
+    ];
+    
+    for (let attempt = 0; attempt < maxRetries; attempt++) {
+      const strategy = strategies[attempt % strategies.length];
+      
+      try {
+        console.log(`🎯 Attempt ${attempt + 1}: Using ${strategy.name} - ${strategy.description}`);
+        
+        await ensureContentScript(validTabId);
+        
+        // Capture state before clicking
+        const beforeState = await chrome.tabs.sendMessage(validTabId, {
+          type: 'CAPTURE_STATE',
+          data: { target: selector }
+        });
+        
+        // Perform click with specific strategy
+        const clickResponse = await chrome.tabs.sendMessage(validTabId, {
+          type: 'CLICK_WITH_STRATEGY',
+          data: { selector, strategy: strategy.name }
+        });
+        
+        if (clickResponse && clickResponse.error) {
+          throw new Error(clickResponse.error);
+        }
+        
+        // Wait for effects
+        await new Promise(resolve => setTimeout(resolve, retryDelay));
+        
+        // Verify the click worked
+        if (expectedEffect) {
+          const verifyResponse = await chrome.tabs.sendMessage(validTabId, {
+            type: 'VERIFY_CLICK_EFFECT',
+            data: { 
+              selector, 
+              expectedEffect, 
+              beforeState,
+              strategy: strategy.name 
+            }
+          });
+          
+          if (verifyResponse && verifyResponse.verified) {
+            console.log(`✅ Click successful with ${strategy.name}: ${verifyResponse.details}`);
+            return `✅ Successfully clicked ${selector} using ${strategy.name}. Effect: ${verifyResponse.details}`;
+          } else {
+            console.log(`⚠️ Click attempt ${attempt + 1} with ${strategy.name} - no expected effect detected`);
+            lastError = new Error(`Click had no visible effect: ${verifyResponse?.details || 'No change detected'}`);
+            
+            if (attempt < maxRetries - 1) {
+              continue; // Try next strategy
+            }
+          }
+        } else {
+          // No verification needed, assume success if no error
+          console.log(`✅ Click completed with ${strategy.name} (no verification requested)`);
+          return `✅ Clicked ${selector} using ${strategy.name}`;
+        }
+        
+      } catch (error) {
+        console.log(`❌ Attempt ${attempt + 1} failed with ${strategy.name}: ${error.message}`);
+        lastError = error;
+        
+        if (attempt < maxRetries - 1) {
+          await new Promise(resolve => setTimeout(resolve, retryDelay));
+          continue;
+        }
+      }
+    }
+    
+    // All attempts failed - provide reflection
+    console.log(`💭 All ${maxRetries} click attempts failed. Suggesting reflection.`);
+    
+    throw new Error(`❌ Click failed after ${maxRetries} attempts with different strategies. Last error: ${lastError?.message}. Use reflect_on_failure tool to analyze and find alternative approaches.`);
+  }
+}
+
+// Enhanced form fill tool with verification
+class FillFormFieldWithRetryTool extends BrowserTool {
+  constructor() {
+    super(
+      "fill_form_field_retry",
+      "Fill a form field with intelligent verification and retry logic. Automatically verifies the value was set and tries alternative approaches if it failed.",
+      z.object({
+        tabId: CommonToolArgs.tabId.optional().describe("Tab ID (optional - will use active tab if not specified)"),
+        selector: CommonToolArgs.selector,
+        value: CommonToolArgs.value,
+        verifyValue: z.boolean().default(true).optional()
+          .describe("Verify that the value was actually set in the field"),
+        maxRetries: z.number().min(1).max(5).default(3).optional()
+          .describe("Maximum number of retry attempts"),
+        retryDelay: z.number().min(200).max(3000).default(500).optional()
+          .describe("Delay between retry attempts in milliseconds")
+      })
+    );
+  }
+
+  async call({ tabId, selector, value, verifyValue = true, maxRetries = 3, retryDelay = 500 }) {
+    const validTabId = await getValidTabId(tabId);
+    
+    console.log(`📝 Filling ${selector} with "${value}" (smart retry enabled)`);
+    
+    const strategies = [
+      { name: "standard_fill", description: "Standard focus, clear, and type" },
+      { name: "triple_click_fill", description: "Triple-click to select all, then type" },
+      { name: "key_by_key", description: "Clear with backspace, then type character by character" },
+      { name: "javascript_set", description: "Direct JavaScript value assignment" },
+      { name: "clipboard_paste", description: "Simulate clipboard paste operation" }
+    ];
+    
+    let lastError = null;
+    
+    for (let attempt = 0; attempt < maxRetries; attempt++) {
+      const strategy = strategies[attempt % strategies.length];
+      
+      try {
+        console.log(`📝 Attempt ${attempt + 1}: Using ${strategy.name} - ${strategy.description}`);
+        
+        await ensureContentScript(validTabId);
+        
+        // Fill using specific strategy
+        const fillResponse = await chrome.tabs.sendMessage(validTabId, {
+          type: 'FILL_WITH_STRATEGY',
+          data: { selector, value, strategy: strategy.name }
+        });
+        
+        if (fillResponse && fillResponse.error) {
+          throw new Error(fillResponse.error);
+        }
+        
+        // Wait for value to be set
+        await new Promise(resolve => setTimeout(resolve, retryDelay));
+        
+        // Verify the value was set
+        if (verifyValue) {
+          const verifyResponse = await chrome.tabs.sendMessage(validTabId, {
+            type: 'VERIFY_FIELD_VALUE',
+            data: { selector, expectedValue: value }
+          });
+          
+          if (verifyResponse && verifyResponse.verified) {
+            console.log(`✅ Form fill successful with ${strategy.name}: value verified`);
+            return `✅ Successfully filled ${selector} with "${value}" using ${strategy.name}. Value verified in field.`;
+          } else {
+            console.log(`⚠️ Fill attempt ${attempt + 1} - value not verified in field`);
+            lastError = new Error(`Value not set correctly: expected "${value}", got "${verifyResponse?.actualValue || 'undefined'}"`);
+            
+            if (attempt < maxRetries - 1) {
+              continue;
+            }
+          }
+        } else {
+          console.log(`✅ Form fill completed with ${strategy.name} (no verification requested)`);
+          return `✅ Filled ${selector} with "${value}" using ${strategy.name}`;
+        }
+        
+      } catch (error) {
+        console.log(`❌ Fill attempt ${attempt + 1} failed with ${strategy.name}: ${error.message}`);
+        lastError = error;
+        
+        if (attempt < maxRetries - 1) {
+          await new Promise(resolve => setTimeout(resolve, retryDelay));
+          continue;
+        }
+      }
+    }
+    
+    throw new Error(`❌ Form fill failed after ${maxRetries} attempts. Last error: ${lastError?.message}. Use reflect_on_failure tool to analyze the form field and find alternative approaches.`);
+  }
+}
+
 export const browserTools = [
   new FinishTool(),
   new ReasoningTool(),
@@ -1203,7 +1782,18 @@ export const browserTools = [
   new TakeScreenshotTool(),
   new ClickAtCoordinatesTool(),
   new TypeAtCoordinatesTool(),
-  new WaitForElementTool()
+  new WaitForElementTool(),
+  // Enhanced browser-use inspired tools for more powerful agent interactions
+  new HighlightElementsTool(),
+  new KeyboardShortcutTool(),
+  new HoverElementTool(),
+  new SearchAndScrollToTextTool(),
+  new DragDropTool(),
+  // Intelligent verification and retry tools for robust agent behavior
+  new VerifyActionTool(),
+  new ReflectOnFailureTool(),
+  new ClickElementWithRetryTool(),
+  new FillFormFieldWithRetryTool()
 ];
 
 
diff --git a/chrome/browser/resources/vibe/apps/chat2/.gitignore b/chrome/browser/resources/vibe/apps/chat2/.gitignore
new file mode 100644
index 0000000000..9ef65baa5a
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat2/.gitignore
@@ -0,0 +1,2 @@
+out
+.next
diff --git a/chrome/browser/resources/vibe/apps/chat2/build.js b/chrome/browser/resources/vibe/apps/chat2/build.js
new file mode 100644
index 0000000000..862197c563
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat2/build.js
@@ -0,0 +1,40 @@
+#!/usr/bin/env node
+
+// Simple build script for chat2 app
+// This just copies the HTML, CSS, and JS files to the output directory
+
+const fs = require('fs');
+const path = require('path');
+
+// Get output directory from environment variable or command line argument
+const outputDir = process.env.OUTPUT_DIRECTORY || process.argv[2];
+
+if (!outputDir) {
+  console.error('Usage: node build.js <output-directory> or set OUTPUT_DIRECTORY env var');
+  process.exit(1);
+}
+
+// Ensure output directory exists
+// If OUTPUT_DIRECTORY is provided (from main build), output directly to root
+// Otherwise, create apps/chat2 subdirectory for standalone builds
+const chatOutputDir = process.env.OUTPUT_DIRECTORY ? outputDir : path.join(outputDir, 'apps', 'chat2');
+fs.mkdirSync(chatOutputDir, { recursive: true });
+
+// Files to copy
+const filesToCopy = ['chat.html', 'chat.css', 'chat.js'];
+
+// Copy each file
+filesToCopy.forEach(file => {
+  const src = path.join(__dirname, file);
+  const dest = path.join(chatOutputDir, file);
+  
+  try {
+    fs.copyFileSync(src, dest);
+    console.log(`Copied ${file} to ${dest}`);
+  } catch (error) {
+    console.error(`Error copying ${file}:`, error.message);
+    process.exit(1);
+  }
+});
+
+console.log('Chat2 build completed successfully');
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat2/package-lock.json b/chrome/browser/resources/vibe/apps/chat2/package-lock.json
new file mode 100644
index 0000000000..1f5509fc85
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat2/package-lock.json
@@ -0,0 +1,6647 @@
+{
+  "name": "vibe-chat2",
+  "version": "1.0.0",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "vibe-chat2",
+      "version": "1.0.0",
+      "dependencies": {
+        "@radix-ui/react-slot": "^1.2.3",
+        "class-variance-authority": "^0.7.1",
+        "clsx": "^2.1.1",
+        "date-fns": "^4.1.0",
+        "framer-motion": "^11.3.19",
+        "lucide-react": "^0.446.0",
+        "next": "15.3.0-canary.31",
+        "next-themes": "^0.3.0",
+        "react": "19.0.0-rc-45804af1-20241021",
+        "react-dom": "19.0.0-rc-45804af1-20241021",
+        "sonner": "^1.5.0",
+        "tailwind-merge": "^2.5.4",
+        "tailwindcss": "^3.4.1",
+        "tailwindcss-animate": "^1.0.7",
+        "zod": "^3.23.8"
+      },
+      "devDependencies": {
+        "@types/node": "^18",
+        "@types/react": "^18",
+        "@types/react-dom": "^18",
+        "autoprefixer": "^10.0.1",
+        "eslint": "^8",
+        "eslint-config-next": "15.3.0-canary.31",
+        "postcss": "^8",
+        "typescript": "^5"
+      }
+    },
+    "node_modules/@alloc/quick-lru": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
+      "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@emnapi/core": {
+      "version": "1.4.5",
+      "resolved": "https://registry.npmjs.org/@emnapi/core/-/core-1.4.5.tgz",
+      "integrity": "sha512-XsLw1dEOpkSX/WucdqUhPWP7hDxSvZiY+fsUC14h+FtQ2Ifni4znbBt8punRX+Uj2JG/uDb8nEHVKvrVlvdZ5Q==",
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "@emnapi/wasi-threads": "1.0.4",
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/@emnapi/runtime": {
+      "version": "1.4.5",
+      "resolved": "https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.5.tgz",
+      "integrity": "sha512-++LApOtY0pEEz1zrd9vy1/zXVaVJJ/EbAF3u0fXIzPJEDtnITsBGbbK0EkM72amhl/R5b+5xx0Y/QhcVOpuulg==",
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/@emnapi/wasi-threads": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/@emnapi/wasi-threads/-/wasi-threads-1.0.4.tgz",
+      "integrity": "sha512-PJR+bOmMOPH8AtcTGAyYNiuJ3/Fcoj2XN/gBEWzDIKh254XO+mM9XoXHk5GNEhodxeMznbg7BlRojVbKN+gC6g==",
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/@eslint-community/eslint-utils": {
+      "version": "4.7.0",
+      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
+      "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "eslint-visitor-keys": "^3.4.3"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
+      }
+    },
+    "node_modules/@eslint-community/regexpp": {
+      "version": "4.12.1",
+      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
+      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
+      }
+    },
+    "node_modules/@eslint/eslintrc": {
+      "version": "2.1.4",
+      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
+      "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ajv": "^6.12.4",
+        "debug": "^4.3.2",
+        "espree": "^9.6.0",
+        "globals": "^13.19.0",
+        "ignore": "^5.2.0",
+        "import-fresh": "^3.2.1",
+        "js-yaml": "^4.1.0",
+        "minimatch": "^3.1.2",
+        "strip-json-comments": "^3.1.1"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/@eslint/js": {
+      "version": "8.57.1",
+      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.1.tgz",
+      "integrity": "sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      }
+    },
+    "node_modules/@humanwhocodes/config-array": {
+      "version": "0.13.0",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.13.0.tgz",
+      "integrity": "sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==",
+      "deprecated": "Use @eslint/config-array instead",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@humanwhocodes/object-schema": "^2.0.3",
+        "debug": "^4.3.1",
+        "minimatch": "^3.0.5"
+      },
+      "engines": {
+        "node": ">=10.10.0"
+      }
+    },
+    "node_modules/@humanwhocodes/module-importer": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
+      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=12.22"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/nzakas"
+      }
+    },
+    "node_modules/@humanwhocodes/object-schema": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
+      "integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
+      "deprecated": "Use @eslint/object-schema instead",
+      "dev": true,
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/@img/sharp-darwin-arm64": {
+      "version": "0.33.5",
+      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.33.5.tgz",
+      "integrity": "sha512-UT4p+iz/2H4twwAoLCqfA9UH5pI6DggwKEGuaPy7nCVQ8ZsiY5PIcrRvD1DzuY3qYL07NtIQcWnBSY/heikIFQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-darwin-arm64": "1.0.4"
+      }
+    },
+    "node_modules/@img/sharp-darwin-x64": {
+      "version": "0.33.5",
+      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.33.5.tgz",
+      "integrity": "sha512-fyHac4jIc1ANYGRDxtiqelIbdWkIuQaI84Mv45KvGRRxSAa7o7d1ZKAOBaYbnepLC1WqxfpimdeWfvqqSGwR2Q==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-darwin-x64": "1.0.4"
+      }
+    },
+    "node_modules/@img/sharp-libvips-darwin-arm64": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.0.4.tgz",
+      "integrity": "sha512-XblONe153h0O2zuFfTAbQYAX2JhYmDHeWikp1LM9Hul9gVPjFY427k6dFEcOL72O01QxQsWi761svJ/ev9xEDg==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-darwin-x64": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.0.4.tgz",
+      "integrity": "sha512-xnGR8YuZYfJGmWPvmlunFaWJsb9T/AO2ykoP3Fz/0X5XV2aoYBPkX6xqCQvUTKKiLddarLaxpzNe+b1hjeWHAQ==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-arm": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm/-/sharp-libvips-linux-arm-1.0.5.tgz",
+      "integrity": "sha512-gvcC4ACAOPRNATg/ov8/MnbxFDJqf/pDePbBnuBDcjsI8PssmjoKMAz4LtLaVi+OnSb5FK/yIOamqDwGmXW32g==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-arm64": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm64/-/sharp-libvips-linux-arm64-1.0.4.tgz",
+      "integrity": "sha512-9B+taZ8DlyyqzZQnoeIvDVR/2F4EbMepXMc/NdVbkzsJbzkUjhXv/70GQJ7tdLA4YJgNP25zukcxpX2/SueNrA==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-s390x": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-s390x/-/sharp-libvips-linux-s390x-1.0.4.tgz",
+      "integrity": "sha512-u7Wz6ntiSSgGSGcjZ55im6uvTrOxSIS8/dgoVMoiGE9I6JAfU50yH5BoDlYA1tcuGS7g/QNtetJnxA6QEsCVTA==",
+      "cpu": [
+        "s390x"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-x64": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.0.4.tgz",
+      "integrity": "sha512-MmWmQ3iPFZr0Iev+BAgVMb3ZyC4KeFc3jFxnNbEPas60e1cIfevbtuyf9nDGIzOaW9PdnDciJm+wFFaTlj5xYw==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linuxmusl-arm64": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-arm64/-/sharp-libvips-linuxmusl-arm64-1.0.4.tgz",
+      "integrity": "sha512-9Ti+BbTYDcsbp4wfYib8Ctm1ilkugkA/uscUn6UXK1ldpC1JjiXbLfFZtRlBhjPZ5o1NCLiDbg8fhUPKStHoTA==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linuxmusl-x64": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.0.4.tgz",
+      "integrity": "sha512-viYN1KX9m+/hGkJtvYYp+CCLgnJXwiQB39damAO7WMdKWlIhmYTfHjwSbQeUK/20vY154mwezd9HflVFM1wVSw==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-linux-arm": {
+      "version": "0.33.5",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm/-/sharp-linux-arm-0.33.5.tgz",
+      "integrity": "sha512-JTS1eldqZbJxjvKaAkxhZmBqPRGmxgu+qFKSInv8moZ2AmT5Yib3EQ1c6gp493HvrvV8QgdOXdyaIBrhvFhBMQ==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-arm": "1.0.5"
+      }
+    },
+    "node_modules/@img/sharp-linux-arm64": {
+      "version": "0.33.5",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm64/-/sharp-linux-arm64-0.33.5.tgz",
+      "integrity": "sha512-JMVv+AMRyGOHtO1RFBiJy/MBsgz0x4AWrT6QoEVVTyh1E39TrCUpTRI7mx9VksGX4awWASxqCYLCV4wBZHAYxA==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-arm64": "1.0.4"
+      }
+    },
+    "node_modules/@img/sharp-linux-s390x": {
+      "version": "0.33.5",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-s390x/-/sharp-linux-s390x-0.33.5.tgz",
+      "integrity": "sha512-y/5PCd+mP4CA/sPDKl2961b+C9d+vPAveS33s6Z3zfASk2j5upL6fXVPZi7ztePZ5CuH+1kW8JtvxgbuXHRa4Q==",
+      "cpu": [
+        "s390x"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-s390x": "1.0.4"
+      }
+    },
+    "node_modules/@img/sharp-linux-x64": {
+      "version": "0.33.5",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.33.5.tgz",
+      "integrity": "sha512-opC+Ok5pRNAzuvq1AG0ar+1owsu842/Ab+4qvU879ippJBHvyY5n2mxF1izXqkPYlGuP/M556uh53jRLJmzTWA==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-x64": "1.0.4"
+      }
+    },
+    "node_modules/@img/sharp-linuxmusl-arm64": {
+      "version": "0.33.5",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-arm64/-/sharp-linuxmusl-arm64-0.33.5.tgz",
+      "integrity": "sha512-XrHMZwGQGvJg2V/oRSUfSAfjfPxO+4DkiRh6p2AFjLQztWUuY/o8Mq0eMQVIY7HJ1CDQUJlxGGZRw1a5bqmd1g==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linuxmusl-arm64": "1.0.4"
+      }
+    },
+    "node_modules/@img/sharp-linuxmusl-x64": {
+      "version": "0.33.5",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.33.5.tgz",
+      "integrity": "sha512-WT+d/cgqKkkKySYmqoZ8y3pxx7lx9vVejxW/W4DOFMYVSkErR+w7mf2u8m/y4+xHe7yY9DAXQMWQhpnMuFfScw==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linuxmusl-x64": "1.0.4"
+      }
+    },
+    "node_modules/@img/sharp-wasm32": {
+      "version": "0.33.5",
+      "resolved": "https://registry.npmjs.org/@img/sharp-wasm32/-/sharp-wasm32-0.33.5.tgz",
+      "integrity": "sha512-ykUW4LVGaMcU9lu9thv85CbRMAwfeadCJHRsg2GmeRa/cJxsVY9Rbd57JcMxBkKHag5U/x7TSBpScF4U8ElVzg==",
+      "cpu": [
+        "wasm32"
+      ],
+      "license": "Apache-2.0 AND LGPL-3.0-or-later AND MIT",
+      "optional": true,
+      "dependencies": {
+        "@emnapi/runtime": "^1.2.0"
+      },
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-win32-ia32": {
+      "version": "0.33.5",
+      "resolved": "https://registry.npmjs.org/@img/sharp-win32-ia32/-/sharp-win32-ia32-0.33.5.tgz",
+      "integrity": "sha512-T36PblLaTwuVJ/zw/LaH0PdZkRz5rd3SmMHX8GSmR7vtNSP5Z6bQkExdSK7xGWyxLw4sUknBuugTelgw2faBbQ==",
+      "cpu": [
+        "ia32"
+      ],
+      "license": "Apache-2.0 AND LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-win32-x64": {
+      "version": "0.33.5",
+      "resolved": "https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.33.5.tgz",
+      "integrity": "sha512-MpY/o8/8kj+EcnxwvrP4aTJSWw/aZ7JIGR4aBeZkZw5B7/Jn+tY9/VNwtcoGmdT7GfggGIU4kygOMSbYnOrAbg==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "Apache-2.0 AND LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@isaacs/cliui": {
+      "version": "8.0.2",
+      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
+      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
+      "license": "ISC",
+      "dependencies": {
+        "string-width": "^5.1.2",
+        "string-width-cjs": "npm:string-width@^4.2.0",
+        "strip-ansi": "^7.0.1",
+        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
+        "wrap-ansi": "^8.1.0",
+        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@isaacs/cliui/node_modules/ansi-regex": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
+      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
+      }
+    },
+    "node_modules/@isaacs/cliui/node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
+      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
+      }
+    },
+    "node_modules/@jridgewell/gen-mapping": {
+      "version": "0.3.12",
+      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
+      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/sourcemap-codec": "^1.5.0",
+        "@jridgewell/trace-mapping": "^0.3.24"
+      }
+    },
+    "node_modules/@jridgewell/resolve-uri": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
+      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/sourcemap-codec": {
+      "version": "1.5.4",
+      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
+      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
+      "license": "MIT"
+    },
+    "node_modules/@jridgewell/trace-mapping": {
+      "version": "0.3.29",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
+      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/resolve-uri": "^3.1.0",
+        "@jridgewell/sourcemap-codec": "^1.4.14"
+      }
+    },
+    "node_modules/@napi-rs/wasm-runtime": {
+      "version": "0.2.12",
+      "resolved": "https://registry.npmjs.org/@napi-rs/wasm-runtime/-/wasm-runtime-0.2.12.tgz",
+      "integrity": "sha512-ZVWUcfwY4E/yPitQJl481FjFo3K22D6qF0DuFH6Y/nbnE11GY5uguDxZMGXPQ8WQ0128MXQD7TnfHyK4oWoIJQ==",
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "@emnapi/core": "^1.4.3",
+        "@emnapi/runtime": "^1.4.3",
+        "@tybys/wasm-util": "^0.10.0"
+      }
+    },
+    "node_modules/@next/env": {
+      "version": "15.3.0-canary.31",
+      "resolved": "https://registry.npmjs.org/@next/env/-/env-15.3.0-canary.31.tgz",
+      "integrity": "sha512-+GFb0o+c/N7NVhEOVoaE1KaiYbtSUWCgVzS2OM1NqpesuzhOtz1nHYVGZTbLC8dipHOZsVdtsNSYOhk6HR4U0g==",
+      "license": "MIT"
+    },
+    "node_modules/@next/eslint-plugin-next": {
+      "version": "15.3.0-canary.31",
+      "resolved": "https://registry.npmjs.org/@next/eslint-plugin-next/-/eslint-plugin-next-15.3.0-canary.31.tgz",
+      "integrity": "sha512-nd8wiCsbGF+WVS7sy65e0sVEF4TrdWg8V6ZhZJBlCV7JjmBKAW/gwKj9cnbxS8YBdGyBvf+qshmTn3q/hxefMQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fast-glob": "3.3.1"
+      }
+    },
+    "node_modules/@next/swc-darwin-arm64": {
+      "version": "15.3.0-canary.31",
+      "resolved": "https://registry.npmjs.org/@next/swc-darwin-arm64/-/swc-darwin-arm64-15.3.0-canary.31.tgz",
+      "integrity": "sha512-5zshfqQodHNFlRDt89fQP+nSBOZPxcUg6hyzn8DpIRYIafx3bEvnShV4O3t24IJDOk8wUNYBrUnEFAGhh2LqQw==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-darwin-x64": {
+      "version": "15.3.0-canary.31",
+      "resolved": "https://registry.npmjs.org/@next/swc-darwin-x64/-/swc-darwin-x64-15.3.0-canary.31.tgz",
+      "integrity": "sha512-v6vxD69JTp5RnjHlN2hJMrc/QHMMySU2D3GnboTzvrMahyCooFB6cY2VD3prnIyUfO7Guuqiz4Zh9izBw1f1Bg==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-linux-arm64-gnu": {
+      "version": "15.3.0-canary.31",
+      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-gnu/-/swc-linux-arm64-gnu-15.3.0-canary.31.tgz",
+      "integrity": "sha512-GC8RUa+5cG7d4yAtQi3p8PFEb+8+1zblEInB+RRSHdH/jqEM25o9CfE1DgaY6bwi8YuZFQajwUaBKg7a+Iwf/w==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-linux-arm64-musl": {
+      "version": "15.3.0-canary.31",
+      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-musl/-/swc-linux-arm64-musl-15.3.0-canary.31.tgz",
+      "integrity": "sha512-R5lUexNnUmN80HbEekL9U8A25Ix30Vmh/ylGcsmfWZ2D4kK2pIGAXMHFwvaNBQb7WyV8m0CMLQhAu140k2WOZg==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-linux-x64-gnu": {
+      "version": "15.3.0-canary.31",
+      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-gnu/-/swc-linux-x64-gnu-15.3.0-canary.31.tgz",
+      "integrity": "sha512-W84mTs9XQKaEEAT+U5SCitk8KCgJU3sbhBI0LsjhR32WQiyx8UbNa+UAFYiuz1tupg7tw7TM7KTF9s4kQ1/IwQ==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-linux-x64-musl": {
+      "version": "15.3.0-canary.31",
+      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-musl/-/swc-linux-x64-musl-15.3.0-canary.31.tgz",
+      "integrity": "sha512-y2k2Dq9uDMtl4ZzGVNSXL4T6FB+ayYD2xagQZs5Q1tTTF61i62zZz0bL1MaoXTTjlwGtIT9CqykLRDXXA9JzYQ==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-win32-arm64-msvc": {
+      "version": "15.3.0-canary.31",
+      "resolved": "https://registry.npmjs.org/@next/swc-win32-arm64-msvc/-/swc-win32-arm64-msvc-15.3.0-canary.31.tgz",
+      "integrity": "sha512-F2tw+5gcLYkukTUrn8JDbzV3dHbvG+AAh3SKtVKyMc/2JWajII9FDhi3uIM9Nv3dQ+guF308taxHKto44w6A6Q==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-win32-x64-msvc": {
+      "version": "15.3.0-canary.31",
+      "resolved": "https://registry.npmjs.org/@next/swc-win32-x64-msvc/-/swc-win32-x64-msvc-15.3.0-canary.31.tgz",
+      "integrity": "sha512-qx051K2dGzMfkoh2nPq/LjTFyq2PKn3MHJvr7Hmy4BMD2K/XdVRcP3NSkoqikudaMfFg+vU++3AnoRMQAb1RIw==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@nodelib/fs.scandir": {
+      "version": "2.1.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
+      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.stat": "2.0.5",
+        "run-parallel": "^1.1.9"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@nodelib/fs.stat": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
+      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@nodelib/fs.walk": {
+      "version": "1.2.8",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
+      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.scandir": "2.1.5",
+        "fastq": "^1.6.0"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@nolyfill/is-core-module": {
+      "version": "1.0.39",
+      "resolved": "https://registry.npmjs.org/@nolyfill/is-core-module/-/is-core-module-1.0.39.tgz",
+      "integrity": "sha512-nn5ozdjYQpUCZlWGuxcJY/KpxkWQs4DcbMCmKojjyrYDEAGy4Ce19NN4v5MduafTwJlbKc99UA8YhSVqq9yPZA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12.4.0"
+      }
+    },
+    "node_modules/@pkgjs/parseargs": {
+      "version": "0.11.0",
+      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
+      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
+      "license": "MIT",
+      "optional": true,
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/@radix-ui/react-compose-refs": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-compose-refs/-/react-compose-refs-1.1.2.tgz",
+      "integrity": "sha512-z4eqJvfiNnFMHIIvXP3CY57y2WJs5g2v3X0zm9mEJkrkNv4rDxu+sg9Jh8EkXyeqBkB7SOcboo9dMVqhyrACIg==",
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-slot": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-slot/-/react-slot-1.2.3.tgz",
+      "integrity": "sha512-aeNmHnBxbi2St0au6VBVC7JXFlhLlOnvIIlePNniyUNAClzmtAUEY8/pBiK3iHjufOlwA+c20/8jngo7xcrg8A==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-compose-refs": "1.1.2"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@rtsao/scc": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@rtsao/scc/-/scc-1.1.0.tgz",
+      "integrity": "sha512-zt6OdqaDoOnJ1ZYsCYGt9YmWzDXl4vQdKTyJev62gFhRGKdx7mcT54V9KIjg+d2wi9EXsPvAPKe7i7WjfVWB8g==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@rushstack/eslint-patch": {
+      "version": "1.12.0",
+      "resolved": "https://registry.npmjs.org/@rushstack/eslint-patch/-/eslint-patch-1.12.0.tgz",
+      "integrity": "sha512-5EwMtOqvJMMa3HbmxLlF74e+3/HhwBTMcvt3nqVJgGCozO6hzIPOBlwm8mGVNR9SN2IJpxSnlxczyDjcn7qIyw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@swc/counter": {
+      "version": "0.1.3",
+      "resolved": "https://registry.npmjs.org/@swc/counter/-/counter-0.1.3.tgz",
+      "integrity": "sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==",
+      "license": "Apache-2.0"
+    },
+    "node_modules/@swc/helpers": {
+      "version": "0.5.15",
+      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.5.15.tgz",
+      "integrity": "sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "tslib": "^2.8.0"
+      }
+    },
+    "node_modules/@tybys/wasm-util": {
+      "version": "0.10.0",
+      "resolved": "https://registry.npmjs.org/@tybys/wasm-util/-/wasm-util-0.10.0.tgz",
+      "integrity": "sha512-VyyPYFlOMNylG45GoAe0xDoLwWuowvf92F9kySqzYh8vmYm7D2u4iUJKa1tOUpS70Ku13ASrOkS4ScXFsTaCNQ==",
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/@types/json5": {
+      "version": "0.0.29",
+      "resolved": "https://registry.npmjs.org/@types/json5/-/json5-0.0.29.tgz",
+      "integrity": "sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/node": {
+      "version": "18.19.120",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-18.19.120.tgz",
+      "integrity": "sha512-WtCGHFXnVI8WHLxDAt5TbnCM4eSE+nI0QN2NJtwzcgMhht2eNz6V9evJrk+lwC8bCY8OWV5Ym8Jz7ZEyGnKnMA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "undici-types": "~5.26.4"
+      }
+    },
+    "node_modules/@types/prop-types": {
+      "version": "15.7.15",
+      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.15.tgz",
+      "integrity": "sha512-F6bEyamV9jKGAFBEmlQnesRPGOQqS2+Uwi0Em15xenOxHaf2hv6L8YCVn3rPdPJOiJfPiCnLIRyvwVaqMY3MIw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/react": {
+      "version": "18.3.23",
+      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.3.23.tgz",
+      "integrity": "sha512-/LDXMQh55EzZQ0uVAZmKKhfENivEvWz6E+EYzh+/MCjMhNsotd+ZHhBGIjFDTi6+fz0OhQQQLbTgdQIxxCsC0w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/prop-types": "*",
+        "csstype": "^3.0.2"
+      }
+    },
+    "node_modules/@types/react-dom": {
+      "version": "18.3.7",
+      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.3.7.tgz",
+      "integrity": "sha512-MEe3UeoENYVFXzoXEWsvcpg6ZvlrFNlOQ7EOsvhI3CfAXwzPfO8Qwuxd40nepsYKqyyVQnTdEfv68q91yLcKrQ==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "^18.0.0"
+      }
+    },
+    "node_modules/@typescript-eslint/eslint-plugin": {
+      "version": "8.38.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.38.0.tgz",
+      "integrity": "sha512-CPoznzpuAnIOl4nhj4tRr4gIPj5AfKgkiJmGQDaq+fQnRJTYlcBjbX3wbciGmpoPf8DREufuPRe1tNMZnGdanA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@eslint-community/regexpp": "^4.10.0",
+        "@typescript-eslint/scope-manager": "8.38.0",
+        "@typescript-eslint/type-utils": "8.38.0",
+        "@typescript-eslint/utils": "8.38.0",
+        "@typescript-eslint/visitor-keys": "8.38.0",
+        "graphemer": "^1.4.0",
+        "ignore": "^7.0.0",
+        "natural-compare": "^1.4.0",
+        "ts-api-utils": "^2.1.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "@typescript-eslint/parser": "^8.38.0",
+        "eslint": "^8.57.0 || ^9.0.0",
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/eslint-plugin/node_modules/ignore": {
+      "version": "7.0.5",
+      "resolved": "https://registry.npmjs.org/ignore/-/ignore-7.0.5.tgz",
+      "integrity": "sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 4"
+      }
+    },
+    "node_modules/@typescript-eslint/parser": {
+      "version": "8.38.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.38.0.tgz",
+      "integrity": "sha512-Zhy8HCvBUEfBECzIl1PKqF4p11+d0aUJS1GeUiuqK9WmOug8YCmC4h4bjyBvMyAMI9sbRczmrYL5lKg/YMbrcQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/scope-manager": "8.38.0",
+        "@typescript-eslint/types": "8.38.0",
+        "@typescript-eslint/typescript-estree": "8.38.0",
+        "@typescript-eslint/visitor-keys": "8.38.0",
+        "debug": "^4.3.4"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^8.57.0 || ^9.0.0",
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/project-service": {
+      "version": "8.38.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/project-service/-/project-service-8.38.0.tgz",
+      "integrity": "sha512-dbK7Jvqcb8c9QfH01YB6pORpqX1mn5gDZc9n63Ak/+jD67oWXn3Gs0M6vddAN+eDXBCS5EmNWzbSxsn9SzFWWg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/tsconfig-utils": "^8.38.0",
+        "@typescript-eslint/types": "^8.38.0",
+        "debug": "^4.3.4"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/scope-manager": {
+      "version": "8.38.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.38.0.tgz",
+      "integrity": "sha512-WJw3AVlFFcdT9Ri1xs/lg8LwDqgekWXWhH3iAF+1ZM+QPd7oxQ6jvtW/JPwzAScxitILUIFs0/AnQ/UWHzbATQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/types": "8.38.0",
+        "@typescript-eslint/visitor-keys": "8.38.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@typescript-eslint/tsconfig-utils": {
+      "version": "8.38.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/tsconfig-utils/-/tsconfig-utils-8.38.0.tgz",
+      "integrity": "sha512-Lum9RtSE3EroKk/bYns+sPOodqb2Fv50XOl/gMviMKNvanETUuUcC9ObRbzrJ4VSd2JalPqgSAavwrPiPvnAiQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/type-utils": {
+      "version": "8.38.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.38.0.tgz",
+      "integrity": "sha512-c7jAvGEZVf0ao2z+nnz8BUaHZD09Agbh+DY7qvBQqLiz8uJzRgVPj5YvOh8I8uEiH8oIUGIfHzMwUcGVco/SJg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/types": "8.38.0",
+        "@typescript-eslint/typescript-estree": "8.38.0",
+        "@typescript-eslint/utils": "8.38.0",
+        "debug": "^4.3.4",
+        "ts-api-utils": "^2.1.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^8.57.0 || ^9.0.0",
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/types": {
+      "version": "8.38.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.38.0.tgz",
+      "integrity": "sha512-wzkUfX3plUqij4YwWaJyqhiPE5UCRVlFpKn1oCRn2O1bJ592XxWJj8ROQ3JD5MYXLORW84063z3tZTb/cs4Tyw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree": {
+      "version": "8.38.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.38.0.tgz",
+      "integrity": "sha512-fooELKcAKzxux6fA6pxOflpNS0jc+nOQEEOipXFNjSlBS6fqrJOVY/whSn70SScHrcJ2LDsxWrneFoWYSVfqhQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/project-service": "8.38.0",
+        "@typescript-eslint/tsconfig-utils": "8.38.0",
+        "@typescript-eslint/types": "8.38.0",
+        "@typescript-eslint/visitor-keys": "8.38.0",
+        "debug": "^4.3.4",
+        "fast-glob": "^3.3.2",
+        "is-glob": "^4.0.3",
+        "minimatch": "^9.0.4",
+        "semver": "^7.6.0",
+        "ts-api-utils": "^2.1.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
+      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree/node_modules/fast-glob": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
+      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.stat": "^2.0.2",
+        "@nodelib/fs.walk": "^1.2.3",
+        "glob-parent": "^5.1.2",
+        "merge2": "^1.3.0",
+        "micromatch": "^4.0.8"
+      },
+      "engines": {
+        "node": ">=8.6.0"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree/node_modules/glob-parent": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
+      "version": "9.0.5",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
+      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/@typescript-eslint/utils": {
+      "version": "8.38.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.38.0.tgz",
+      "integrity": "sha512-hHcMA86Hgt+ijJlrD8fX0j1j8w4C92zue/8LOPAFioIno+W0+L7KqE8QZKCcPGc/92Vs9x36w/4MPTJhqXdyvg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@eslint-community/eslint-utils": "^4.7.0",
+        "@typescript-eslint/scope-manager": "8.38.0",
+        "@typescript-eslint/types": "8.38.0",
+        "@typescript-eslint/typescript-estree": "8.38.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^8.57.0 || ^9.0.0",
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/visitor-keys": {
+      "version": "8.38.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.38.0.tgz",
+      "integrity": "sha512-pWrTcoFNWuwHlA9CvlfSsGWs14JxfN1TH25zM5L7o0pRLhsoZkDnTsXfQRJBEWJoV5DL0jf+Z+sxiud+K0mq1g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/types": "8.38.0",
+        "eslint-visitor-keys": "^4.2.1"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@typescript-eslint/visitor-keys/node_modules/eslint-visitor-keys": {
+      "version": "4.2.1",
+      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
+      "integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/@ungap/structured-clone": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.3.0.tgz",
+      "integrity": "sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/@unrs/resolver-binding-android-arm-eabi": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-android-arm-eabi/-/resolver-binding-android-arm-eabi-1.11.1.tgz",
+      "integrity": "sha512-ppLRUgHVaGRWUx0R0Ut06Mjo9gBaBkg3v/8AxusGLhsIotbBLuRk51rAzqLC8gq6NyyAojEXglNjzf6R948DNw==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-android-arm64": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-android-arm64/-/resolver-binding-android-arm64-1.11.1.tgz",
+      "integrity": "sha512-lCxkVtb4wp1v+EoN+HjIG9cIIzPkX5OtM03pQYkG+U5O/wL53LC4QbIeazgiKqluGeVEeBlZahHalCaBvU1a2g==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-darwin-arm64": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-darwin-arm64/-/resolver-binding-darwin-arm64-1.11.1.tgz",
+      "integrity": "sha512-gPVA1UjRu1Y/IsB/dQEsp2V1pm44Of6+LWvbLc9SDk1c2KhhDRDBUkQCYVWe6f26uJb3fOK8saWMgtX8IrMk3g==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-darwin-x64": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-darwin-x64/-/resolver-binding-darwin-x64-1.11.1.tgz",
+      "integrity": "sha512-cFzP7rWKd3lZaCsDze07QX1SC24lO8mPty9vdP+YVa3MGdVgPmFc59317b2ioXtgCMKGiCLxJ4HQs62oz6GfRQ==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-freebsd-x64": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-freebsd-x64/-/resolver-binding-freebsd-x64-1.11.1.tgz",
+      "integrity": "sha512-fqtGgak3zX4DCB6PFpsH5+Kmt/8CIi4Bry4rb1ho6Av2QHTREM+47y282Uqiu3ZRF5IQioJQ5qWRV6jduA+iGw==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-arm-gnueabihf": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-arm-gnueabihf/-/resolver-binding-linux-arm-gnueabihf-1.11.1.tgz",
+      "integrity": "sha512-u92mvlcYtp9MRKmP+ZvMmtPN34+/3lMHlyMj7wXJDeXxuM0Vgzz0+PPJNsro1m3IZPYChIkn944wW8TYgGKFHw==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-arm-musleabihf": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-arm-musleabihf/-/resolver-binding-linux-arm-musleabihf-1.11.1.tgz",
+      "integrity": "sha512-cINaoY2z7LVCrfHkIcmvj7osTOtm6VVT16b5oQdS4beibX2SYBwgYLmqhBjA1t51CarSaBuX5YNsWLjsqfW5Cw==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-arm64-gnu": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-arm64-gnu/-/resolver-binding-linux-arm64-gnu-1.11.1.tgz",
+      "integrity": "sha512-34gw7PjDGB9JgePJEmhEqBhWvCiiWCuXsL9hYphDF7crW7UgI05gyBAi6MF58uGcMOiOqSJ2ybEeCvHcq0BCmQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-arm64-musl": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-arm64-musl/-/resolver-binding-linux-arm64-musl-1.11.1.tgz",
+      "integrity": "sha512-RyMIx6Uf53hhOtJDIamSbTskA99sPHS96wxVE/bJtePJJtpdKGXO1wY90oRdXuYOGOTuqjT8ACccMc4K6QmT3w==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-ppc64-gnu": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-ppc64-gnu/-/resolver-binding-linux-ppc64-gnu-1.11.1.tgz",
+      "integrity": "sha512-D8Vae74A4/a+mZH0FbOkFJL9DSK2R6TFPC9M+jCWYia/q2einCubX10pecpDiTmkJVUH+y8K3BZClycD8nCShA==",
+      "cpu": [
+        "ppc64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-riscv64-gnu": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-riscv64-gnu/-/resolver-binding-linux-riscv64-gnu-1.11.1.tgz",
+      "integrity": "sha512-frxL4OrzOWVVsOc96+V3aqTIQl1O2TjgExV4EKgRY09AJ9leZpEg8Ak9phadbuX0BA4k8U5qtvMSQQGGmaJqcQ==",
+      "cpu": [
+        "riscv64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-riscv64-musl": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-riscv64-musl/-/resolver-binding-linux-riscv64-musl-1.11.1.tgz",
+      "integrity": "sha512-mJ5vuDaIZ+l/acv01sHoXfpnyrNKOk/3aDoEdLO/Xtn9HuZlDD6jKxHlkN8ZhWyLJsRBxfv9GYM2utQ1SChKew==",
+      "cpu": [
+        "riscv64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-s390x-gnu": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-s390x-gnu/-/resolver-binding-linux-s390x-gnu-1.11.1.tgz",
+      "integrity": "sha512-kELo8ebBVtb9sA7rMe1Cph4QHreByhaZ2QEADd9NzIQsYNQpt9UkM9iqr2lhGr5afh885d/cB5QeTXSbZHTYPg==",
+      "cpu": [
+        "s390x"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-x64-gnu": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-x64-gnu/-/resolver-binding-linux-x64-gnu-1.11.1.tgz",
+      "integrity": "sha512-C3ZAHugKgovV5YvAMsxhq0gtXuwESUKc5MhEtjBpLoHPLYM+iuwSj3lflFwK3DPm68660rZ7G8BMcwSro7hD5w==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-x64-musl": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-x64-musl/-/resolver-binding-linux-x64-musl-1.11.1.tgz",
+      "integrity": "sha512-rV0YSoyhK2nZ4vEswT/QwqzqQXw5I6CjoaYMOX0TqBlWhojUf8P94mvI7nuJTeaCkkds3QE4+zS8Ko+GdXuZtA==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-wasm32-wasi": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-wasm32-wasi/-/resolver-binding-wasm32-wasi-1.11.1.tgz",
+      "integrity": "sha512-5u4RkfxJm+Ng7IWgkzi3qrFOvLvQYnPBmjmZQ8+szTK/b31fQCnleNl1GgEt7nIsZRIf5PLhPwT0WM+q45x/UQ==",
+      "cpu": [
+        "wasm32"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "@napi-rs/wasm-runtime": "^0.2.11"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
+    "node_modules/@unrs/resolver-binding-win32-arm64-msvc": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-win32-arm64-msvc/-/resolver-binding-win32-arm64-msvc-1.11.1.tgz",
+      "integrity": "sha512-nRcz5Il4ln0kMhfL8S3hLkxI85BXs3o8EYoattsJNdsX4YUU89iOkVn7g0VHSRxFuVMdM4Q1jEpIId1Ihim/Uw==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-win32-ia32-msvc": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-win32-ia32-msvc/-/resolver-binding-win32-ia32-msvc-1.11.1.tgz",
+      "integrity": "sha512-DCEI6t5i1NmAZp6pFonpD5m7i6aFrpofcp4LA2i8IIq60Jyo28hamKBxNrZcyOwVOZkgsRp9O2sXWBWP8MnvIQ==",
+      "cpu": [
+        "ia32"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-win32-x64-msvc": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-win32-x64-msvc/-/resolver-binding-win32-x64-msvc-1.11.1.tgz",
+      "integrity": "sha512-lrW200hZdbfRtztbygyaq/6jP6AKE8qQN2KvPcJ+x7wiD038YtnYtZ82IMNJ69GJibV7bwL3y9FgK+5w/pYt6g==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
+    "node_modules/acorn": {
+      "version": "8.15.0",
+      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
+      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "acorn": "bin/acorn"
+      },
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/acorn-jsx": {
+      "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
+      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
+      }
+    },
+    "node_modules/ajv": {
+      "version": "6.12.6",
+      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
+      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fast-deep-equal": "^3.1.1",
+        "fast-json-stable-stringify": "^2.0.0",
+        "json-schema-traverse": "^0.4.1",
+        "uri-js": "^4.2.2"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/epoberezkin"
+      }
+    },
+    "node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/any-promise": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
+      "integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==",
+      "license": "MIT"
+    },
+    "node_modules/anymatch": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
+      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
+      "license": "ISC",
+      "dependencies": {
+        "normalize-path": "^3.0.0",
+        "picomatch": "^2.0.4"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/arg": {
+      "version": "5.0.2",
+      "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
+      "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
+      "license": "MIT"
+    },
+    "node_modules/argparse": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
+      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
+      "dev": true,
+      "license": "Python-2.0"
+    },
+    "node_modules/aria-query": {
+      "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.3.2.tgz",
+      "integrity": "sha512-COROpnaoap1E2F000S62r6A60uHZnmlvomhfyT2DlTcrY1OrBKn2UhH7qn5wTC9zMvD0AY7csdPSNwKP+7WiQw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/array-buffer-byte-length": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
+      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "is-array-buffer": "^3.0.5"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/array-includes": {
+      "version": "3.1.9",
+      "resolved": "https://registry.npmjs.org/array-includes/-/array-includes-3.1.9.tgz",
+      "integrity": "sha512-FmeCCAenzH0KH381SPT5FZmiA/TmpndpcaShhfgEN9eCVjnFBqq3l1xrI42y8+PPLI6hypzou4GXw00WHmPBLQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.4",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.24.0",
+        "es-object-atoms": "^1.1.1",
+        "get-intrinsic": "^1.3.0",
+        "is-string": "^1.1.1",
+        "math-intrinsics": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/array.prototype.findlast": {
+      "version": "1.2.5",
+      "resolved": "https://registry.npmjs.org/array.prototype.findlast/-/array.prototype.findlast-1.2.5.tgz",
+      "integrity": "sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.7",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.2",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.0.0",
+        "es-shim-unscopables": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/array.prototype.findlastindex": {
+      "version": "1.2.6",
+      "resolved": "https://registry.npmjs.org/array.prototype.findlastindex/-/array.prototype.findlastindex-1.2.6.tgz",
+      "integrity": "sha512-F/TKATkzseUExPlfvmwQKGITM3DGTK+vkAsCZoDc5daVygbJBnjEUCbgkAvVFsgfXfX4YIqZ/27G3k3tdXrTxQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.4",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.9",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.1.1",
+        "es-shim-unscopables": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/array.prototype.flat": {
+      "version": "1.3.3",
+      "resolved": "https://registry.npmjs.org/array.prototype.flat/-/array.prototype.flat-1.3.3.tgz",
+      "integrity": "sha512-rwG/ja1neyLqCuGZ5YYrznA62D4mZXg0i1cIskIUKSiqF3Cje9/wXAls9B9s1Wa2fomMsIv8czB8jZcPmxCXFg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.5",
+        "es-shim-unscopables": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/array.prototype.flatmap": {
+      "version": "1.3.3",
+      "resolved": "https://registry.npmjs.org/array.prototype.flatmap/-/array.prototype.flatmap-1.3.3.tgz",
+      "integrity": "sha512-Y7Wt51eKJSyi80hFrJCePGGNo5ktJCslFuboqJsbf57CCPcm5zztluPlc4/aD8sWsKvlwatezpV4U1efk8kpjg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.5",
+        "es-shim-unscopables": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/array.prototype.tosorted": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/array.prototype.tosorted/-/array.prototype.tosorted-1.1.4.tgz",
+      "integrity": "sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.7",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.3",
+        "es-errors": "^1.3.0",
+        "es-shim-unscopables": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/arraybuffer.prototype.slice": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.4.tgz",
+      "integrity": "sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "array-buffer-byte-length": "^1.0.1",
+        "call-bind": "^1.0.8",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.5",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.6",
+        "is-array-buffer": "^3.0.4"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/ast-types-flow": {
+      "version": "0.0.8",
+      "resolved": "https://registry.npmjs.org/ast-types-flow/-/ast-types-flow-0.0.8.tgz",
+      "integrity": "sha512-OH/2E5Fg20h2aPrbe+QL8JZQFko0YZaF+j4mnQ7BGhfavO7OpSLa8a0y9sBwomHdSbkhTS8TQNayBfnW5DwbvQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/async-function": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/async-function/-/async-function-1.0.0.tgz",
+      "integrity": "sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/autoprefixer": {
+      "version": "10.4.21",
+      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.21.tgz",
+      "integrity": "sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "browserslist": "^4.24.4",
+        "caniuse-lite": "^1.0.30001702",
+        "fraction.js": "^4.3.7",
+        "normalize-range": "^0.1.2",
+        "picocolors": "^1.1.1",
+        "postcss-value-parser": "^4.2.0"
+      },
+      "bin": {
+        "autoprefixer": "bin/autoprefixer"
+      },
+      "engines": {
+        "node": "^10 || ^12 || >=14"
+      },
+      "peerDependencies": {
+        "postcss": "^8.1.0"
+      }
+    },
+    "node_modules/available-typed-arrays": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
+      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "possible-typed-array-names": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/axe-core": {
+      "version": "4.10.3",
+      "resolved": "https://registry.npmjs.org/axe-core/-/axe-core-4.10.3.tgz",
+      "integrity": "sha512-Xm7bpRXnDSX2YE2YFfBk2FnF0ep6tmG7xPh8iHee8MIcrgq762Nkce856dYtJYLkuIoYZvGfTs/PbZhideTcEg==",
+      "dev": true,
+      "license": "MPL-2.0",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/axobject-query": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/axobject-query/-/axobject-query-4.1.0.tgz",
+      "integrity": "sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/balanced-match": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
+      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
+      "license": "MIT"
+    },
+    "node_modules/binary-extensions": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
+      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/braces": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
+      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
+      "license": "MIT",
+      "dependencies": {
+        "fill-range": "^7.1.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/browserslist": {
+      "version": "4.25.1",
+      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
+      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/browserslist"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "caniuse-lite": "^1.0.30001726",
+        "electron-to-chromium": "^1.5.173",
+        "node-releases": "^2.0.19",
+        "update-browserslist-db": "^1.1.3"
+      },
+      "bin": {
+        "browserslist": "cli.js"
+      },
+      "engines": {
+        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
+      }
+    },
+    "node_modules/busboy": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
+      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
+      "dependencies": {
+        "streamsearch": "^1.1.0"
+      },
+      "engines": {
+        "node": ">=10.16.0"
+      }
+    },
+    "node_modules/call-bind": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
+      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.0",
+        "es-define-property": "^1.0.0",
+        "get-intrinsic": "^1.2.4",
+        "set-function-length": "^1.2.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/call-bind-apply-helpers": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
+      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/call-bound": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
+      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "get-intrinsic": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/callsites": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
+      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/camelcase-css": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
+      "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/caniuse-lite": {
+      "version": "1.0.30001727",
+      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001727.tgz",
+      "integrity": "sha512-pB68nIHmbN6L/4C6MH1DokyR3bYqFwjaSs/sWDHGj4CTcFtQUQMuJftVwWkXq7mNWOybD3KhUv3oWHoGxgP14Q==",
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "CC-BY-4.0"
+    },
+    "node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/chokidar": {
+      "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
+      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
+      "license": "MIT",
+      "dependencies": {
+        "anymatch": "~3.1.2",
+        "braces": "~3.0.2",
+        "glob-parent": "~5.1.2",
+        "is-binary-path": "~2.1.0",
+        "is-glob": "~4.0.1",
+        "normalize-path": "~3.0.0",
+        "readdirp": "~3.6.0"
+      },
+      "engines": {
+        "node": ">= 8.10.0"
+      },
+      "funding": {
+        "url": "https://paulmillr.com/funding/"
+      },
+      "optionalDependencies": {
+        "fsevents": "~2.3.2"
+      }
+    },
+    "node_modules/chokidar/node_modules/glob-parent": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/class-variance-authority": {
+      "version": "0.7.1",
+      "resolved": "https://registry.npmjs.org/class-variance-authority/-/class-variance-authority-0.7.1.tgz",
+      "integrity": "sha512-Ka+9Trutv7G8M6WT6SeiRWz792K5qEqIGEGzXKhAE6xOWAY6pPH8U+9IY3oCMv6kqTmLsv7Xh/2w2RigkePMsg==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "clsx": "^2.1.1"
+      },
+      "funding": {
+        "url": "https://polar.sh/cva"
+      }
+    },
+    "node_modules/client-only": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/client-only/-/client-only-0.0.1.tgz",
+      "integrity": "sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==",
+      "license": "MIT"
+    },
+    "node_modules/clsx": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
+      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/color": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/color/-/color-4.2.3.tgz",
+      "integrity": "sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==",
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "color-convert": "^2.0.1",
+        "color-string": "^1.9.0"
+      },
+      "engines": {
+        "node": ">=12.5.0"
+      }
+    },
+    "node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "license": "MIT",
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/color-name": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+      "license": "MIT"
+    },
+    "node_modules/color-string": {
+      "version": "1.9.1",
+      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
+      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "color-name": "^1.0.0",
+        "simple-swizzle": "^0.2.2"
+      }
+    },
+    "node_modules/commander": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
+      "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/concat-map": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
+      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/cross-spawn": {
+      "version": "7.0.6",
+      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
+      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
+      "license": "MIT",
+      "dependencies": {
+        "path-key": "^3.1.0",
+        "shebang-command": "^2.0.0",
+        "which": "^2.0.1"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/cssesc": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
+      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
+      "license": "MIT",
+      "bin": {
+        "cssesc": "bin/cssesc"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/csstype": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
+      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/damerau-levenshtein": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/damerau-levenshtein/-/damerau-levenshtein-1.0.8.tgz",
+      "integrity": "sha512-sdQSFB7+llfUcQHUQO3+B8ERRj0Oa4w9POWMI/puGtuf7gFywGmkaLCElnudfTiKZV+NvHqL0ifzdrI8Ro7ESA==",
+      "dev": true,
+      "license": "BSD-2-Clause"
+    },
+    "node_modules/data-view-buffer": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.2.tgz",
+      "integrity": "sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "es-errors": "^1.3.0",
+        "is-data-view": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/data-view-byte-length": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.2.tgz",
+      "integrity": "sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "es-errors": "^1.3.0",
+        "is-data-view": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/inspect-js"
+      }
+    },
+    "node_modules/data-view-byte-offset": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.1.tgz",
+      "integrity": "sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "is-data-view": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/date-fns": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-4.1.0.tgz",
+      "integrity": "sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/kossnocorp"
+      }
+    },
+    "node_modules/debug": {
+      "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
+      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.1.3"
+      },
+      "engines": {
+        "node": ">=6.0"
+      },
+      "peerDependenciesMeta": {
+        "supports-color": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/deep-is": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
+      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/define-data-property": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
+      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-define-property": "^1.0.0",
+        "es-errors": "^1.3.0",
+        "gopd": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/define-properties": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
+      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "define-data-property": "^1.0.1",
+        "has-property-descriptors": "^1.0.0",
+        "object-keys": "^1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/detect-libc": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
+      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
+      "license": "Apache-2.0",
+      "optional": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/didyoumean": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
+      "integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
+      "license": "Apache-2.0"
+    },
+    "node_modules/dlv": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
+      "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
+      "license": "MIT"
+    },
+    "node_modules/doctrine": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
+      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "esutils": "^2.0.2"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/dunder-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
+      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "gopd": "^1.2.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/eastasianwidth": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
+      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
+      "license": "MIT"
+    },
+    "node_modules/electron-to-chromium": {
+      "version": "1.5.190",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.190.tgz",
+      "integrity": "sha512-k4McmnB2091YIsdCgkS0fMVMPOJgxl93ltFzaryXqwip1AaxeDqKCGLxkXODDA5Ab/D+tV5EL5+aTx76RvLRxw==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/emoji-regex": {
+      "version": "9.2.2",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
+      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
+      "license": "MIT"
+    },
+    "node_modules/es-abstract": {
+      "version": "1.24.0",
+      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.24.0.tgz",
+      "integrity": "sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "array-buffer-byte-length": "^1.0.2",
+        "arraybuffer.prototype.slice": "^1.0.4",
+        "available-typed-arrays": "^1.0.7",
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.4",
+        "data-view-buffer": "^1.0.2",
+        "data-view-byte-length": "^1.0.2",
+        "data-view-byte-offset": "^1.0.1",
+        "es-define-property": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.1.1",
+        "es-set-tostringtag": "^2.1.0",
+        "es-to-primitive": "^1.3.0",
+        "function.prototype.name": "^1.1.8",
+        "get-intrinsic": "^1.3.0",
+        "get-proto": "^1.0.1",
+        "get-symbol-description": "^1.1.0",
+        "globalthis": "^1.0.4",
+        "gopd": "^1.2.0",
+        "has-property-descriptors": "^1.0.2",
+        "has-proto": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "hasown": "^2.0.2",
+        "internal-slot": "^1.1.0",
+        "is-array-buffer": "^3.0.5",
+        "is-callable": "^1.2.7",
+        "is-data-view": "^1.0.2",
+        "is-negative-zero": "^2.0.3",
+        "is-regex": "^1.2.1",
+        "is-set": "^2.0.3",
+        "is-shared-array-buffer": "^1.0.4",
+        "is-string": "^1.1.1",
+        "is-typed-array": "^1.1.15",
+        "is-weakref": "^1.1.1",
+        "math-intrinsics": "^1.1.0",
+        "object-inspect": "^1.13.4",
+        "object-keys": "^1.1.1",
+        "object.assign": "^4.1.7",
+        "own-keys": "^1.0.1",
+        "regexp.prototype.flags": "^1.5.4",
+        "safe-array-concat": "^1.1.3",
+        "safe-push-apply": "^1.0.0",
+        "safe-regex-test": "^1.1.0",
+        "set-proto": "^1.0.0",
+        "stop-iteration-iterator": "^1.1.0",
+        "string.prototype.trim": "^1.2.10",
+        "string.prototype.trimend": "^1.0.9",
+        "string.prototype.trimstart": "^1.0.8",
+        "typed-array-buffer": "^1.0.3",
+        "typed-array-byte-length": "^1.0.3",
+        "typed-array-byte-offset": "^1.0.4",
+        "typed-array-length": "^1.0.7",
+        "unbox-primitive": "^1.1.0",
+        "which-typed-array": "^1.1.19"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/es-define-property": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
+      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-errors": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
+      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-iterator-helpers": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/es-iterator-helpers/-/es-iterator-helpers-1.2.1.tgz",
+      "integrity": "sha512-uDn+FE1yrDzyC0pCo961B2IHbdM8y/ACZsKD4dG6WqrjV53BADjwa7D+1aom2rsNVfLyDgU/eigvlJGJ08OQ4w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.3",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.6",
+        "es-errors": "^1.3.0",
+        "es-set-tostringtag": "^2.0.3",
+        "function-bind": "^1.1.2",
+        "get-intrinsic": "^1.2.6",
+        "globalthis": "^1.0.4",
+        "gopd": "^1.2.0",
+        "has-property-descriptors": "^1.0.2",
+        "has-proto": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "internal-slot": "^1.1.0",
+        "iterator.prototype": "^1.1.4",
+        "safe-array-concat": "^1.1.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-object-atoms": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
+      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-set-tostringtag": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
+      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.6",
+        "has-tostringtag": "^1.0.2",
+        "hasown": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-shim-unscopables": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/es-shim-unscopables/-/es-shim-unscopables-1.1.0.tgz",
+      "integrity": "sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "hasown": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-to-primitive": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.3.0.tgz",
+      "integrity": "sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-callable": "^1.2.7",
+        "is-date-object": "^1.0.5",
+        "is-symbol": "^1.0.4"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/escalade": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
+      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/escape-string-regexp": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
+      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/eslint": {
+      "version": "8.57.1",
+      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.57.1.tgz",
+      "integrity": "sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==",
+      "deprecated": "This version is no longer supported. Please see https://eslint.org/version-support for other options.",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@eslint-community/eslint-utils": "^4.2.0",
+        "@eslint-community/regexpp": "^4.6.1",
+        "@eslint/eslintrc": "^2.1.4",
+        "@eslint/js": "8.57.1",
+        "@humanwhocodes/config-array": "^0.13.0",
+        "@humanwhocodes/module-importer": "^1.0.1",
+        "@nodelib/fs.walk": "^1.2.8",
+        "@ungap/structured-clone": "^1.2.0",
+        "ajv": "^6.12.4",
+        "chalk": "^4.0.0",
+        "cross-spawn": "^7.0.2",
+        "debug": "^4.3.2",
+        "doctrine": "^3.0.0",
+        "escape-string-regexp": "^4.0.0",
+        "eslint-scope": "^7.2.2",
+        "eslint-visitor-keys": "^3.4.3",
+        "espree": "^9.6.1",
+        "esquery": "^1.4.2",
+        "esutils": "^2.0.2",
+        "fast-deep-equal": "^3.1.3",
+        "file-entry-cache": "^6.0.1",
+        "find-up": "^5.0.0",
+        "glob-parent": "^6.0.2",
+        "globals": "^13.19.0",
+        "graphemer": "^1.4.0",
+        "ignore": "^5.2.0",
+        "imurmurhash": "^0.1.4",
+        "is-glob": "^4.0.0",
+        "is-path-inside": "^3.0.3",
+        "js-yaml": "^4.1.0",
+        "json-stable-stringify-without-jsonify": "^1.0.1",
+        "levn": "^0.4.1",
+        "lodash.merge": "^4.6.2",
+        "minimatch": "^3.1.2",
+        "natural-compare": "^1.4.0",
+        "optionator": "^0.9.3",
+        "strip-ansi": "^6.0.1",
+        "text-table": "^0.2.0"
+      },
+      "bin": {
+        "eslint": "bin/eslint.js"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/eslint-config-next": {
+      "version": "15.3.0-canary.31",
+      "resolved": "https://registry.npmjs.org/eslint-config-next/-/eslint-config-next-15.3.0-canary.31.tgz",
+      "integrity": "sha512-wNaC/KuYW4p3bL72NyM5X61xANS/lL4R0NTAVH2hXOWdfsG2yw4YApQkNDRMNOpcbiapigUjWbbrGzQG08LkGQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@next/eslint-plugin-next": "15.3.0-canary.31",
+        "@rushstack/eslint-patch": "^1.10.3",
+        "@typescript-eslint/eslint-plugin": "^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0",
+        "@typescript-eslint/parser": "^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0",
+        "eslint-import-resolver-node": "^0.3.6",
+        "eslint-import-resolver-typescript": "^3.5.2",
+        "eslint-plugin-import": "^2.31.0",
+        "eslint-plugin-jsx-a11y": "^6.10.0",
+        "eslint-plugin-react": "^7.37.0",
+        "eslint-plugin-react-hooks": "^5.0.0"
+      },
+      "peerDependencies": {
+        "eslint": "^7.23.0 || ^8.0.0 || ^9.0.0",
+        "typescript": ">=3.3.1"
+      },
+      "peerDependenciesMeta": {
+        "typescript": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/eslint-import-resolver-node": {
+      "version": "0.3.9",
+      "resolved": "https://registry.npmjs.org/eslint-import-resolver-node/-/eslint-import-resolver-node-0.3.9.tgz",
+      "integrity": "sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "debug": "^3.2.7",
+        "is-core-module": "^2.13.0",
+        "resolve": "^1.22.4"
+      }
+    },
+    "node_modules/eslint-import-resolver-node/node_modules/debug": {
+      "version": "3.2.7",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
+      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.1.1"
+      }
+    },
+    "node_modules/eslint-import-resolver-typescript": {
+      "version": "3.10.1",
+      "resolved": "https://registry.npmjs.org/eslint-import-resolver-typescript/-/eslint-import-resolver-typescript-3.10.1.tgz",
+      "integrity": "sha512-A1rHYb06zjMGAxdLSkN2fXPBwuSaQ0iO5M/hdyS0Ajj1VBaRp0sPD3dn1FhME3c/JluGFbwSxyCfqdSbtQLAHQ==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "@nolyfill/is-core-module": "1.0.39",
+        "debug": "^4.4.0",
+        "get-tsconfig": "^4.10.0",
+        "is-bun-module": "^2.0.0",
+        "stable-hash": "^0.0.5",
+        "tinyglobby": "^0.2.13",
+        "unrs-resolver": "^1.6.2"
+      },
+      "engines": {
+        "node": "^14.18.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint-import-resolver-typescript"
+      },
+      "peerDependencies": {
+        "eslint": "*",
+        "eslint-plugin-import": "*",
+        "eslint-plugin-import-x": "*"
+      },
+      "peerDependenciesMeta": {
+        "eslint-plugin-import": {
+          "optional": true
+        },
+        "eslint-plugin-import-x": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/eslint-module-utils": {
+      "version": "2.12.1",
+      "resolved": "https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.12.1.tgz",
+      "integrity": "sha512-L8jSWTze7K2mTg0vos/RuLRS5soomksDPoJLXIslC7c8Wmut3bx7CPpJijDcBZtxQ5lrbUdM+s0OlNbz0DCDNw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "debug": "^3.2.7"
+      },
+      "engines": {
+        "node": ">=4"
+      },
+      "peerDependenciesMeta": {
+        "eslint": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/eslint-module-utils/node_modules/debug": {
+      "version": "3.2.7",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
+      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.1.1"
+      }
+    },
+    "node_modules/eslint-plugin-import": {
+      "version": "2.32.0",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-import/-/eslint-plugin-import-2.32.0.tgz",
+      "integrity": "sha512-whOE1HFo/qJDyX4SnXzP4N6zOWn79WhnCUY/iDR0mPfQZO8wcYE4JClzI2oZrhBnnMUCBCHZhO6VQyoBU95mZA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@rtsao/scc": "^1.1.0",
+        "array-includes": "^3.1.9",
+        "array.prototype.findlastindex": "^1.2.6",
+        "array.prototype.flat": "^1.3.3",
+        "array.prototype.flatmap": "^1.3.3",
+        "debug": "^3.2.7",
+        "doctrine": "^2.1.0",
+        "eslint-import-resolver-node": "^0.3.9",
+        "eslint-module-utils": "^2.12.1",
+        "hasown": "^2.0.2",
+        "is-core-module": "^2.16.1",
+        "is-glob": "^4.0.3",
+        "minimatch": "^3.1.2",
+        "object.fromentries": "^2.0.8",
+        "object.groupby": "^1.0.3",
+        "object.values": "^1.2.1",
+        "semver": "^6.3.1",
+        "string.prototype.trimend": "^1.0.9",
+        "tsconfig-paths": "^3.15.0"
+      },
+      "engines": {
+        "node": ">=4"
+      },
+      "peerDependencies": {
+        "eslint": "^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8 || ^9"
+      }
+    },
+    "node_modules/eslint-plugin-import/node_modules/debug": {
+      "version": "3.2.7",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
+      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.1.1"
+      }
+    },
+    "node_modules/eslint-plugin-import/node_modules/doctrine": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
+      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "esutils": "^2.0.2"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/eslint-plugin-import/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
+    "node_modules/eslint-plugin-jsx-a11y": {
+      "version": "6.10.2",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-jsx-a11y/-/eslint-plugin-jsx-a11y-6.10.2.tgz",
+      "integrity": "sha512-scB3nz4WmG75pV8+3eRUQOHZlNSUhFNq37xnpgRkCCELU3XMvXAxLk1eqWWyE22Ki4Q01Fnsw9BA3cJHDPgn2Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "aria-query": "^5.3.2",
+        "array-includes": "^3.1.8",
+        "array.prototype.flatmap": "^1.3.2",
+        "ast-types-flow": "^0.0.8",
+        "axe-core": "^4.10.0",
+        "axobject-query": "^4.1.0",
+        "damerau-levenshtein": "^1.0.8",
+        "emoji-regex": "^9.2.2",
+        "hasown": "^2.0.2",
+        "jsx-ast-utils": "^3.3.5",
+        "language-tags": "^1.0.9",
+        "minimatch": "^3.1.2",
+        "object.fromentries": "^2.0.8",
+        "safe-regex-test": "^1.0.3",
+        "string.prototype.includes": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=4.0"
+      },
+      "peerDependencies": {
+        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9"
+      }
+    },
+    "node_modules/eslint-plugin-react": {
+      "version": "7.37.5",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-react/-/eslint-plugin-react-7.37.5.tgz",
+      "integrity": "sha512-Qteup0SqU15kdocexFNAJMvCJEfa2xUKNV4CC1xsVMrIIqEy3SQ/rqyxCWNzfrd3/ldy6HMlD2e0JDVpDg2qIA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "array-includes": "^3.1.8",
+        "array.prototype.findlast": "^1.2.5",
+        "array.prototype.flatmap": "^1.3.3",
+        "array.prototype.tosorted": "^1.1.4",
+        "doctrine": "^2.1.0",
+        "es-iterator-helpers": "^1.2.1",
+        "estraverse": "^5.3.0",
+        "hasown": "^2.0.2",
+        "jsx-ast-utils": "^2.4.1 || ^3.0.0",
+        "minimatch": "^3.1.2",
+        "object.entries": "^1.1.9",
+        "object.fromentries": "^2.0.8",
+        "object.values": "^1.2.1",
+        "prop-types": "^15.8.1",
+        "resolve": "^2.0.0-next.5",
+        "semver": "^6.3.1",
+        "string.prototype.matchall": "^4.0.12",
+        "string.prototype.repeat": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=4"
+      },
+      "peerDependencies": {
+        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7"
+      }
+    },
+    "node_modules/eslint-plugin-react-hooks": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
+      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "peerDependencies": {
+        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
+      }
+    },
+    "node_modules/eslint-plugin-react/node_modules/doctrine": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
+      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "esutils": "^2.0.2"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/eslint-plugin-react/node_modules/resolve": {
+      "version": "2.0.0-next.5",
+      "resolved": "https://registry.npmjs.org/resolve/-/resolve-2.0.0-next.5.tgz",
+      "integrity": "sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-core-module": "^2.13.0",
+        "path-parse": "^1.0.7",
+        "supports-preserve-symlinks-flag": "^1.0.0"
+      },
+      "bin": {
+        "resolve": "bin/resolve"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/eslint-plugin-react/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
+    "node_modules/eslint-scope": {
+      "version": "7.2.2",
+      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
+      "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "esrecurse": "^4.3.0",
+        "estraverse": "^5.2.0"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/eslint-visitor-keys": {
+      "version": "3.4.3",
+      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
+      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/espree": {
+      "version": "9.6.1",
+      "resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
+      "integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "acorn": "^8.9.0",
+        "acorn-jsx": "^5.3.2",
+        "eslint-visitor-keys": "^3.4.1"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/esquery": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
+      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "estraverse": "^5.1.0"
+      },
+      "engines": {
+        "node": ">=0.10"
+      }
+    },
+    "node_modules/esrecurse": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
+      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "estraverse": "^5.2.0"
+      },
+      "engines": {
+        "node": ">=4.0"
+      }
+    },
+    "node_modules/estraverse": {
+      "version": "5.3.0",
+      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
+      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=4.0"
+      }
+    },
+    "node_modules/esutils": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
+      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/fast-deep-equal": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
+      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/fast-glob": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.1.tgz",
+      "integrity": "sha512-kNFPyjhh5cKjrUltxs+wFx+ZkbRaxxmZ+X0ZU31SOsxCEtP9VPgtq2teZw1DebupL5GmDaNQ6yKMMVcM41iqDg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.stat": "^2.0.2",
+        "@nodelib/fs.walk": "^1.2.3",
+        "glob-parent": "^5.1.2",
+        "merge2": "^1.3.0",
+        "micromatch": "^4.0.4"
+      },
+      "engines": {
+        "node": ">=8.6.0"
+      }
+    },
+    "node_modules/fast-glob/node_modules/glob-parent": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/fast-json-stable-stringify": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
+      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/fast-levenshtein": {
+      "version": "2.0.6",
+      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
+      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/fastq": {
+      "version": "1.19.1",
+      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
+      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
+      "license": "ISC",
+      "dependencies": {
+        "reusify": "^1.0.4"
+      }
+    },
+    "node_modules/fdir": {
+      "version": "6.4.6",
+      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.6.tgz",
+      "integrity": "sha512-hiFoqpyZcfNm1yc4u8oWCf9A2c4D3QjCrks3zmoVKVxpQRzmPNar1hUJcBG2RQHvEVGDN+Jm81ZheVLAQMK6+w==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "picomatch": "^3 || ^4"
+      },
+      "peerDependenciesMeta": {
+        "picomatch": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/file-entry-cache": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
+      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "flat-cache": "^3.0.4"
+      },
+      "engines": {
+        "node": "^10.12.0 || >=12.0.0"
+      }
+    },
+    "node_modules/fill-range": {
+      "version": "7.1.1",
+      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
+      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
+      "license": "MIT",
+      "dependencies": {
+        "to-regex-range": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/find-up": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
+      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "locate-path": "^6.0.0",
+        "path-exists": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/flat-cache": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.2.0.tgz",
+      "integrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "flatted": "^3.2.9",
+        "keyv": "^4.5.3",
+        "rimraf": "^3.0.2"
+      },
+      "engines": {
+        "node": "^10.12.0 || >=12.0.0"
+      }
+    },
+    "node_modules/flatted": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
+      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/for-each": {
+      "version": "0.3.5",
+      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
+      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-callable": "^1.2.7"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/foreground-child": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
+      "integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
+      "license": "ISC",
+      "dependencies": {
+        "cross-spawn": "^7.0.6",
+        "signal-exit": "^4.0.1"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/fraction.js": {
+      "version": "4.3.7",
+      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
+      "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "type": "patreon",
+        "url": "https://github.com/sponsors/rawify"
+      }
+    },
+    "node_modules/framer-motion": {
+      "version": "11.18.2",
+      "resolved": "https://registry.npmjs.org/framer-motion/-/framer-motion-11.18.2.tgz",
+      "integrity": "sha512-5F5Och7wrvtLVElIpclDT0CBzMVg3dL22B64aZwHtsIY8RB4mXICLrkajK4G9R+ieSAGcgrLeae2SeUTg2pr6w==",
+      "license": "MIT",
+      "dependencies": {
+        "motion-dom": "^11.18.1",
+        "motion-utils": "^11.18.1",
+        "tslib": "^2.4.0"
+      },
+      "peerDependencies": {
+        "@emotion/is-prop-valid": "*",
+        "react": "^18.0.0 || ^19.0.0",
+        "react-dom": "^18.0.0 || ^19.0.0"
+      },
+      "peerDependenciesMeta": {
+        "@emotion/is-prop-valid": {
+          "optional": true
+        },
+        "react": {
+          "optional": true
+        },
+        "react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/fs.realpath": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
+      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/fsevents": {
+      "version": "2.3.3",
+      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
+      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
+      }
+    },
+    "node_modules/function-bind": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
+      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/function.prototype.name": {
+      "version": "1.1.8",
+      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.8.tgz",
+      "integrity": "sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.3",
+        "define-properties": "^1.2.1",
+        "functions-have-names": "^1.2.3",
+        "hasown": "^2.0.2",
+        "is-callable": "^1.2.7"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/functions-have-names": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
+      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
+      "dev": true,
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/get-intrinsic": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
+      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "es-define-property": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.1.1",
+        "function-bind": "^1.1.2",
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "hasown": "^2.0.2",
+        "math-intrinsics": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/get-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
+      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "dunder-proto": "^1.0.1",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/get-symbol-description": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.1.0.tgz",
+      "integrity": "sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.6"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/get-tsconfig": {
+      "version": "4.10.1",
+      "resolved": "https://registry.npmjs.org/get-tsconfig/-/get-tsconfig-4.10.1.tgz",
+      "integrity": "sha512-auHyJ4AgMz7vgS8Hp3N6HXSmlMdUyhSUrfBF16w153rxtLIEOE+HGqaBppczZvnHLqQJfiHotCYpNhl0lUROFQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "resolve-pkg-maps": "^1.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/privatenumber/get-tsconfig?sponsor=1"
+      }
+    },
+    "node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/glob-parent": {
+      "version": "6.0.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
+      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.3"
+      },
+      "engines": {
+        "node": ">=10.13.0"
+      }
+    },
+    "node_modules/globals": {
+      "version": "13.24.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
+      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "type-fest": "^0.20.2"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/globalthis": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
+      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "define-properties": "^1.2.1",
+        "gopd": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/gopd": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
+      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/graphemer": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
+      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/has-bigints": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
+      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has-flag": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/has-property-descriptors": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
+      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-define-property": "^1.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has-proto": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.2.0.tgz",
+      "integrity": "sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "dunder-proto": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has-symbols": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
+      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has-tostringtag": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
+      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "has-symbols": "^1.0.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/hasown": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
+      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
+      "license": "MIT",
+      "dependencies": {
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/ignore": {
+      "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
+      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 4"
+      }
+    },
+    "node_modules/import-fresh": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
+      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "parent-module": "^1.0.0",
+        "resolve-from": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/imurmurhash": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
+      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8.19"
+      }
+    },
+    "node_modules/inflight": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
+      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
+      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "once": "^1.3.0",
+        "wrappy": "1"
+      }
+    },
+    "node_modules/inherits": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/internal-slot": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
+      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "hasown": "^2.0.2",
+        "side-channel": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/is-array-buffer": {
+      "version": "3.0.5",
+      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
+      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.3",
+        "get-intrinsic": "^1.2.6"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-arrayish": {
+      "version": "0.3.2",
+      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
+      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==",
+      "license": "MIT",
+      "optional": true
+    },
+    "node_modules/is-async-function": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.1.1.tgz",
+      "integrity": "sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "async-function": "^1.0.0",
+        "call-bound": "^1.0.3",
+        "get-proto": "^1.0.1",
+        "has-tostringtag": "^1.0.2",
+        "safe-regex-test": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-bigint": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
+      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "has-bigints": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-binary-path": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
+      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
+      "license": "MIT",
+      "dependencies": {
+        "binary-extensions": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/is-boolean-object": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
+      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-bun-module": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/is-bun-module/-/is-bun-module-2.0.0.tgz",
+      "integrity": "sha512-gNCGbnnnnFAUGKeZ9PdbyeGYJqewpmc2aKHUEMO5nQPWU9lOmv7jcmQIv+qHD8fXW6W7qfuCwX4rY9LNRjXrkQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "semver": "^7.7.1"
+      }
+    },
+    "node_modules/is-callable": {
+      "version": "1.2.7",
+      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
+      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-core-module": {
+      "version": "2.16.1",
+      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
+      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
+      "license": "MIT",
+      "dependencies": {
+        "hasown": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-data-view": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.2.tgz",
+      "integrity": "sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "get-intrinsic": "^1.2.6",
+        "is-typed-array": "^1.1.13"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-date-object": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
+      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-extglob": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
+      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/is-finalizationregistry": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.1.1.tgz",
+      "integrity": "sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-fullwidth-code-point": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
+      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/is-generator-function": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.1.0.tgz",
+      "integrity": "sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "get-proto": "^1.0.0",
+        "has-tostringtag": "^1.0.2",
+        "safe-regex-test": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-glob": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
+      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
+      "license": "MIT",
+      "dependencies": {
+        "is-extglob": "^2.1.1"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/is-map": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
+      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-negative-zero": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
+      "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-number": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
+      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.12.0"
+      }
+    },
+    "node_modules/is-number-object": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
+      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-path-inside": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
+      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/is-regex": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
+      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "gopd": "^1.2.0",
+        "has-tostringtag": "^1.0.2",
+        "hasown": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-set": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
+      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-shared-array-buffer": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
+      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-string": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
+      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-symbol": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
+      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "has-symbols": "^1.1.0",
+        "safe-regex-test": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-typed-array": {
+      "version": "1.1.15",
+      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.15.tgz",
+      "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "which-typed-array": "^1.1.16"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-weakmap": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
+      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-weakref": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.1.1.tgz",
+      "integrity": "sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-weakset": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
+      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "get-intrinsic": "^1.2.6"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/isarray": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
+      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/isexe": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
+      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
+      "license": "ISC"
+    },
+    "node_modules/iterator.prototype": {
+      "version": "1.1.5",
+      "resolved": "https://registry.npmjs.org/iterator.prototype/-/iterator.prototype-1.1.5.tgz",
+      "integrity": "sha512-H0dkQoCa3b2VEeKQBOxFph+JAbcrQdE7KC0UkqwpLmv2EC4P41QXP+rqo9wYodACiG5/WM5s9oDApTU8utwj9g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "define-data-property": "^1.1.4",
+        "es-object-atoms": "^1.0.0",
+        "get-intrinsic": "^1.2.6",
+        "get-proto": "^1.0.0",
+        "has-symbols": "^1.1.0",
+        "set-function-name": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/jackspeak": {
+      "version": "3.4.3",
+      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
+      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
+      "license": "BlueOak-1.0.0",
+      "dependencies": {
+        "@isaacs/cliui": "^8.0.2"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      },
+      "optionalDependencies": {
+        "@pkgjs/parseargs": "^0.11.0"
+      }
+    },
+    "node_modules/jiti": {
+      "version": "1.21.7",
+      "resolved": "https://registry.npmjs.org/jiti/-/jiti-1.21.7.tgz",
+      "integrity": "sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==",
+      "license": "MIT",
+      "bin": {
+        "jiti": "bin/jiti.js"
+      }
+    },
+    "node_modules/js-tokens": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
+      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/js-yaml": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
+      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "argparse": "^2.0.1"
+      },
+      "bin": {
+        "js-yaml": "bin/js-yaml.js"
+      }
+    },
+    "node_modules/json-buffer": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
+      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/json-schema-traverse": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
+      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/json-stable-stringify-without-jsonify": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
+      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/json5": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/json5/-/json5-1.0.2.tgz",
+      "integrity": "sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "minimist": "^1.2.0"
+      },
+      "bin": {
+        "json5": "lib/cli.js"
+      }
+    },
+    "node_modules/jsx-ast-utils": {
+      "version": "3.3.5",
+      "resolved": "https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-3.3.5.tgz",
+      "integrity": "sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "array-includes": "^3.1.6",
+        "array.prototype.flat": "^1.3.1",
+        "object.assign": "^4.1.4",
+        "object.values": "^1.1.6"
+      },
+      "engines": {
+        "node": ">=4.0"
+      }
+    },
+    "node_modules/keyv": {
+      "version": "4.5.4",
+      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
+      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "json-buffer": "3.0.1"
+      }
+    },
+    "node_modules/language-subtag-registry": {
+      "version": "0.3.23",
+      "resolved": "https://registry.npmjs.org/language-subtag-registry/-/language-subtag-registry-0.3.23.tgz",
+      "integrity": "sha512-0K65Lea881pHotoGEa5gDlMxt3pctLi2RplBb7Ezh4rRdLEOtgi7n4EwK9lamnUCkKBqaeKRVebTq6BAxSkpXQ==",
+      "dev": true,
+      "license": "CC0-1.0"
+    },
+    "node_modules/language-tags": {
+      "version": "1.0.9",
+      "resolved": "https://registry.npmjs.org/language-tags/-/language-tags-1.0.9.tgz",
+      "integrity": "sha512-MbjN408fEndfiQXbFQ1vnd+1NoLDsnQW41410oQBXiyXDMYH5z505juWa4KUE1LqxRC7DgOgZDbKLxHIwm27hA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "language-subtag-registry": "^0.3.20"
+      },
+      "engines": {
+        "node": ">=0.10"
+      }
+    },
+    "node_modules/levn": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
+      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "prelude-ls": "^1.2.1",
+        "type-check": "~0.4.0"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/lilconfig": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.3.tgz",
+      "integrity": "sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/antonk52"
+      }
+    },
+    "node_modules/lines-and-columns": {
+      "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
+      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
+      "license": "MIT"
+    },
+    "node_modules/locate-path": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
+      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "p-locate": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/lodash.merge": {
+      "version": "4.6.2",
+      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
+      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/loose-envify": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
+      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "js-tokens": "^3.0.0 || ^4.0.0"
+      },
+      "bin": {
+        "loose-envify": "cli.js"
+      }
+    },
+    "node_modules/lru-cache": {
+      "version": "10.4.3",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
+      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
+      "license": "ISC"
+    },
+    "node_modules/lucide-react": {
+      "version": "0.446.0",
+      "resolved": "https://registry.npmjs.org/lucide-react/-/lucide-react-0.446.0.tgz",
+      "integrity": "sha512-BU7gy8MfBMqvEdDPH79VhOXSEgyG8TSPOKWaExWGCQVqnGH7wGgDngPbofu+KdtVjPQBWbEmnfMTq90CTiiDRg==",
+      "license": "ISC",
+      "peerDependencies": {
+        "react": "^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0-rc"
+      }
+    },
+    "node_modules/math-intrinsics": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
+      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/merge2": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
+      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/micromatch": {
+      "version": "4.0.8",
+      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
+      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
+      "license": "MIT",
+      "dependencies": {
+        "braces": "^3.0.3",
+        "picomatch": "^2.3.1"
+      },
+      "engines": {
+        "node": ">=8.6"
+      }
+    },
+    "node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/minimist": {
+      "version": "1.2.8",
+      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
+      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
+      "dev": true,
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/minipass": {
+      "version": "7.1.2",
+      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
+      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
+    "node_modules/motion-dom": {
+      "version": "11.18.1",
+      "resolved": "https://registry.npmjs.org/motion-dom/-/motion-dom-11.18.1.tgz",
+      "integrity": "sha512-g76KvA001z+atjfxczdRtw/RXOM3OMSdd1f4DL77qCTF/+avrRJiawSG4yDibEQ215sr9kpinSlX2pCTJ9zbhw==",
+      "license": "MIT",
+      "dependencies": {
+        "motion-utils": "^11.18.1"
+      }
+    },
+    "node_modules/motion-utils": {
+      "version": "11.18.1",
+      "resolved": "https://registry.npmjs.org/motion-utils/-/motion-utils-11.18.1.tgz",
+      "integrity": "sha512-49Kt+HKjtbJKLtgO/LKj9Ld+6vw9BjH5d9sc40R/kVyH8GLAXgT42M2NnuPcJNuA3s9ZfZBUcwIgpmZWGEE+hA==",
+      "license": "MIT"
+    },
+    "node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/mz": {
+      "version": "2.7.0",
+      "resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
+      "integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
+      "license": "MIT",
+      "dependencies": {
+        "any-promise": "^1.0.0",
+        "object-assign": "^4.0.1",
+        "thenify-all": "^1.0.0"
+      }
+    },
+    "node_modules/nanoid": {
+      "version": "3.3.11",
+      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
+      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "bin": {
+        "nanoid": "bin/nanoid.cjs"
+      },
+      "engines": {
+        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
+      }
+    },
+    "node_modules/napi-postinstall": {
+      "version": "0.3.2",
+      "resolved": "https://registry.npmjs.org/napi-postinstall/-/napi-postinstall-0.3.2.tgz",
+      "integrity": "sha512-tWVJxJHmBWLy69PvO96TZMZDrzmw5KeiZBz3RHmiM2XZ9grBJ2WgMAFVVg25nqp3ZjTFUs2Ftw1JhscL3Teliw==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "napi-postinstall": "lib/cli.js"
+      },
+      "engines": {
+        "node": "^12.20.0 || ^14.18.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/napi-postinstall"
+      }
+    },
+    "node_modules/natural-compare": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
+      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/next": {
+      "version": "15.3.0-canary.31",
+      "resolved": "https://registry.npmjs.org/next/-/next-15.3.0-canary.31.tgz",
+      "integrity": "sha512-rG+ydC7BHLRRasoZSRf4KYBsKNWsUcOgDCdNCs9CC0706e91L9TDHUOzTh0foULHMuiwaFlGBkbBgdQvB9mtfQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@next/env": "15.3.0-canary.31",
+        "@swc/counter": "0.1.3",
+        "@swc/helpers": "0.5.15",
+        "busboy": "1.6.0",
+        "caniuse-lite": "^1.0.30001579",
+        "postcss": "8.4.31",
+        "styled-jsx": "5.1.6"
+      },
+      "bin": {
+        "next": "dist/bin/next"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^19.8.0 || >= 20.0.0"
+      },
+      "optionalDependencies": {
+        "@next/swc-darwin-arm64": "15.3.0-canary.31",
+        "@next/swc-darwin-x64": "15.3.0-canary.31",
+        "@next/swc-linux-arm64-gnu": "15.3.0-canary.31",
+        "@next/swc-linux-arm64-musl": "15.3.0-canary.31",
+        "@next/swc-linux-x64-gnu": "15.3.0-canary.31",
+        "@next/swc-linux-x64-musl": "15.3.0-canary.31",
+        "@next/swc-win32-arm64-msvc": "15.3.0-canary.31",
+        "@next/swc-win32-x64-msvc": "15.3.0-canary.31",
+        "sharp": "^0.33.5"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.1.0",
+        "@playwright/test": "^1.51.1",
+        "babel-plugin-react-compiler": "*",
+        "react": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
+        "react-dom": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
+        "sass": "^1.3.0"
+      },
+      "peerDependenciesMeta": {
+        "@opentelemetry/api": {
+          "optional": true
+        },
+        "@playwright/test": {
+          "optional": true
+        },
+        "babel-plugin-react-compiler": {
+          "optional": true
+        },
+        "sass": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/next-themes": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/next-themes/-/next-themes-0.3.0.tgz",
+      "integrity": "sha512-/QHIrsYpd6Kfk7xakK4svpDI5mmXP0gfvCoJdGpZQ2TOrQZmsW0QxjaiLn8wbIKjtm4BTSqLoix4lxYYOnLJ/w==",
+      "license": "MIT",
+      "peerDependencies": {
+        "react": "^16.8 || ^17 || ^18",
+        "react-dom": "^16.8 || ^17 || ^18"
+      }
+    },
+    "node_modules/next/node_modules/postcss": {
+      "version": "8.4.31",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.31.tgz",
+      "integrity": "sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==",
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/postcss"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "nanoid": "^3.3.6",
+        "picocolors": "^1.0.0",
+        "source-map-js": "^1.0.2"
+      },
+      "engines": {
+        "node": "^10 || ^12 || >=14"
+      }
+    },
+    "node_modules/node-releases": {
+      "version": "2.0.19",
+      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
+      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/normalize-path": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
+      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/normalize-range": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
+      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/object-assign": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
+      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/object-hash": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
+      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/object-inspect": {
+      "version": "1.13.4",
+      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
+      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/object-keys": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
+      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/object.assign": {
+      "version": "4.1.7",
+      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
+      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.3",
+        "define-properties": "^1.2.1",
+        "es-object-atoms": "^1.0.0",
+        "has-symbols": "^1.1.0",
+        "object-keys": "^1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/object.entries": {
+      "version": "1.1.9",
+      "resolved": "https://registry.npmjs.org/object.entries/-/object.entries-1.1.9.tgz",
+      "integrity": "sha512-8u/hfXFRBD1O0hPUjioLhoWFHRmt6tKA4/vZPyckBr18l1KE9uHrFaFaUi8MDRTpi4uak2goyPTSNJLXX2k2Hw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.4",
+        "define-properties": "^1.2.1",
+        "es-object-atoms": "^1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/object.fromentries": {
+      "version": "2.0.8",
+      "resolved": "https://registry.npmjs.org/object.fromentries/-/object.fromentries-2.0.8.tgz",
+      "integrity": "sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.7",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.2",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/object.groupby": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/object.groupby/-/object.groupby-1.0.3.tgz",
+      "integrity": "sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.7",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/object.values": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/object.values/-/object.values-1.2.1.tgz",
+      "integrity": "sha512-gXah6aZrcUxjWg2zR2MwouP2eHlCBzdV4pygudehaKXSGW4v2AsRQUK+lwwXhii6KFZcunEnmSUoYp5CXibxtA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.3",
+        "define-properties": "^1.2.1",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/once": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
+      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "wrappy": "1"
+      }
+    },
+    "node_modules/optionator": {
+      "version": "0.9.4",
+      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
+      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "deep-is": "^0.1.3",
+        "fast-levenshtein": "^2.0.6",
+        "levn": "^0.4.1",
+        "prelude-ls": "^1.2.1",
+        "type-check": "^0.4.0",
+        "word-wrap": "^1.2.5"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/own-keys": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/own-keys/-/own-keys-1.0.1.tgz",
+      "integrity": "sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "get-intrinsic": "^1.2.6",
+        "object-keys": "^1.1.1",
+        "safe-push-apply": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/p-limit": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
+      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "yocto-queue": "^0.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/p-locate": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
+      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "p-limit": "^3.0.2"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/package-json-from-dist": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
+      "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
+      "license": "BlueOak-1.0.0"
+    },
+    "node_modules/parent-module": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
+      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "callsites": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/path-exists": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
+      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/path-is-absolute": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
+      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/path-key": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
+      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/path-parse": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
+      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
+      "license": "MIT"
+    },
+    "node_modules/path-scurry": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
+      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
+      "license": "BlueOak-1.0.0",
+      "dependencies": {
+        "lru-cache": "^10.2.0",
+        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/picocolors": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
+      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
+      "license": "ISC"
+    },
+    "node_modules/picomatch": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
+      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
+    "node_modules/pify": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
+      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/pirates": {
+      "version": "4.0.7",
+      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.7.tgz",
+      "integrity": "sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/possible-typed-array-names": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
+      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/postcss": {
+      "version": "8.5.6",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
+      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/postcss"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "nanoid": "^3.3.11",
+        "picocolors": "^1.1.1",
+        "source-map-js": "^1.2.1"
+      },
+      "engines": {
+        "node": "^10 || ^12 || >=14"
+      }
+    },
+    "node_modules/postcss-import": {
+      "version": "15.1.0",
+      "resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-15.1.0.tgz",
+      "integrity": "sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==",
+      "license": "MIT",
+      "dependencies": {
+        "postcss-value-parser": "^4.0.0",
+        "read-cache": "^1.0.0",
+        "resolve": "^1.1.7"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      },
+      "peerDependencies": {
+        "postcss": "^8.0.0"
+      }
+    },
+    "node_modules/postcss-js": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.1.tgz",
+      "integrity": "sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==",
+      "license": "MIT",
+      "dependencies": {
+        "camelcase-css": "^2.0.1"
+      },
+      "engines": {
+        "node": "^12 || ^14 || >= 16"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/postcss/"
+      },
+      "peerDependencies": {
+        "postcss": "^8.4.21"
+      }
+    },
+    "node_modules/postcss-load-config": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-4.0.2.tgz",
+      "integrity": "sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==",
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "lilconfig": "^3.0.0",
+        "yaml": "^2.3.4"
+      },
+      "engines": {
+        "node": ">= 14"
+      },
+      "peerDependencies": {
+        "postcss": ">=8.0.9",
+        "ts-node": ">=9.0.0"
+      },
+      "peerDependenciesMeta": {
+        "postcss": {
+          "optional": true
+        },
+        "ts-node": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/postcss-nested": {
+      "version": "6.2.0",
+      "resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-6.2.0.tgz",
+      "integrity": "sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==",
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "postcss-selector-parser": "^6.1.1"
+      },
+      "engines": {
+        "node": ">=12.0"
+      },
+      "peerDependencies": {
+        "postcss": "^8.2.14"
+      }
+    },
+    "node_modules/postcss-selector-parser": {
+      "version": "6.1.2",
+      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
+      "integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
+      "license": "MIT",
+      "dependencies": {
+        "cssesc": "^3.0.0",
+        "util-deprecate": "^1.0.2"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/postcss-value-parser": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
+      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
+      "license": "MIT"
+    },
+    "node_modules/prelude-ls": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
+      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/prop-types": {
+      "version": "15.8.1",
+      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
+      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "loose-envify": "^1.4.0",
+        "object-assign": "^4.1.1",
+        "react-is": "^16.13.1"
+      }
+    },
+    "node_modules/punycode": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
+      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/queue-microtask": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
+      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT"
+    },
+    "node_modules/react": {
+      "version": "19.0.0-rc-45804af1-20241021",
+      "resolved": "https://registry.npmjs.org/react/-/react-19.0.0-rc-45804af1-20241021.tgz",
+      "integrity": "sha512-RYkYXmX7Iia56DQJaNK0Ribh5uF/sDBNirtNNHNNqqa3wpIlcFOkRvPTW3RSwAXmBVnEZlKbeaMhlBT9p52lqA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/react-dom": {
+      "version": "19.0.0-rc-45804af1-20241021",
+      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.0.0-rc-45804af1-20241021.tgz",
+      "integrity": "sha512-8hOckEFO7Vxo+nH/EEddIGdencOFT0/3iJqF3mKrqv71n1xxhYcp0595JbT/DP31G8bHfDcBSMWVhIvyCGWy/A==",
+      "license": "MIT",
+      "dependencies": {
+        "scheduler": "0.25.0-rc-45804af1-20241021"
+      },
+      "peerDependencies": {
+        "react": "19.0.0-rc-45804af1-20241021"
+      }
+    },
+    "node_modules/react-is": {
+      "version": "16.13.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/read-cache": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
+      "integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
+      "license": "MIT",
+      "dependencies": {
+        "pify": "^2.3.0"
+      }
+    },
+    "node_modules/readdirp": {
+      "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
+      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
+      "license": "MIT",
+      "dependencies": {
+        "picomatch": "^2.2.1"
+      },
+      "engines": {
+        "node": ">=8.10.0"
+      }
+    },
+    "node_modules/reflect.getprototypeof": {
+      "version": "1.0.10",
+      "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
+      "integrity": "sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.9",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.0.0",
+        "get-intrinsic": "^1.2.7",
+        "get-proto": "^1.0.1",
+        "which-builtin-type": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/regexp.prototype.flags": {
+      "version": "1.5.4",
+      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
+      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "define-properties": "^1.2.1",
+        "es-errors": "^1.3.0",
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "set-function-name": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/resolve": {
+      "version": "1.22.10",
+      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
+      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
+      "license": "MIT",
+      "dependencies": {
+        "is-core-module": "^2.16.0",
+        "path-parse": "^1.0.7",
+        "supports-preserve-symlinks-flag": "^1.0.0"
+      },
+      "bin": {
+        "resolve": "bin/resolve"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/resolve-from": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
+      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/resolve-pkg-maps": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-pkg-maps/-/resolve-pkg-maps-1.0.0.tgz",
+      "integrity": "sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==",
+      "dev": true,
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/privatenumber/resolve-pkg-maps?sponsor=1"
+      }
+    },
+    "node_modules/reusify": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
+      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
+      "license": "MIT",
+      "engines": {
+        "iojs": ">=1.0.0",
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/rimraf": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
+      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
+      "deprecated": "Rimraf versions prior to v4 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "glob": "^7.1.3"
+      },
+      "bin": {
+        "rimraf": "bin.js"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/run-parallel": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
+      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "queue-microtask": "^1.2.2"
+      }
+    },
+    "node_modules/safe-array-concat": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.3.tgz",
+      "integrity": "sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.2",
+        "get-intrinsic": "^1.2.6",
+        "has-symbols": "^1.1.0",
+        "isarray": "^2.0.5"
+      },
+      "engines": {
+        "node": ">=0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/safe-push-apply": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/safe-push-apply/-/safe-push-apply-1.0.0.tgz",
+      "integrity": "sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "isarray": "^2.0.5"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/safe-regex-test": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
+      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "is-regex": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/scheduler": {
+      "version": "0.25.0-rc-45804af1-20241021",
+      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.25.0-rc-45804af1-20241021.tgz",
+      "integrity": "sha512-8jyu/iy3tGFNakMMCWnKw/vsiTcapDyl0LKlZ3fUKBcBicZAkrrCC1bdqVFx0Ioxgry1SzOrCGcZLM7vtWK00A==",
+      "license": "MIT"
+    },
+    "node_modules/semver": {
+      "version": "7.7.2",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
+      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
+      "devOptional": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/set-function-length": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
+      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "define-data-property": "^1.1.4",
+        "es-errors": "^1.3.0",
+        "function-bind": "^1.1.2",
+        "get-intrinsic": "^1.2.4",
+        "gopd": "^1.0.1",
+        "has-property-descriptors": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/set-function-name": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
+      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "define-data-property": "^1.1.4",
+        "es-errors": "^1.3.0",
+        "functions-have-names": "^1.2.3",
+        "has-property-descriptors": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/set-proto": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/set-proto/-/set-proto-1.0.0.tgz",
+      "integrity": "sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "dunder-proto": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/sharp": {
+      "version": "0.33.5",
+      "resolved": "https://registry.npmjs.org/sharp/-/sharp-0.33.5.tgz",
+      "integrity": "sha512-haPVm1EkS9pgvHrQ/F3Xy+hgcuMV0Wm9vfIBSiwZ05k+xgb0PkBQpGsAA/oWdDobNaZTH5ppvHtzCFbnSEwHVw==",
+      "hasInstallScript": true,
+      "license": "Apache-2.0",
+      "optional": true,
+      "dependencies": {
+        "color": "^4.2.3",
+        "detect-libc": "^2.0.3",
+        "semver": "^7.6.3"
+      },
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-darwin-arm64": "0.33.5",
+        "@img/sharp-darwin-x64": "0.33.5",
+        "@img/sharp-libvips-darwin-arm64": "1.0.4",
+        "@img/sharp-libvips-darwin-x64": "1.0.4",
+        "@img/sharp-libvips-linux-arm": "1.0.5",
+        "@img/sharp-libvips-linux-arm64": "1.0.4",
+        "@img/sharp-libvips-linux-s390x": "1.0.4",
+        "@img/sharp-libvips-linux-x64": "1.0.4",
+        "@img/sharp-libvips-linuxmusl-arm64": "1.0.4",
+        "@img/sharp-libvips-linuxmusl-x64": "1.0.4",
+        "@img/sharp-linux-arm": "0.33.5",
+        "@img/sharp-linux-arm64": "0.33.5",
+        "@img/sharp-linux-s390x": "0.33.5",
+        "@img/sharp-linux-x64": "0.33.5",
+        "@img/sharp-linuxmusl-arm64": "0.33.5",
+        "@img/sharp-linuxmusl-x64": "0.33.5",
+        "@img/sharp-wasm32": "0.33.5",
+        "@img/sharp-win32-ia32": "0.33.5",
+        "@img/sharp-win32-x64": "0.33.5"
+      }
+    },
+    "node_modules/shebang-command": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
+      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
+      "license": "MIT",
+      "dependencies": {
+        "shebang-regex": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/shebang-regex": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
+      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/side-channel": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
+      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "object-inspect": "^1.13.3",
+        "side-channel-list": "^1.0.0",
+        "side-channel-map": "^1.0.1",
+        "side-channel-weakmap": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-list": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
+      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "object-inspect": "^1.13.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-map": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
+      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-weakmap": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
+      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3",
+        "side-channel-map": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/signal-exit": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
+      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/simple-swizzle": {
+      "version": "0.2.2",
+      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
+      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "is-arrayish": "^0.3.1"
+      }
+    },
+    "node_modules/sonner": {
+      "version": "1.7.4",
+      "resolved": "https://registry.npmjs.org/sonner/-/sonner-1.7.4.tgz",
+      "integrity": "sha512-DIS8z4PfJRbIyfVFDVnK9rO3eYDtse4Omcm6bt0oEr5/jtLgysmjuBl1frJ9E/EQZrFmKx2A8m/s5s9CRXIzhw==",
+      "license": "MIT",
+      "peerDependencies": {
+        "react": "^18.0.0 || ^19.0.0 || ^19.0.0-rc",
+        "react-dom": "^18.0.0 || ^19.0.0 || ^19.0.0-rc"
+      }
+    },
+    "node_modules/source-map-js": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
+      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/stable-hash": {
+      "version": "0.0.5",
+      "resolved": "https://registry.npmjs.org/stable-hash/-/stable-hash-0.0.5.tgz",
+      "integrity": "sha512-+L3ccpzibovGXFK+Ap/f8LOS0ahMrHTf3xu7mMLSpEGU0EO9ucaysSylKo9eRDFNhWve/y275iPmIZ4z39a9iA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/stop-iteration-iterator": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
+      "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "internal-slot": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/streamsearch": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
+      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
+      "engines": {
+        "node": ">=10.0.0"
+      }
+    },
+    "node_modules/string-width": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
+      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
+      "license": "MIT",
+      "dependencies": {
+        "eastasianwidth": "^0.2.0",
+        "emoji-regex": "^9.2.2",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/string-width-cjs": {
+      "name": "string-width",
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
+      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "license": "MIT",
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/string-width-cjs/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "license": "MIT"
+    },
+    "node_modules/string-width/node_modules/ansi-regex": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
+      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
+      }
+    },
+    "node_modules/string-width/node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
+      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
+      }
+    },
+    "node_modules/string.prototype.includes": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/string.prototype.includes/-/string.prototype.includes-2.0.1.tgz",
+      "integrity": "sha512-o7+c9bW6zpAdJHTtujeePODAhkuicdAryFsfVKwA+wGw89wJ4GTY484WTucM9hLtDEOpOvI+aHnzqnC5lHp4Rg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.7",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/string.prototype.matchall": {
+      "version": "4.0.12",
+      "resolved": "https://registry.npmjs.org/string.prototype.matchall/-/string.prototype.matchall-4.0.12.tgz",
+      "integrity": "sha512-6CC9uyBL+/48dYizRf7H7VAYCMCNTBeM78x/VTUe9bFEaxBepPJDa1Ow99LqI/1yF7kuy7Q3cQsYMrcjGUcskA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.3",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.6",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.0.0",
+        "get-intrinsic": "^1.2.6",
+        "gopd": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "internal-slot": "^1.1.0",
+        "regexp.prototype.flags": "^1.5.3",
+        "set-function-name": "^2.0.2",
+        "side-channel": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/string.prototype.repeat": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/string.prototype.repeat/-/string.prototype.repeat-1.0.0.tgz",
+      "integrity": "sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "define-properties": "^1.1.3",
+        "es-abstract": "^1.17.5"
+      }
+    },
+    "node_modules/string.prototype.trim": {
+      "version": "1.2.10",
+      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.10.tgz",
+      "integrity": "sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.2",
+        "define-data-property": "^1.1.4",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.5",
+        "es-object-atoms": "^1.0.0",
+        "has-property-descriptors": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/string.prototype.trimend": {
+      "version": "1.0.9",
+      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.9.tgz",
+      "integrity": "sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.2",
+        "define-properties": "^1.2.1",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/string.prototype.trimstart": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
+      "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.7",
+        "define-properties": "^1.2.1",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-ansi-cjs": {
+      "name": "strip-ansi",
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-bom": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
+      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/strip-json-comments": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
+      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/styled-jsx": {
+      "version": "5.1.6",
+      "resolved": "https://registry.npmjs.org/styled-jsx/-/styled-jsx-5.1.6.tgz",
+      "integrity": "sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==",
+      "license": "MIT",
+      "dependencies": {
+        "client-only": "0.0.1"
+      },
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "peerDependencies": {
+        "react": ">= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0"
+      },
+      "peerDependenciesMeta": {
+        "@babel/core": {
+          "optional": true
+        },
+        "babel-plugin-macros": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/sucrase": {
+      "version": "3.35.0",
+      "resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
+      "integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/gen-mapping": "^0.3.2",
+        "commander": "^4.0.0",
+        "glob": "^10.3.10",
+        "lines-and-columns": "^1.1.6",
+        "mz": "^2.7.0",
+        "pirates": "^4.0.1",
+        "ts-interface-checker": "^0.1.9"
+      },
+      "bin": {
+        "sucrase": "bin/sucrase",
+        "sucrase-node": "bin/sucrase-node"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
+    "node_modules/sucrase/node_modules/brace-expansion": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
+      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0"
+      }
+    },
+    "node_modules/sucrase/node_modules/glob": {
+      "version": "10.4.5",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
+      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
+      "license": "ISC",
+      "dependencies": {
+        "foreground-child": "^3.1.0",
+        "jackspeak": "^3.1.2",
+        "minimatch": "^9.0.4",
+        "minipass": "^7.1.2",
+        "package-json-from-dist": "^1.0.0",
+        "path-scurry": "^1.11.1"
+      },
+      "bin": {
+        "glob": "dist/esm/bin.mjs"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/sucrase/node_modules/minimatch": {
+      "version": "9.0.5",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
+      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/supports-color": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "has-flag": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/supports-preserve-symlinks-flag": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
+      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/tailwind-merge": {
+      "version": "2.6.0",
+      "resolved": "https://registry.npmjs.org/tailwind-merge/-/tailwind-merge-2.6.0.tgz",
+      "integrity": "sha512-P+Vu1qXfzediirmHOC3xKGAYeZtPcV9g76X+xg2FD4tYgR71ewMA35Y3sCz3zhiN/dwefRpJX0yBcgwi1fXNQA==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/dcastil"
+      }
+    },
+    "node_modules/tailwindcss": {
+      "version": "3.4.17",
+      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.4.17.tgz",
+      "integrity": "sha512-w33E2aCvSDP0tW9RZuNXadXlkHXqFzSkQew/aIa2i/Sj8fThxwovwlXHSPXTbAHwEIhBFXAedUhP2tueAKP8Og==",
+      "license": "MIT",
+      "dependencies": {
+        "@alloc/quick-lru": "^5.2.0",
+        "arg": "^5.0.2",
+        "chokidar": "^3.6.0",
+        "didyoumean": "^1.2.2",
+        "dlv": "^1.1.3",
+        "fast-glob": "^3.3.2",
+        "glob-parent": "^6.0.2",
+        "is-glob": "^4.0.3",
+        "jiti": "^1.21.6",
+        "lilconfig": "^3.1.3",
+        "micromatch": "^4.0.8",
+        "normalize-path": "^3.0.0",
+        "object-hash": "^3.0.0",
+        "picocolors": "^1.1.1",
+        "postcss": "^8.4.47",
+        "postcss-import": "^15.1.0",
+        "postcss-js": "^4.0.1",
+        "postcss-load-config": "^4.0.2",
+        "postcss-nested": "^6.2.0",
+        "postcss-selector-parser": "^6.1.2",
+        "resolve": "^1.22.8",
+        "sucrase": "^3.35.0"
+      },
+      "bin": {
+        "tailwind": "lib/cli.js",
+        "tailwindcss": "lib/cli.js"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
+    "node_modules/tailwindcss-animate": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/tailwindcss-animate/-/tailwindcss-animate-1.0.7.tgz",
+      "integrity": "sha512-bl6mpH3T7I3UFxuvDEXLxy/VuFxBk5bbzplh7tXI68mwMokNYd1t9qPBHlnyTwfa4JGC4zP516I1hYYtQ/vspA==",
+      "license": "MIT",
+      "peerDependencies": {
+        "tailwindcss": ">=3.0.0 || insiders"
+      }
+    },
+    "node_modules/tailwindcss/node_modules/fast-glob": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
+      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.stat": "^2.0.2",
+        "@nodelib/fs.walk": "^1.2.3",
+        "glob-parent": "^5.1.2",
+        "merge2": "^1.3.0",
+        "micromatch": "^4.0.8"
+      },
+      "engines": {
+        "node": ">=8.6.0"
+      }
+    },
+    "node_modules/tailwindcss/node_modules/fast-glob/node_modules/glob-parent": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/text-table": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
+      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/thenify": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
+      "integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
+      "license": "MIT",
+      "dependencies": {
+        "any-promise": "^1.0.0"
+      }
+    },
+    "node_modules/thenify-all": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
+      "integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
+      "license": "MIT",
+      "dependencies": {
+        "thenify": ">= 3.1.0 < 4"
+      },
+      "engines": {
+        "node": ">=0.8"
+      }
+    },
+    "node_modules/tinyglobby": {
+      "version": "0.2.14",
+      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.14.tgz",
+      "integrity": "sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fdir": "^6.4.4",
+        "picomatch": "^4.0.2"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/SuperchupuDev"
+      }
+    },
+    "node_modules/tinyglobby/node_modules/picomatch": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
+      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
+    "node_modules/to-regex-range": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
+      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
+      "license": "MIT",
+      "dependencies": {
+        "is-number": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=8.0"
+      }
+    },
+    "node_modules/ts-api-utils": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-2.1.0.tgz",
+      "integrity": "sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=18.12"
+      },
+      "peerDependencies": {
+        "typescript": ">=4.8.4"
+      }
+    },
+    "node_modules/ts-interface-checker": {
+      "version": "0.1.13",
+      "resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
+      "integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==",
+      "license": "Apache-2.0"
+    },
+    "node_modules/tsconfig-paths": {
+      "version": "3.15.0",
+      "resolved": "https://registry.npmjs.org/tsconfig-paths/-/tsconfig-paths-3.15.0.tgz",
+      "integrity": "sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/json5": "^0.0.29",
+        "json5": "^1.0.2",
+        "minimist": "^1.2.6",
+        "strip-bom": "^3.0.0"
+      }
+    },
+    "node_modules/tslib": {
+      "version": "2.8.1",
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
+      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
+      "license": "0BSD"
+    },
+    "node_modules/type-check": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
+      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "prelude-ls": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/type-fest": {
+      "version": "0.20.2",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
+      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
+      "dev": true,
+      "license": "(MIT OR CC0-1.0)",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/typed-array-buffer": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.3.tgz",
+      "integrity": "sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "es-errors": "^1.3.0",
+        "is-typed-array": "^1.1.14"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/typed-array-byte-length": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.3.tgz",
+      "integrity": "sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "for-each": "^0.3.3",
+        "gopd": "^1.2.0",
+        "has-proto": "^1.2.0",
+        "is-typed-array": "^1.1.14"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/typed-array-byte-offset": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.4.tgz",
+      "integrity": "sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "available-typed-arrays": "^1.0.7",
+        "call-bind": "^1.0.8",
+        "for-each": "^0.3.3",
+        "gopd": "^1.2.0",
+        "has-proto": "^1.2.0",
+        "is-typed-array": "^1.1.15",
+        "reflect.getprototypeof": "^1.0.9"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/typed-array-length": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.7.tgz",
+      "integrity": "sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.7",
+        "for-each": "^0.3.3",
+        "gopd": "^1.0.1",
+        "is-typed-array": "^1.1.13",
+        "possible-typed-array-names": "^1.0.0",
+        "reflect.getprototypeof": "^1.0.6"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/typescript": {
+      "version": "5.8.3",
+      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
+      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "bin": {
+        "tsc": "bin/tsc",
+        "tsserver": "bin/tsserver"
+      },
+      "engines": {
+        "node": ">=14.17"
+      }
+    },
+    "node_modules/unbox-primitive": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.1.0.tgz",
+      "integrity": "sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "has-bigints": "^1.0.2",
+        "has-symbols": "^1.1.0",
+        "which-boxed-primitive": "^1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/undici-types": {
+      "version": "5.26.5",
+      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
+      "integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/unrs-resolver": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/unrs-resolver/-/unrs-resolver-1.11.1.tgz",
+      "integrity": "sha512-bSjt9pjaEBnNiGgc9rUiHGKv5l4/TGzDmYw3RhnkJGtLhbnnA/5qJj7x3dNDCRx/PJxu774LlH8lCOlB4hEfKg==",
+      "dev": true,
+      "hasInstallScript": true,
+      "license": "MIT",
+      "dependencies": {
+        "napi-postinstall": "^0.3.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/unrs-resolver"
+      },
+      "optionalDependencies": {
+        "@unrs/resolver-binding-android-arm-eabi": "1.11.1",
+        "@unrs/resolver-binding-android-arm64": "1.11.1",
+        "@unrs/resolver-binding-darwin-arm64": "1.11.1",
+        "@unrs/resolver-binding-darwin-x64": "1.11.1",
+        "@unrs/resolver-binding-freebsd-x64": "1.11.1",
+        "@unrs/resolver-binding-linux-arm-gnueabihf": "1.11.1",
+        "@unrs/resolver-binding-linux-arm-musleabihf": "1.11.1",
+        "@unrs/resolver-binding-linux-arm64-gnu": "1.11.1",
+        "@unrs/resolver-binding-linux-arm64-musl": "1.11.1",
+        "@unrs/resolver-binding-linux-ppc64-gnu": "1.11.1",
+        "@unrs/resolver-binding-linux-riscv64-gnu": "1.11.1",
+        "@unrs/resolver-binding-linux-riscv64-musl": "1.11.1",
+        "@unrs/resolver-binding-linux-s390x-gnu": "1.11.1",
+        "@unrs/resolver-binding-linux-x64-gnu": "1.11.1",
+        "@unrs/resolver-binding-linux-x64-musl": "1.11.1",
+        "@unrs/resolver-binding-wasm32-wasi": "1.11.1",
+        "@unrs/resolver-binding-win32-arm64-msvc": "1.11.1",
+        "@unrs/resolver-binding-win32-ia32-msvc": "1.11.1",
+        "@unrs/resolver-binding-win32-x64-msvc": "1.11.1"
+      }
+    },
+    "node_modules/update-browserslist-db": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
+      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/browserslist"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "escalade": "^3.2.0",
+        "picocolors": "^1.1.1"
+      },
+      "bin": {
+        "update-browserslist-db": "cli.js"
+      },
+      "peerDependencies": {
+        "browserslist": ">= 4.21.0"
+      }
+    },
+    "node_modules/uri-js": {
+      "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
+      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "punycode": "^2.1.0"
+      }
+    },
+    "node_modules/util-deprecate": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
+      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
+      "license": "MIT"
+    },
+    "node_modules/which": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
+      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
+      "license": "ISC",
+      "dependencies": {
+        "isexe": "^2.0.0"
+      },
+      "bin": {
+        "node-which": "bin/node-which"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/which-boxed-primitive": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
+      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-bigint": "^1.1.0",
+        "is-boolean-object": "^1.2.1",
+        "is-number-object": "^1.1.1",
+        "is-string": "^1.1.1",
+        "is-symbol": "^1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/which-builtin-type": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.2.1.tgz",
+      "integrity": "sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "function.prototype.name": "^1.1.6",
+        "has-tostringtag": "^1.0.2",
+        "is-async-function": "^2.0.0",
+        "is-date-object": "^1.1.0",
+        "is-finalizationregistry": "^1.1.0",
+        "is-generator-function": "^1.0.10",
+        "is-regex": "^1.2.1",
+        "is-weakref": "^1.0.2",
+        "isarray": "^2.0.5",
+        "which-boxed-primitive": "^1.1.0",
+        "which-collection": "^1.0.2",
+        "which-typed-array": "^1.1.16"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/which-collection": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
+      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-map": "^2.0.3",
+        "is-set": "^2.0.3",
+        "is-weakmap": "^2.0.2",
+        "is-weakset": "^2.0.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/which-typed-array": {
+      "version": "1.1.19",
+      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
+      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "available-typed-arrays": "^1.0.7",
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.4",
+        "for-each": "^0.3.5",
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/word-wrap": {
+      "version": "1.2.5",
+      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
+      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/wrap-ansi": {
+      "version": "8.1.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
+      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^6.1.0",
+        "string-width": "^5.0.1",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/wrap-ansi-cjs": {
+      "name": "wrap-ansi",
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
+      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "license": "MIT"
+    },
+    "node_modules/wrap-ansi-cjs/node_modules/string-width": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
+      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "license": "MIT",
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/wrap-ansi/node_modules/ansi-regex": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
+      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
+      }
+    },
+    "node_modules/wrap-ansi/node_modules/ansi-styles": {
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
+      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/wrap-ansi/node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
+      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
+      }
+    },
+    "node_modules/wrappy": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
+      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/yaml": {
+      "version": "2.8.0",
+      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.8.0.tgz",
+      "integrity": "sha512-4lLa/EcQCB0cJkyts+FpIRx5G/llPxfP6VQU5KByHEhLxY3IJCH0f0Hy1MHI8sClTvsIb8qwRJ6R/ZdlDJ/leQ==",
+      "license": "ISC",
+      "bin": {
+        "yaml": "bin.mjs"
+      },
+      "engines": {
+        "node": ">= 14.6"
+      }
+    },
+    "node_modules/yocto-queue": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
+      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/zod": {
+      "version": "3.25.76",
+      "resolved": "https://registry.npmjs.org/zod/-/zod-3.25.76.tgz",
+      "integrity": "sha512-gzUt/qt81nXsFGKIFcC3YnfEAx5NkunCfnDlvuBSSFS02bcXu4Lmea0AFIUwbLWxWPx3d9p8S5QoaujKcNQxcQ==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/colinhacks"
+      }
+    }
+  }
+}
diff --git a/chrome/browser/resources/vibe/apps/chat2/package.json b/chrome/browser/resources/vibe/apps/chat2/package.json
new file mode 100644
index 0000000000..b8a9d3ddcd
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat2/package.json
@@ -0,0 +1,40 @@
+{
+  "name": "vibe-chat2",
+  "version": "1.0.0",
+  "private": true,
+  "scripts": {
+    "dev": "next dev",
+    "build": "node build.js",
+    "build:extension": "node build.js",
+    "start": "next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "@radix-ui/react-slot": "^1.2.3",
+    "class-variance-authority": "^0.7.1",
+    "clsx": "^2.1.1",
+    "date-fns": "^4.1.0",
+    "framer-motion": "^11.3.19",
+    "lucide-react": "^0.446.0",
+    "next": "15.3.0-canary.31",
+    "next-themes": "^0.3.0",
+    "react": "19.0.0-rc-45804af1-20241021",
+    "react-dom": "19.0.0-rc-45804af1-20241021",
+    "sonner": "^1.5.0",
+    "tailwind-merge": "^2.5.4",
+    "tailwindcss": "^3.4.1",
+    "tailwindcss-animate": "^1.0.7",
+    "zod": "^3.23.8"
+  },
+  "devDependencies": {
+    "@types/node": "^18",
+    "@types/react": "^18",
+    "@types/react-dom": "^18",
+    "autoprefixer": "^10.0.1",
+    "esbuild": "^0.19.0",
+    "eslint": "^8",
+    "eslint-config-next": "15.3.0-canary.31",
+    "postcss": "^8",
+    "typescript": "^5"
+  }
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat2/tailwind.config.ts b/chrome/browser/resources/vibe/apps/chat2/tailwind.config.ts
new file mode 100644
index 0000000000..92574c7e3f
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat2/tailwind.config.ts
@@ -0,0 +1,80 @@
+import type { Config } from 'tailwindcss';
+
+const config: Config = {
+  darkMode: ['class'],
+  content: [
+    './pages/**/*.{js,ts,jsx,tsx,mdx}',
+    './components/**/*.{js,ts,jsx,tsx,mdx}',
+    './app/**/*.{js,ts,jsx,tsx,mdx}',
+  ],
+  theme: {
+    extend: {
+      fontFamily: {
+        sans: ['var(--font-geist)'],
+        mono: ['var(--font-geist-mono)'],
+      },
+      screens: {
+        'toast-mobile': '600px',
+      },
+      borderRadius: {
+        lg: 'var(--radius)',
+        md: 'calc(var(--radius) - 2px)',
+        sm: 'calc(var(--radius) - 4px)',
+      },
+      colors: {
+        background: 'hsl(var(--background))',
+        foreground: 'hsl(var(--foreground))',
+        card: {
+          DEFAULT: 'hsl(var(--card))',
+          foreground: 'hsl(var(--card-foreground))',
+        },
+        popover: {
+          DEFAULT: 'hsl(var(--popover))',
+          foreground: 'hsl(var(--popover-foreground))',
+        },
+        primary: {
+          DEFAULT: 'hsl(var(--primary))',
+          foreground: 'hsl(var(--primary-foreground))',
+        },
+        secondary: {
+          DEFAULT: 'hsl(var(--secondary))',
+          foreground: 'hsl(var(--secondary-foreground))',
+        },
+        muted: {
+          DEFAULT: 'hsl(var(--muted))',
+          foreground: 'hsl(var(--muted-foreground))',
+        },
+        accent: {
+          DEFAULT: 'hsl(var(--accent))',
+          foreground: 'hsl(var(--accent-foreground))',
+        },
+        destructive: {
+          DEFAULT: 'hsl(var(--destructive))',
+          foreground: 'hsl(var(--destructive-foreground))',
+        },
+        border: 'hsl(var(--border))',
+        input: 'hsl(var(--input))',
+        ring: 'hsl(var(--ring))',
+        chart: {
+          '1': 'hsl(var(--chart-1))',
+          '2': 'hsl(var(--chart-2))',
+          '3': 'hsl(var(--chart-3))',
+          '4': 'hsl(var(--chart-4))',
+          '5': 'hsl(var(--chart-5))',
+        },
+        sidebar: {
+          DEFAULT: 'hsl(var(--sidebar-background))',
+          foreground: 'hsl(var(--sidebar-foreground))',
+          primary: 'hsl(var(--sidebar-primary))',
+          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
+          accent: 'hsl(var(--sidebar-accent))',
+          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
+          border: 'hsl(var(--sidebar-border))',
+          ring: 'hsl(var(--sidebar-ring))',
+        },
+      },
+    },
+  },
+  plugins: [require('tailwindcss-animate'), require('@tailwindcss/typography')],
+};
+export default config;
diff --git a/chrome/browser/resources/vibe/apps/chat3/build.js b/chrome/browser/resources/vibe/apps/chat3/build.js
new file mode 100644
index 0000000000..0baf960b0b
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/build.js
@@ -0,0 +1,116 @@
+#!/usr/bin/env node
+
+// Consolidated build script for chat3 app
+// Outputs extension-ready files directly using esbuild + Tailwind CSS
+
+import fs from 'fs';
+import path from 'path';
+import { execSync } from 'child_process';
+import { fileURLToPath } from 'url';
+
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = path.dirname(__filename);
+
+// Get output directory from environment variable or command line argument
+const outputDir = process.env.OUTPUT_DIRECTORY || process.argv[2];
+
+if (!outputDir) {
+  console.error('Usage: node build.js <output-directory> or set OUTPUT_DIRECTORY env var');
+  process.exit(1);
+}
+
+// Determine output location
+// If OUTPUT_DIRECTORY is provided (from main build), output directly to root
+// Otherwise, create chat3 subdirectory for standalone builds
+const chatOutputDir = process.env.OUTPUT_DIRECTORY ? outputDir : path.join(outputDir, 'chat3');
+fs.mkdirSync(chatOutputDir, { recursive: true });
+
+console.log('Building chat3 app with consolidated build script...');
+
+// Setup directories
+function setupDirectories() {
+  // Clean output directory
+  if (fs.existsSync(chatOutputDir)) {
+    fs.rmSync(chatOutputDir, { recursive: true, force: true });
+  }
+  fs.mkdirSync(chatOutputDir, { recursive: true });
+}
+
+// Build CSS with Tailwind
+function buildCSS() {
+  console.log('Building CSS...');
+  
+  const cssOutput = path.join(chatOutputDir, 'chat.css');
+  
+  try {
+    execSync(`npx tailwindcss -i ./src/index.css -o ${cssOutput} --minify`, {
+      cwd: __dirname,
+      stdio: 'inherit'
+    });
+    console.log('CSS build completed');
+  } catch (error) {
+    console.error('CSS build failed:', error.message);
+    process.exit(1);
+  }
+}
+
+// Build JavaScript with esbuild
+function buildJavaScript() {
+  console.log('Building JavaScript...');
+  
+  const jsOutput = path.join(chatOutputDir, 'chat.js');
+  
+  try {
+    execSync(`npx esbuild src/main.tsx --bundle --outfile=${jsOutput} --format=iife --platform=browser --target=es2020 --minify --jsx=automatic --loader:.tsx=tsx --loader:.ts=ts`, {
+      cwd: __dirname,
+      stdio: 'inherit'
+    });
+    console.log('JavaScript build completed');
+  } catch (error) {
+    console.error('JavaScript build failed:', error.message);
+    process.exit(1);
+  }
+}
+
+// Build HTML template
+function buildHTML() {
+  console.log('Building HTML...');
+  
+  const htmlTemplate = `<!doctype html>
+<html lang="en" class="dark">
+  <head>
+    <meta charset="UTF-8" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <title>Vibe Chat</title>
+    <link rel="stylesheet" href="./chat.css">
+  </head>
+  <body>
+    <div id="root"></div>
+    <script src="./chat.js"></script>
+  </body>
+</html>`;
+
+  const htmlOutput = path.join(chatOutputDir, 'chat.html');
+  fs.writeFileSync(htmlOutput, htmlTemplate);
+  console.log('HTML build completed');
+}
+
+// Main build function
+async function build() {
+  try {
+    setupDirectories();
+    buildCSS();
+    buildJavaScript();
+    buildHTML();
+    
+    console.log('Chat3 consolidated build completed successfully!');
+    console.log(`Output files: chat.html, chat.js, chat.css`);
+    console.log(`Location: ${chatOutputDir}`);
+  } catch (error) {
+    console.error('Build failed:', error);
+    process.exit(1);
+  }
+}
+
+// Run the build
+build();
diff --git a/chrome/browser/resources/vibe/apps/chat3/extension-build.js b/chrome/browser/resources/vibe/apps/chat3/extension-build.js
new file mode 100644
index 0000000000..36edf22b62
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/extension-build.js
@@ -0,0 +1,64 @@
+import fs from 'fs';
+import path from 'path';
+import { fileURLToPath } from 'url';
+
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = path.dirname(__filename);
+
+const distPath = path.join(__dirname, 'dist');
+const outputPath = process.env.OUTPUT_DIRECTORY || path.join(__dirname, '../../', process.argv[2] || 'dist');
+
+// Copy built files to output directory
+function copyBuildToOutput() {
+  const files = ['chat.html', 'chat.js', 'chat.css'];
+  
+  files.forEach(file => {
+    let srcFile;
+    if (file === 'chat.html') {
+      srcFile = path.join(distPath, 'index.html');
+    } else if (file === 'chat.css') {
+      srcFile = path.join(distPath, 'main.css');
+    } else {
+      srcFile = path.join(distPath, file);
+    }
+    const destFile = path.join(outputPath, 'chat3', file);
+    
+    if (fs.existsSync(srcFile)) {
+      // Ensure directory exists
+      const destDir = path.dirname(destFile);
+      if (!fs.existsSync(destDir)) {
+        fs.mkdirSync(destDir, { recursive: true });
+      }
+      
+      // Read file content
+      let content = fs.readFileSync(srcFile, 'utf8');
+      
+      // Fix paths in HTML
+      if (file === 'chat.html') {
+        content = content
+          .replace('/src/main.tsx', './chat.js')
+          .replace('<script type="module" src="./chat.js"></script>', '<script src="./chat.js"></script>')
+          .replace(/type="module"/g, '')
+          .replace('href="./main.css"', 'href="./chat.css"');
+          
+        // Add CSS link if not present
+        if (!content.includes('chat.css')) {
+          content = content.replace('</head>', '  <link rel="stylesheet" href="./chat.css">\n  </head>');
+        }
+      }
+      
+      // Remove source maps in production
+      if (file === 'chat.js' && process.env.NODE_ENV === 'production') {
+        content = content.replace(/\/\/# sourceMappingURL=.*/g, '');
+      }
+      
+      fs.writeFileSync(destFile, content);
+      console.log(`Copied ${file} to ${destFile}`);
+    }
+  });
+}
+
+// Main
+console.log('Building chat3 for Chrome extension...');
+copyBuildToOutput();
+console.log('Chat3 extension build complete!');
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/index.html b/chrome/browser/resources/vibe/apps/chat3/index.html
new file mode 100644
index 0000000000..c87c11821d
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/index.html
@@ -0,0 +1,12 @@
+<!doctype html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <title>Vibe Chat</title>
+  </head>
+  <body>
+    <div id="root"></div>
+    <script type="module" src="/src/main.tsx"></script>
+  </body>
+</html>
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/package-lock.json b/chrome/browser/resources/vibe/apps/chat3/package-lock.json
new file mode 100644
index 0000000000..17ba665f5f
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/package-lock.json
@@ -0,0 +1,5464 @@
+{
+  "name": "vibe-chat3",
+  "version": "0.0.1",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "vibe-chat3",
+      "version": "0.0.1",
+      "dependencies": {
+        "@radix-ui/react-collapsible": "^1.0.3",
+        "@radix-ui/react-scroll-area": "^1.0.5",
+        "@radix-ui/react-tooltip": "^1.0.7",
+        "clsx": "^2.0.0",
+        "lucide-react": "^0.294.0",
+        "react": "^18.2.0",
+        "react-dom": "^18.2.0",
+        "tailwind-merge": "^2.1.0"
+      },
+      "devDependencies": {
+        "@types/chrome": "^0.0.254",
+        "@types/react": "^18.2.43",
+        "@types/react-dom": "^18.2.17",
+        "@typescript-eslint/eslint-plugin": "^6.14.0",
+        "@typescript-eslint/parser": "^6.14.0",
+        "@vitejs/plugin-react": "^4.2.1",
+        "autoprefixer": "^10.4.16",
+        "esbuild": "^0.19.0",
+        "eslint": "^8.55.0",
+        "eslint-plugin-react-hooks": "^4.6.0",
+        "eslint-plugin-react-refresh": "^0.4.5",
+        "postcss": "^8.4.32",
+        "tailwindcss": "^3.3.0",
+        "typescript": "^5.2.2",
+        "vite": "^5.0.8"
+      }
+    },
+    "node_modules/@alloc/quick-lru": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
+      "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@ampproject/remapping": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
+      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@jridgewell/gen-mapping": "^0.3.5",
+        "@jridgewell/trace-mapping": "^0.3.24"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@babel/code-frame": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
+      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-validator-identifier": "^7.27.1",
+        "js-tokens": "^4.0.0",
+        "picocolors": "^1.1.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/compat-data": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
+      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/core": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.0.tgz",
+      "integrity": "sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@ampproject/remapping": "^2.2.0",
+        "@babel/code-frame": "^7.27.1",
+        "@babel/generator": "^7.28.0",
+        "@babel/helper-compilation-targets": "^7.27.2",
+        "@babel/helper-module-transforms": "^7.27.3",
+        "@babel/helpers": "^7.27.6",
+        "@babel/parser": "^7.28.0",
+        "@babel/template": "^7.27.2",
+        "@babel/traverse": "^7.28.0",
+        "@babel/types": "^7.28.0",
+        "convert-source-map": "^2.0.0",
+        "debug": "^4.1.0",
+        "gensync": "^1.0.0-beta.2",
+        "json5": "^2.2.3",
+        "semver": "^6.3.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/babel"
+      }
+    },
+    "node_modules/@babel/core/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
+    "node_modules/@babel/generator": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz",
+      "integrity": "sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/parser": "^7.28.0",
+        "@babel/types": "^7.28.0",
+        "@jridgewell/gen-mapping": "^0.3.12",
+        "@jridgewell/trace-mapping": "^0.3.28",
+        "jsesc": "^3.0.2"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-compilation-targets": {
+      "version": "7.27.2",
+      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
+      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/compat-data": "^7.27.2",
+        "@babel/helper-validator-option": "^7.27.1",
+        "browserslist": "^4.24.0",
+        "lru-cache": "^5.1.1",
+        "semver": "^6.3.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
+    "node_modules/@babel/helper-globals": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
+      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-module-imports": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
+      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/traverse": "^7.27.1",
+        "@babel/types": "^7.27.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-module-transforms": {
+      "version": "7.27.3",
+      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
+      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-module-imports": "^7.27.1",
+        "@babel/helper-validator-identifier": "^7.27.1",
+        "@babel/traverse": "^7.27.3"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0"
+      }
+    },
+    "node_modules/@babel/helper-plugin-utils": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
+      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-string-parser": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
+      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-validator-identifier": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
+      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-validator-option": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
+      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helpers": {
+      "version": "7.28.2",
+      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.2.tgz",
+      "integrity": "sha512-/V9771t+EgXz62aCcyofnQhGM8DQACbRhvzKFsXKC9QM+5MadF8ZmIm0crDMaz3+o0h0zXfJnd4EhbYbxsrcFw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/template": "^7.27.2",
+        "@babel/types": "^7.28.2"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/parser": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz",
+      "integrity": "sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/types": "^7.28.0"
+      },
+      "bin": {
+        "parser": "bin/babel-parser.js"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@babel/plugin-transform-react-jsx-self": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
+      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.27.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-transform-react-jsx-source": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
+      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.27.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/template": {
+      "version": "7.27.2",
+      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
+      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/code-frame": "^7.27.1",
+        "@babel/parser": "^7.27.2",
+        "@babel/types": "^7.27.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/traverse": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz",
+      "integrity": "sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/code-frame": "^7.27.1",
+        "@babel/generator": "^7.28.0",
+        "@babel/helper-globals": "^7.28.0",
+        "@babel/parser": "^7.28.0",
+        "@babel/template": "^7.27.2",
+        "@babel/types": "^7.28.0",
+        "debug": "^4.3.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/types": {
+      "version": "7.28.2",
+      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.2.tgz",
+      "integrity": "sha512-ruv7Ae4J5dUYULmeXw1gmb7rYRz57OWCPM57pHojnLq/3Z1CK2lNSLTCVjxVk1F/TZHwOZZrOWi0ur95BbLxNQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-string-parser": "^7.27.1",
+        "@babel/helper-validator-identifier": "^7.27.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@esbuild/aix-ppc64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.19.12.tgz",
+      "integrity": "sha512-bmoCYyWdEL3wDQIVbcyzRyeKLgk2WtWLTWz1ZIAZF/EGbNOwSA6ew3PftJ1PqMiOOGu0OyFMzG53L0zqIpPeNA==",
+      "cpu": [
+        "ppc64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "aix"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/android-arm": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.19.12.tgz",
+      "integrity": "sha512-qg/Lj1mu3CdQlDEEiWrlC4eaPZ1KztwGJ9B6J+/6G+/4ewxJg7gqj8eVYWvao1bXrqGiW2rsBZFSX3q2lcW05w==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/android-arm64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.19.12.tgz",
+      "integrity": "sha512-P0UVNGIienjZv3f5zq0DP3Nt2IE/3plFzuaS96vihvD0Hd6H/q4WXUGpCxD/E8YrSXfNyRPbpTq+T8ZQioSuPA==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/android-x64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.19.12.tgz",
+      "integrity": "sha512-3k7ZoUW6Q6YqhdhIaq/WZ7HwBpnFBlW905Fa4s4qWJyiNOgT1dOqDiVAQFwBH7gBRZr17gLrlFCRzF6jFh7Kew==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/darwin-arm64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.19.12.tgz",
+      "integrity": "sha512-B6IeSgZgtEzGC42jsI+YYu9Z3HKRxp8ZT3cqhvliEHovq8HSX2YX8lNocDn79gCKJXOSaEot9MVYky7AKjCs8g==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/darwin-x64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.19.12.tgz",
+      "integrity": "sha512-hKoVkKzFiToTgn+41qGhsUJXFlIjxI/jSYeZf3ugemDYZldIXIxhvwN6erJGlX4t5h417iFuheZ7l+YVn05N3A==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/freebsd-arm64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.19.12.tgz",
+      "integrity": "sha512-4aRvFIXmwAcDBw9AueDQ2YnGmz5L6obe5kmPT8Vd+/+x/JMVKCgdcRwH6APrbpNXsPz+K653Qg8HB/oXvXVukA==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/freebsd-x64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.19.12.tgz",
+      "integrity": "sha512-EYoXZ4d8xtBoVN7CEwWY2IN4ho76xjYXqSXMNccFSx2lgqOG/1TBPW0yPx1bJZk94qu3tX0fycJeeQsKovA8gg==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-arm": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.19.12.tgz",
+      "integrity": "sha512-J5jPms//KhSNv+LO1S1TX1UWp1ucM6N6XuL6ITdKWElCu8wXP72l9MM0zDTzzeikVyqFE6U8YAV9/tFyj0ti+w==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-arm64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.19.12.tgz",
+      "integrity": "sha512-EoTjyYyLuVPfdPLsGVVVC8a0p1BFFvtpQDB/YLEhaXyf/5bczaGeN15QkR+O4S5LeJ92Tqotve7i1jn35qwvdA==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-ia32": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.19.12.tgz",
+      "integrity": "sha512-Thsa42rrP1+UIGaWz47uydHSBOgTUnwBwNq59khgIwktK6x60Hivfbux9iNR0eHCHzOLjLMLfUMLCypBkZXMHA==",
+      "cpu": [
+        "ia32"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-loong64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.19.12.tgz",
+      "integrity": "sha512-LiXdXA0s3IqRRjm6rV6XaWATScKAXjI4R4LoDlvO7+yQqFdlr1Bax62sRwkVvRIrwXxvtYEHHI4dm50jAXkuAA==",
+      "cpu": [
+        "loong64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-mips64el": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.19.12.tgz",
+      "integrity": "sha512-fEnAuj5VGTanfJ07ff0gOA6IPsvrVHLVb6Lyd1g2/ed67oU1eFzL0r9WL7ZzscD+/N6i3dWumGE1Un4f7Amf+w==",
+      "cpu": [
+        "mips64el"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-ppc64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.19.12.tgz",
+      "integrity": "sha512-nYJA2/QPimDQOh1rKWedNOe3Gfc8PabU7HT3iXWtNUbRzXS9+vgB0Fjaqr//XNbd82mCxHzik2qotuI89cfixg==",
+      "cpu": [
+        "ppc64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-riscv64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.19.12.tgz",
+      "integrity": "sha512-2MueBrlPQCw5dVJJpQdUYgeqIzDQgw3QtiAHUC4RBz9FXPrskyyU3VI1hw7C0BSKB9OduwSJ79FTCqtGMWqJHg==",
+      "cpu": [
+        "riscv64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-s390x": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.19.12.tgz",
+      "integrity": "sha512-+Pil1Nv3Umes4m3AZKqA2anfhJiVmNCYkPchwFJNEJN5QxmTs1uzyy4TvmDrCRNT2ApwSari7ZIgrPeUx4UZDg==",
+      "cpu": [
+        "s390x"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-x64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.19.12.tgz",
+      "integrity": "sha512-B71g1QpxfwBvNrfyJdVDexenDIt1CiDN1TIXLbhOw0KhJzE78KIFGX6OJ9MrtC0oOqMWf+0xop4qEU8JrJTwCg==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/netbsd-x64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.19.12.tgz",
+      "integrity": "sha512-3ltjQ7n1owJgFbuC61Oj++XhtzmymoCihNFgT84UAmJnxJfm4sYCiSLTXZtE00VWYpPMYc+ZQmB6xbSdVh0JWA==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "netbsd"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/openbsd-x64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.19.12.tgz",
+      "integrity": "sha512-RbrfTB9SWsr0kWmb9srfF+L933uMDdu9BIzdA7os2t0TXhCRjrQyCeOt6wVxr79CKD4c+p+YhCj31HBkYcXebw==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "openbsd"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/sunos-x64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.19.12.tgz",
+      "integrity": "sha512-HKjJwRrW8uWtCQnQOz9qcU3mUZhTUQvi56Q8DPTLLB+DawoiQdjsYq+j+D3s9I8VFtDr+F9CjgXKKC4ss89IeA==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "sunos"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/win32-arm64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.19.12.tgz",
+      "integrity": "sha512-URgtR1dJnmGvX864pn1B2YUYNzjmXkuJOIqG2HdU62MVS4EHpU2946OZoTMnRUHklGtJdJZ33QfzdjGACXhn1A==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/win32-ia32": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.19.12.tgz",
+      "integrity": "sha512-+ZOE6pUkMOJfmxmBZElNOx72NKpIa/HFOMGzu8fqzQJ5kgf6aTGrcJaFsNiVMH4JKpMipyK+7k0n2UXN7a8YKQ==",
+      "cpu": [
+        "ia32"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/win32-x64": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.19.12.tgz",
+      "integrity": "sha512-T1QyPSDCyMXaO3pzBkF96E8xMkiRYbUEZADd29SyPGabqxMViNoii+NcK7eWJAEoU6RZyEm5lVSIjTmcdoB9HA==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@eslint-community/eslint-utils": {
+      "version": "4.7.0",
+      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
+      "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "eslint-visitor-keys": "^3.4.3"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
+      }
+    },
+    "node_modules/@eslint-community/regexpp": {
+      "version": "4.12.1",
+      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
+      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
+      }
+    },
+    "node_modules/@eslint/eslintrc": {
+      "version": "2.1.4",
+      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
+      "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ajv": "^6.12.4",
+        "debug": "^4.3.2",
+        "espree": "^9.6.0",
+        "globals": "^13.19.0",
+        "ignore": "^5.2.0",
+        "import-fresh": "^3.2.1",
+        "js-yaml": "^4.1.0",
+        "minimatch": "^3.1.2",
+        "strip-json-comments": "^3.1.1"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/@eslint/eslintrc/node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/@eslint/eslintrc/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/@eslint/js": {
+      "version": "8.57.1",
+      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.1.tgz",
+      "integrity": "sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      }
+    },
+    "node_modules/@floating-ui/core": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@floating-ui/core/-/core-1.7.2.tgz",
+      "integrity": "sha512-wNB5ooIKHQc+Kui96jE/n69rHFWAVoxn5CAzL1Xdd8FG03cgY3MLO+GF9U3W737fYDSgPWA6MReKhBQBop6Pcw==",
+      "license": "MIT",
+      "dependencies": {
+        "@floating-ui/utils": "^0.2.10"
+      }
+    },
+    "node_modules/@floating-ui/dom": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@floating-ui/dom/-/dom-1.7.2.tgz",
+      "integrity": "sha512-7cfaOQuCS27HD7DX+6ib2OrnW+b4ZBwDNnCcT0uTyidcmyWb03FnQqJybDBoCnpdxwBSfA94UAYlRCt7mV+TbA==",
+      "license": "MIT",
+      "dependencies": {
+        "@floating-ui/core": "^1.7.2",
+        "@floating-ui/utils": "^0.2.10"
+      }
+    },
+    "node_modules/@floating-ui/react-dom": {
+      "version": "2.1.4",
+      "resolved": "https://registry.npmjs.org/@floating-ui/react-dom/-/react-dom-2.1.4.tgz",
+      "integrity": "sha512-JbbpPhp38UmXDDAu60RJmbeme37Jbgsm7NrHGgzYYFKmblzRUh6Pa641dII6LsjwF4XlScDrde2UAzDo/b9KPw==",
+      "license": "MIT",
+      "dependencies": {
+        "@floating-ui/dom": "^1.7.2"
+      },
+      "peerDependencies": {
+        "react": ">=16.8.0",
+        "react-dom": ">=16.8.0"
+      }
+    },
+    "node_modules/@floating-ui/utils": {
+      "version": "0.2.10",
+      "resolved": "https://registry.npmjs.org/@floating-ui/utils/-/utils-0.2.10.tgz",
+      "integrity": "sha512-aGTxbpbg8/b5JfU1HXSrbH3wXZuLPJcNEcZQFMxLs3oSzgtVu6nFPkbbGGUvBcUjKV2YyB9Wxxabo+HEH9tcRQ==",
+      "license": "MIT"
+    },
+    "node_modules/@humanwhocodes/config-array": {
+      "version": "0.13.0",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.13.0.tgz",
+      "integrity": "sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==",
+      "deprecated": "Use @eslint/config-array instead",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@humanwhocodes/object-schema": "^2.0.3",
+        "debug": "^4.3.1",
+        "minimatch": "^3.0.5"
+      },
+      "engines": {
+        "node": ">=10.10.0"
+      }
+    },
+    "node_modules/@humanwhocodes/config-array/node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/@humanwhocodes/config-array/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/@humanwhocodes/module-importer": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
+      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=12.22"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/nzakas"
+      }
+    },
+    "node_modules/@humanwhocodes/object-schema": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
+      "integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
+      "deprecated": "Use @eslint/object-schema instead",
+      "dev": true,
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/@isaacs/cliui": {
+      "version": "8.0.2",
+      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
+      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "string-width": "^5.1.2",
+        "string-width-cjs": "npm:string-width@^4.2.0",
+        "strip-ansi": "^7.0.1",
+        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
+        "wrap-ansi": "^8.1.0",
+        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@isaacs/cliui/node_modules/ansi-regex": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
+      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
+      }
+    },
+    "node_modules/@isaacs/cliui/node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
+      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
+      }
+    },
+    "node_modules/@jridgewell/gen-mapping": {
+      "version": "0.3.12",
+      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
+      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/sourcemap-codec": "^1.5.0",
+        "@jridgewell/trace-mapping": "^0.3.24"
+      }
+    },
+    "node_modules/@jridgewell/resolve-uri": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
+      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/sourcemap-codec": {
+      "version": "1.5.4",
+      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
+      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@jridgewell/trace-mapping": {
+      "version": "0.3.29",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
+      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/resolve-uri": "^3.1.0",
+        "@jridgewell/sourcemap-codec": "^1.4.14"
+      }
+    },
+    "node_modules/@nodelib/fs.scandir": {
+      "version": "2.1.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
+      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.stat": "2.0.5",
+        "run-parallel": "^1.1.9"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@nodelib/fs.stat": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
+      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@nodelib/fs.walk": {
+      "version": "1.2.8",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
+      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.scandir": "2.1.5",
+        "fastq": "^1.6.0"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@pkgjs/parseargs": {
+      "version": "0.11.0",
+      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
+      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/@radix-ui/number": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/number/-/number-1.1.1.tgz",
+      "integrity": "sha512-MkKCwxlXTgz6CFoJx3pCwn07GKp36+aZyu/u2Ln2VrA5DcdyCZkASEDBTd8x5whTQQL5CiYf4prXKLcgQdv29g==",
+      "license": "MIT"
+    },
+    "node_modules/@radix-ui/primitive": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@radix-ui/primitive/-/primitive-1.1.2.tgz",
+      "integrity": "sha512-XnbHrrprsNqZKQhStrSwgRUQzoCI1glLzdw79xiZPoofhGICeZRSQ3dIxAKH1gb3OHfNf4d6f+vAv3kil2eggA==",
+      "license": "MIT"
+    },
+    "node_modules/@radix-ui/react-arrow": {
+      "version": "1.1.7",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-arrow/-/react-arrow-1.1.7.tgz",
+      "integrity": "sha512-F+M1tLhO+mlQaOWspE8Wstg+z6PwxwRd8oQ8IXceWz92kfAmalTRf0EjrouQeo7QssEPfCn05B4Ihs1K9WQ/7w==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-primitive": "2.1.3"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-collapsible": {
+      "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-collapsible/-/react-collapsible-1.1.11.tgz",
+      "integrity": "sha512-2qrRsVGSCYasSz1RFOorXwl0H7g7J1frQtgpQgYrt+MOidtPAINHn9CPovQXb83r8ahapdx3Tu0fa/pdFFSdPg==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-id": "1.1.1",
+        "@radix-ui/react-presence": "1.1.4",
+        "@radix-ui/react-primitive": "2.1.3",
+        "@radix-ui/react-use-controllable-state": "1.2.2",
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-compose-refs": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-compose-refs/-/react-compose-refs-1.1.2.tgz",
+      "integrity": "sha512-z4eqJvfiNnFMHIIvXP3CY57y2WJs5g2v3X0zm9mEJkrkNv4rDxu+sg9Jh8EkXyeqBkB7SOcboo9dMVqhyrACIg==",
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-context": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-context/-/react-context-1.1.2.tgz",
+      "integrity": "sha512-jCi/QKUM2r1Ju5a3J64TH2A5SpKAgh0LpknyqdQ4m6DCV0xJ2HG1xARRwNGPQfi1SLdLWZ1OJz6F4OMBBNiGJA==",
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-direction": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-direction/-/react-direction-1.1.1.tgz",
+      "integrity": "sha512-1UEWRX6jnOA2y4H5WczZ44gOOjTEmlqv1uNW4GAJEO5+bauCBhv8snY65Iw5/VOS/ghKN9gr2KjnLKxrsvoMVw==",
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-dismissable-layer": {
+      "version": "1.1.10",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-dismissable-layer/-/react-dismissable-layer-1.1.10.tgz",
+      "integrity": "sha512-IM1zzRV4W3HtVgftdQiiOmA0AdJlCtMLe00FXaHwgt3rAnNsIyDqshvkIW3hj/iu5hu8ERP7KIYki6NkqDxAwQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-primitive": "2.1.3",
+        "@radix-ui/react-use-callback-ref": "1.1.1",
+        "@radix-ui/react-use-escape-keydown": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-id": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-id/-/react-id-1.1.1.tgz",
+      "integrity": "sha512-kGkGegYIdQsOb4XjsfM97rXsiHaBwco+hFI66oO4s9LU+PLAC5oJ7khdOVFxkhsmlbpUqDAvXw11CluXP+jkHg==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-popper": {
+      "version": "1.2.7",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-popper/-/react-popper-1.2.7.tgz",
+      "integrity": "sha512-IUFAccz1JyKcf/RjB552PlWwxjeCJB8/4KxT7EhBHOJM+mN7LdW+B3kacJXILm32xawcMMjb2i0cIZpo+f9kiQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@floating-ui/react-dom": "^2.0.0",
+        "@radix-ui/react-arrow": "1.1.7",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-primitive": "2.1.3",
+        "@radix-ui/react-use-callback-ref": "1.1.1",
+        "@radix-ui/react-use-layout-effect": "1.1.1",
+        "@radix-ui/react-use-rect": "1.1.1",
+        "@radix-ui/react-use-size": "1.1.1",
+        "@radix-ui/rect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-portal": {
+      "version": "1.1.9",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-portal/-/react-portal-1.1.9.tgz",
+      "integrity": "sha512-bpIxvq03if6UNwXZ+HTK71JLh4APvnXntDc6XOX8UVq4XQOVl7lwok0AvIl+b8zgCw3fSaVTZMpAPPagXbKmHQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-primitive": "2.1.3",
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-presence": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-presence/-/react-presence-1.1.4.tgz",
+      "integrity": "sha512-ueDqRbdc4/bkaQT3GIpLQssRlFgWaL/U2z/S31qRwwLWoxHLgry3SIfCwhxeQNbirEUXFa+lq3RL3oBYXtcmIA==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-primitive": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-primitive/-/react-primitive-2.1.3.tgz",
+      "integrity": "sha512-m9gTwRkhy2lvCPe6QJp4d3G1TYEUHn/FzJUtq9MjH46an1wJU+GdoGC5VLof8RX8Ft/DlpshApkhswDLZzHIcQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-slot": "1.2.3"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-scroll-area": {
+      "version": "1.2.9",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-scroll-area/-/react-scroll-area-1.2.9.tgz",
+      "integrity": "sha512-YSjEfBXnhUELsO2VzjdtYYD4CfQjvao+lhhrX5XsHD7/cyUNzljF1FHEbgTPN7LH2MClfwRMIsYlqTYpKTTe2A==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/number": "1.1.1",
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-direction": "1.1.1",
+        "@radix-ui/react-presence": "1.1.4",
+        "@radix-ui/react-primitive": "2.1.3",
+        "@radix-ui/react-use-callback-ref": "1.1.1",
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-slot": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-slot/-/react-slot-1.2.3.tgz",
+      "integrity": "sha512-aeNmHnBxbi2St0au6VBVC7JXFlhLlOnvIIlePNniyUNAClzmtAUEY8/pBiK3iHjufOlwA+c20/8jngo7xcrg8A==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-compose-refs": "1.1.2"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-tooltip": {
+      "version": "1.2.7",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-tooltip/-/react-tooltip-1.2.7.tgz",
+      "integrity": "sha512-Ap+fNYwKTYJ9pzqW+Xe2HtMRbQ/EeWkj2qykZ6SuEV4iS/o1bZI5ssJbk4D2r8XuDuOBVz/tIx2JObtuqU+5Zw==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-dismissable-layer": "1.1.10",
+        "@radix-ui/react-id": "1.1.1",
+        "@radix-ui/react-popper": "1.2.7",
+        "@radix-ui/react-portal": "1.1.9",
+        "@radix-ui/react-presence": "1.1.4",
+        "@radix-ui/react-primitive": "2.1.3",
+        "@radix-ui/react-slot": "1.2.3",
+        "@radix-ui/react-use-controllable-state": "1.2.2",
+        "@radix-ui/react-visually-hidden": "1.2.3"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-use-callback-ref": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-callback-ref/-/react-use-callback-ref-1.1.1.tgz",
+      "integrity": "sha512-FkBMwD+qbGQeMu1cOHnuGB6x4yzPjho8ap5WtbEJ26umhgqVXbhekKUQO+hZEL1vU92a3wHwdp0HAcqAUF5iDg==",
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-use-controllable-state": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-controllable-state/-/react-use-controllable-state-1.2.2.tgz",
+      "integrity": "sha512-BjasUjixPFdS+NKkypcyyN5Pmg83Olst0+c6vGov0diwTEo6mgdqVR6hxcEgFuh4QrAs7Rc+9KuGJ9TVCj0Zzg==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-use-effect-event": "0.0.2",
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-use-effect-event": {
+      "version": "0.0.2",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-effect-event/-/react-use-effect-event-0.0.2.tgz",
+      "integrity": "sha512-Qp8WbZOBe+blgpuUT+lw2xheLP8q0oatc9UpmiemEICxGvFLYmHm9QowVZGHtJlGbS6A6yJ3iViad/2cVjnOiA==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-use-escape-keydown": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-escape-keydown/-/react-use-escape-keydown-1.1.1.tgz",
+      "integrity": "sha512-Il0+boE7w/XebUHyBjroE+DbByORGR9KKmITzbR7MyQ4akpORYP/ZmbhAr0DG7RmmBqoOnZdy2QlvajJ2QA59g==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-use-callback-ref": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-use-layout-effect": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-layout-effect/-/react-use-layout-effect-1.1.1.tgz",
+      "integrity": "sha512-RbJRS4UWQFkzHTTwVymMTUv8EqYhOp8dOOviLj2ugtTiXRaRQS7GLGxZTLL1jWhMeoSCf5zmcZkqTl9IiYfXcQ==",
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-use-rect": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-rect/-/react-use-rect-1.1.1.tgz",
+      "integrity": "sha512-QTYuDesS0VtuHNNvMh+CjlKJ4LJickCMUAqjlE3+j8w+RlRpwyX3apEQKGFzbZGdo7XNG1tXa+bQqIE7HIXT2w==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/rect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-use-size": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-size/-/react-use-size-1.1.1.tgz",
+      "integrity": "sha512-ewrXRDTAqAXlkl6t/fkXWNAhFX9I+CkKlw6zjEwk86RSPKwZr3xpBRso655aqYafwtnbpHLj6toFzmd6xdVptQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-visually-hidden": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-visually-hidden/-/react-visually-hidden-1.2.3.tgz",
+      "integrity": "sha512-pzJq12tEaaIhqjbzpCuv/OypJY/BPavOofm+dbab+MHLajy277+1lLm6JFcGgF5eskJ6mquGirhXY2GD/8u8Ug==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-primitive": "2.1.3"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/rect": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/rect/-/rect-1.1.1.tgz",
+      "integrity": "sha512-HPwpGIzkl28mWyZqG52jiqDJ12waP11Pa1lGoiyUkIEuMLBP0oeK/C89esbXrxsky5we7dfd8U58nm0SgAWpVw==",
+      "license": "MIT"
+    },
+    "node_modules/@rolldown/pluginutils": {
+      "version": "1.0.0-beta.27",
+      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.27.tgz",
+      "integrity": "sha512-+d0F4MKMCbeVUJwG96uQ4SgAznZNSq93I3V+9NHA4OpvqG8mRCpGdKmK8l/dl02h2CCDHwW2FqilnTyDcAnqjA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@rollup/rollup-android-arm-eabi": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.45.1.tgz",
+      "integrity": "sha512-NEySIFvMY0ZQO+utJkgoMiCAjMrGvnbDLHvcmlA33UXJpYBCvlBEbMMtV837uCkS+plG2umfhn0T5mMAxGrlRA==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ]
+    },
+    "node_modules/@rollup/rollup-android-arm64": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.45.1.tgz",
+      "integrity": "sha512-ujQ+sMXJkg4LRJaYreaVx7Z/VMgBBd89wGS4qMrdtfUFZ+TSY5Rs9asgjitLwzeIbhwdEhyj29zhst3L1lKsRQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ]
+    },
+    "node_modules/@rollup/rollup-darwin-arm64": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.45.1.tgz",
+      "integrity": "sha512-FSncqHvqTm3lC6Y13xncsdOYfxGSLnP+73k815EfNmpewPs+EyM49haPS105Rh4aF5mJKywk9X0ogzLXZzN9lA==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ]
+    },
+    "node_modules/@rollup/rollup-darwin-x64": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.45.1.tgz",
+      "integrity": "sha512-2/vVn/husP5XI7Fsf/RlhDaQJ7x9zjvC81anIVbr4b/f0xtSmXQTFcGIQ/B1cXIYM6h2nAhJkdMHTnD7OtQ9Og==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ]
+    },
+    "node_modules/@rollup/rollup-freebsd-arm64": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.45.1.tgz",
+      "integrity": "sha512-4g1kaDxQItZsrkVTdYQ0bxu4ZIQ32cotoQbmsAnW1jAE4XCMbcBPDirX5fyUzdhVCKgPcrwWuucI8yrVRBw2+g==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ]
+    },
+    "node_modules/@rollup/rollup-freebsd-x64": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.45.1.tgz",
+      "integrity": "sha512-L/6JsfiL74i3uK1Ti2ZFSNsp5NMiM4/kbbGEcOCps99aZx3g8SJMO1/9Y0n/qKlWZfn6sScf98lEOUe2mBvW9A==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.45.1.tgz",
+      "integrity": "sha512-RkdOTu2jK7brlu+ZwjMIZfdV2sSYHK2qR08FUWcIoqJC2eywHbXr0L8T/pONFwkGukQqERDheaGTeedG+rra6Q==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.45.1.tgz",
+      "integrity": "sha512-3kJ8pgfBt6CIIr1o+HQA7OZ9mp/zDk3ctekGl9qn/pRBgrRgfwiffaUmqioUGN9hv0OHv2gxmvdKOkARCtRb8Q==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-arm64-gnu": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.45.1.tgz",
+      "integrity": "sha512-k3dOKCfIVixWjG7OXTCOmDfJj3vbdhN0QYEqB+OuGArOChek22hn7Uy5A/gTDNAcCy5v2YcXRJ/Qcnm4/ma1xw==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-arm64-musl": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.45.1.tgz",
+      "integrity": "sha512-PmI1vxQetnM58ZmDFl9/Uk2lpBBby6B6rF4muJc65uZbxCs0EA7hhKCk2PKlmZKuyVSHAyIw3+/SiuMLxKxWog==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.45.1.tgz",
+      "integrity": "sha512-9UmI0VzGmNJ28ibHW2GpE2nF0PBQqsyiS4kcJ5vK+wuwGnV5RlqdczVocDSUfGX/Na7/XINRVoUgJyFIgipoRg==",
+      "cpu": [
+        "loong64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.45.1.tgz",
+      "integrity": "sha512-7nR2KY8oEOUTD3pBAxIBBbZr0U7U+R9HDTPNy+5nVVHDXI4ikYniH1oxQz9VoB5PbBU1CZuDGHkLJkd3zLMWsg==",
+      "cpu": [
+        "ppc64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.45.1.tgz",
+      "integrity": "sha512-nlcl3jgUultKROfZijKjRQLUu9Ma0PeNv/VFHkZiKbXTBQXhpytS8CIj5/NfBeECZtY2FJQubm6ltIxm/ftxpw==",
+      "cpu": [
+        "riscv64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-riscv64-musl": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.45.1.tgz",
+      "integrity": "sha512-HJV65KLS51rW0VY6rvZkiieiBnurSzpzore1bMKAhunQiECPuxsROvyeaot/tcK3A3aGnI+qTHqisrpSgQrpgA==",
+      "cpu": [
+        "riscv64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-s390x-gnu": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.45.1.tgz",
+      "integrity": "sha512-NITBOCv3Qqc6hhwFt7jLV78VEO/il4YcBzoMGGNxznLgRQf43VQDae0aAzKiBeEPIxnDrACiMgbqjuihx08OOw==",
+      "cpu": [
+        "s390x"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-x64-gnu": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.45.1.tgz",
+      "integrity": "sha512-+E/lYl6qu1zqgPEnTrs4WysQtvc/Sh4fC2nByfFExqgYrqkKWp1tWIbe+ELhixnenSpBbLXNi6vbEEJ8M7fiHw==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-x64-musl": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.45.1.tgz",
+      "integrity": "sha512-a6WIAp89p3kpNoYStITT9RbTbTnqarU7D8N8F2CV+4Cl9fwCOZraLVuVFvlpsW0SbIiYtEnhCZBPLoNdRkjQFw==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-win32-arm64-msvc": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.45.1.tgz",
+      "integrity": "sha512-T5Bi/NS3fQiJeYdGvRpTAP5P02kqSOpqiopwhj0uaXB6nzs5JVi2XMJb18JUSKhCOX8+UE1UKQufyD6Or48dJg==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
+    "node_modules/@rollup/rollup-win32-ia32-msvc": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.45.1.tgz",
+      "integrity": "sha512-lxV2Pako3ujjuUe9jiU3/s7KSrDfH6IgTSQOnDWr9aJ92YsFd7EurmClK0ly/t8dzMkDtd04g60WX6yl0sGfdw==",
+      "cpu": [
+        "ia32"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
+    "node_modules/@rollup/rollup-win32-x64-msvc": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.45.1.tgz",
+      "integrity": "sha512-M/fKi4sasCdM8i0aWJjCSFm2qEnYRR8AMLG2kxp6wD13+tMGA4Z1tVAuHkNRjud5SW2EM3naLuK35w9twvf6aA==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
+    "node_modules/@types/babel__core": {
+      "version": "7.20.5",
+      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
+      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/parser": "^7.20.7",
+        "@babel/types": "^7.20.7",
+        "@types/babel__generator": "*",
+        "@types/babel__template": "*",
+        "@types/babel__traverse": "*"
+      }
+    },
+    "node_modules/@types/babel__generator": {
+      "version": "7.27.0",
+      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
+      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/types": "^7.0.0"
+      }
+    },
+    "node_modules/@types/babel__template": {
+      "version": "7.4.4",
+      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
+      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/parser": "^7.1.0",
+        "@babel/types": "^7.0.0"
+      }
+    },
+    "node_modules/@types/babel__traverse": {
+      "version": "7.20.7",
+      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
+      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/types": "^7.20.7"
+      }
+    },
+    "node_modules/@types/chrome": {
+      "version": "0.0.254",
+      "resolved": "https://registry.npmjs.org/@types/chrome/-/chrome-0.0.254.tgz",
+      "integrity": "sha512-svkOGKwA+6ZZuk9xtrYun8MYpNY/9hD17rgZ19v3KunhsK1ZOKaMESw12/1AXLh1u3UPA8jQIRi2370DXv9wgw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/filesystem": "*",
+        "@types/har-format": "*"
+      }
+    },
+    "node_modules/@types/estree": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
+      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/filesystem": {
+      "version": "0.0.36",
+      "resolved": "https://registry.npmjs.org/@types/filesystem/-/filesystem-0.0.36.tgz",
+      "integrity": "sha512-vPDXOZuannb9FZdxgHnqSwAG/jvdGM8Wq+6N4D/d80z+D4HWH+bItqsZaVRQykAn6WEVeEkLm2oQigyHtgb0RA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/filewriter": "*"
+      }
+    },
+    "node_modules/@types/filewriter": {
+      "version": "0.0.33",
+      "resolved": "https://registry.npmjs.org/@types/filewriter/-/filewriter-0.0.33.tgz",
+      "integrity": "sha512-xFU8ZXTw4gd358lb2jw25nxY9QAgqn2+bKKjKOYfNCzN4DKCFetK7sPtrlpg66Ywe3vWY9FNxprZawAh9wfJ3g==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/har-format": {
+      "version": "1.2.16",
+      "resolved": "https://registry.npmjs.org/@types/har-format/-/har-format-1.2.16.tgz",
+      "integrity": "sha512-fluxdy7ryD3MV6h8pTfTYpy/xQzCFC7m89nOH9y94cNqJ1mDIDPut7MnRHI3F6qRmh/cT2fUjG1MLdCNb4hE9A==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/json-schema": {
+      "version": "7.0.15",
+      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
+      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/prop-types": {
+      "version": "15.7.15",
+      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.15.tgz",
+      "integrity": "sha512-F6bEyamV9jKGAFBEmlQnesRPGOQqS2+Uwi0Em15xenOxHaf2hv6L8YCVn3rPdPJOiJfPiCnLIRyvwVaqMY3MIw==",
+      "devOptional": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/react": {
+      "version": "18.3.23",
+      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.3.23.tgz",
+      "integrity": "sha512-/LDXMQh55EzZQ0uVAZmKKhfENivEvWz6E+EYzh+/MCjMhNsotd+ZHhBGIjFDTi6+fz0OhQQQLbTgdQIxxCsC0w==",
+      "devOptional": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/prop-types": "*",
+        "csstype": "^3.0.2"
+      }
+    },
+    "node_modules/@types/react-dom": {
+      "version": "18.3.7",
+      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.3.7.tgz",
+      "integrity": "sha512-MEe3UeoENYVFXzoXEWsvcpg6ZvlrFNlOQ7EOsvhI3CfAXwzPfO8Qwuxd40nepsYKqyyVQnTdEfv68q91yLcKrQ==",
+      "devOptional": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "^18.0.0"
+      }
+    },
+    "node_modules/@types/semver": {
+      "version": "7.7.0",
+      "resolved": "https://registry.npmjs.org/@types/semver/-/semver-7.7.0.tgz",
+      "integrity": "sha512-k107IF4+Xr7UHjwDc7Cfd6PRQfbdkiRabXGRjo07b4WyPahFBZCZ1sE+BNxYIJPPg73UkfOsVOLwqVc/6ETrIA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@typescript-eslint/eslint-plugin": {
+      "version": "6.21.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-6.21.0.tgz",
+      "integrity": "sha512-oy9+hTPCUFpngkEZUSzbf9MxI65wbKFoQYsgPdILTfbUldp5ovUuphZVe4i30emU9M/kP+T64Di0mxl7dSw3MA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@eslint-community/regexpp": "^4.5.1",
+        "@typescript-eslint/scope-manager": "6.21.0",
+        "@typescript-eslint/type-utils": "6.21.0",
+        "@typescript-eslint/utils": "6.21.0",
+        "@typescript-eslint/visitor-keys": "6.21.0",
+        "debug": "^4.3.4",
+        "graphemer": "^1.4.0",
+        "ignore": "^5.2.4",
+        "natural-compare": "^1.4.0",
+        "semver": "^7.5.4",
+        "ts-api-utils": "^1.0.1"
+      },
+      "engines": {
+        "node": "^16.0.0 || >=18.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "@typescript-eslint/parser": "^6.0.0 || ^6.0.0-alpha",
+        "eslint": "^7.0.0 || ^8.0.0"
+      },
+      "peerDependenciesMeta": {
+        "typescript": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@typescript-eslint/parser": {
+      "version": "6.21.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-6.21.0.tgz",
+      "integrity": "sha512-tbsV1jPne5CkFQCgPBcDOt30ItF7aJoZL997JSF7MhGQqOeT3svWRYxiqlfA5RUdlHN6Fi+EI9bxqbdyAUZjYQ==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "@typescript-eslint/scope-manager": "6.21.0",
+        "@typescript-eslint/types": "6.21.0",
+        "@typescript-eslint/typescript-estree": "6.21.0",
+        "@typescript-eslint/visitor-keys": "6.21.0",
+        "debug": "^4.3.4"
+      },
+      "engines": {
+        "node": "^16.0.0 || >=18.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^7.0.0 || ^8.0.0"
+      },
+      "peerDependenciesMeta": {
+        "typescript": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@typescript-eslint/scope-manager": {
+      "version": "6.21.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-6.21.0.tgz",
+      "integrity": "sha512-OwLUIWZJry80O99zvqXVEioyniJMa+d2GrqpUTqi5/v5D5rOrppJVBPa0yKCblcigC0/aYAzxxqQ1B+DS2RYsg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/types": "6.21.0",
+        "@typescript-eslint/visitor-keys": "6.21.0"
+      },
+      "engines": {
+        "node": "^16.0.0 || >=18.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@typescript-eslint/type-utils": {
+      "version": "6.21.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-6.21.0.tgz",
+      "integrity": "sha512-rZQI7wHfao8qMX3Rd3xqeYSMCL3SoiSQLBATSiVKARdFGCYSRvmViieZjqc58jKgs8Y8i9YvVVhRbHSTA4VBag==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/typescript-estree": "6.21.0",
+        "@typescript-eslint/utils": "6.21.0",
+        "debug": "^4.3.4",
+        "ts-api-utils": "^1.0.1"
+      },
+      "engines": {
+        "node": "^16.0.0 || >=18.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^7.0.0 || ^8.0.0"
+      },
+      "peerDependenciesMeta": {
+        "typescript": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@typescript-eslint/types": {
+      "version": "6.21.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-6.21.0.tgz",
+      "integrity": "sha512-1kFmZ1rOm5epu9NZEZm1kckCDGj5UJEf7P1kliH4LKu/RkwpsfqqGmY2OOcUs18lSlQBKLDYBOGxRVtrMN5lpg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^16.0.0 || >=18.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree": {
+      "version": "6.21.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-6.21.0.tgz",
+      "integrity": "sha512-6npJTkZcO+y2/kr+z0hc4HwNfrrP4kNYh57ek7yCNlrBjWQ1Y0OS7jiZTkgumrvkX5HkEKXFZkkdFNkaW2wmUQ==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "@typescript-eslint/types": "6.21.0",
+        "@typescript-eslint/visitor-keys": "6.21.0",
+        "debug": "^4.3.4",
+        "globby": "^11.1.0",
+        "is-glob": "^4.0.3",
+        "minimatch": "9.0.3",
+        "semver": "^7.5.4",
+        "ts-api-utils": "^1.0.1"
+      },
+      "engines": {
+        "node": "^16.0.0 || >=18.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependenciesMeta": {
+        "typescript": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@typescript-eslint/utils": {
+      "version": "6.21.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-6.21.0.tgz",
+      "integrity": "sha512-NfWVaC8HP9T8cbKQxHcsJBY5YE1O33+jpMwN45qzWWaPDZgLIbo12toGMWnmhvCpd3sIxkpDw3Wv1B3dYrbDQQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@eslint-community/eslint-utils": "^4.4.0",
+        "@types/json-schema": "^7.0.12",
+        "@types/semver": "^7.5.0",
+        "@typescript-eslint/scope-manager": "6.21.0",
+        "@typescript-eslint/types": "6.21.0",
+        "@typescript-eslint/typescript-estree": "6.21.0",
+        "semver": "^7.5.4"
+      },
+      "engines": {
+        "node": "^16.0.0 || >=18.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^7.0.0 || ^8.0.0"
+      }
+    },
+    "node_modules/@typescript-eslint/visitor-keys": {
+      "version": "6.21.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-6.21.0.tgz",
+      "integrity": "sha512-JJtkDduxLi9bivAB+cYOVMtbkqdPOhZ+ZI5LC47MIRrDV4Yn2o+ZnW10Nkmr28xRpSpdJ6Sm42Hjf2+REYXm0A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/types": "6.21.0",
+        "eslint-visitor-keys": "^3.4.1"
+      },
+      "engines": {
+        "node": "^16.0.0 || >=18.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@ungap/structured-clone": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.3.0.tgz",
+      "integrity": "sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/@vitejs/plugin-react": {
+      "version": "4.7.0",
+      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.7.0.tgz",
+      "integrity": "sha512-gUu9hwfWvvEDBBmgtAowQCojwZmJ5mcLn3aufeCsitijs3+f2NsrPtlAWIR6OPiqljl96GVCUbLe0HyqIpVaoA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/core": "^7.28.0",
+        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
+        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
+        "@rolldown/pluginutils": "1.0.0-beta.27",
+        "@types/babel__core": "^7.20.5",
+        "react-refresh": "^0.17.0"
+      },
+      "engines": {
+        "node": "^14.18.0 || >=16.0.0"
+      },
+      "peerDependencies": {
+        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0"
+      }
+    },
+    "node_modules/acorn": {
+      "version": "8.15.0",
+      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
+      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "acorn": "bin/acorn"
+      },
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/acorn-jsx": {
+      "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
+      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
+      }
+    },
+    "node_modules/ajv": {
+      "version": "6.12.6",
+      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
+      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fast-deep-equal": "^3.1.1",
+        "fast-json-stable-stringify": "^2.0.0",
+        "json-schema-traverse": "^0.4.1",
+        "uri-js": "^4.2.2"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/epoberezkin"
+      }
+    },
+    "node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/any-promise": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
+      "integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/anymatch": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
+      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "normalize-path": "^3.0.0",
+        "picomatch": "^2.0.4"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/arg": {
+      "version": "5.0.2",
+      "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
+      "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/argparse": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
+      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
+      "dev": true,
+      "license": "Python-2.0"
+    },
+    "node_modules/array-union": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
+      "integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/autoprefixer": {
+      "version": "10.4.21",
+      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.21.tgz",
+      "integrity": "sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "browserslist": "^4.24.4",
+        "caniuse-lite": "^1.0.30001702",
+        "fraction.js": "^4.3.7",
+        "normalize-range": "^0.1.2",
+        "picocolors": "^1.1.1",
+        "postcss-value-parser": "^4.2.0"
+      },
+      "bin": {
+        "autoprefixer": "bin/autoprefixer"
+      },
+      "engines": {
+        "node": "^10 || ^12 || >=14"
+      },
+      "peerDependencies": {
+        "postcss": "^8.1.0"
+      }
+    },
+    "node_modules/balanced-match": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
+      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/binary-extensions": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
+      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/brace-expansion": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
+      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0"
+      }
+    },
+    "node_modules/braces": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
+      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fill-range": "^7.1.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/browserslist": {
+      "version": "4.25.1",
+      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
+      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/browserslist"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "caniuse-lite": "^1.0.30001726",
+        "electron-to-chromium": "^1.5.173",
+        "node-releases": "^2.0.19",
+        "update-browserslist-db": "^1.1.3"
+      },
+      "bin": {
+        "browserslist": "cli.js"
+      },
+      "engines": {
+        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
+      }
+    },
+    "node_modules/callsites": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
+      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/camelcase-css": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
+      "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/caniuse-lite": {
+      "version": "1.0.30001727",
+      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001727.tgz",
+      "integrity": "sha512-pB68nIHmbN6L/4C6MH1DokyR3bYqFwjaSs/sWDHGj4CTcFtQUQMuJftVwWkXq7mNWOybD3KhUv3oWHoGxgP14Q==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "CC-BY-4.0"
+    },
+    "node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/chokidar": {
+      "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
+      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "anymatch": "~3.1.2",
+        "braces": "~3.0.2",
+        "glob-parent": "~5.1.2",
+        "is-binary-path": "~2.1.0",
+        "is-glob": "~4.0.1",
+        "normalize-path": "~3.0.0",
+        "readdirp": "~3.6.0"
+      },
+      "engines": {
+        "node": ">= 8.10.0"
+      },
+      "funding": {
+        "url": "https://paulmillr.com/funding/"
+      },
+      "optionalDependencies": {
+        "fsevents": "~2.3.2"
+      }
+    },
+    "node_modules/chokidar/node_modules/glob-parent": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/clsx": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
+      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/color-name": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/commander": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
+      "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/concat-map": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
+      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/convert-source-map": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
+      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/cross-spawn": {
+      "version": "7.0.6",
+      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
+      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "path-key": "^3.1.0",
+        "shebang-command": "^2.0.0",
+        "which": "^2.0.1"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/cssesc": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
+      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "cssesc": "bin/cssesc"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/csstype": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
+      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
+      "devOptional": true,
+      "license": "MIT"
+    },
+    "node_modules/debug": {
+      "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
+      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.1.3"
+      },
+      "engines": {
+        "node": ">=6.0"
+      },
+      "peerDependenciesMeta": {
+        "supports-color": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/deep-is": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
+      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/didyoumean": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
+      "integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
+      "dev": true,
+      "license": "Apache-2.0"
+    },
+    "node_modules/dir-glob": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
+      "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "path-type": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/dlv": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
+      "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/doctrine": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
+      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "esutils": "^2.0.2"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/eastasianwidth": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
+      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/electron-to-chromium": {
+      "version": "1.5.190",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.190.tgz",
+      "integrity": "sha512-k4McmnB2091YIsdCgkS0fMVMPOJgxl93ltFzaryXqwip1AaxeDqKCGLxkXODDA5Ab/D+tV5EL5+aTx76RvLRxw==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/emoji-regex": {
+      "version": "9.2.2",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
+      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/esbuild": {
+      "version": "0.19.12",
+      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.19.12.tgz",
+      "integrity": "sha512-aARqgq8roFBj054KvQr5f1sFu0D65G+miZRCuJyJ0G13Zwx7vRar5Zhn2tkQNzIXcBrNVsv/8stehpj+GAjgbg==",
+      "dev": true,
+      "hasInstallScript": true,
+      "license": "MIT",
+      "bin": {
+        "esbuild": "bin/esbuild"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "optionalDependencies": {
+        "@esbuild/aix-ppc64": "0.19.12",
+        "@esbuild/android-arm": "0.19.12",
+        "@esbuild/android-arm64": "0.19.12",
+        "@esbuild/android-x64": "0.19.12",
+        "@esbuild/darwin-arm64": "0.19.12",
+        "@esbuild/darwin-x64": "0.19.12",
+        "@esbuild/freebsd-arm64": "0.19.12",
+        "@esbuild/freebsd-x64": "0.19.12",
+        "@esbuild/linux-arm": "0.19.12",
+        "@esbuild/linux-arm64": "0.19.12",
+        "@esbuild/linux-ia32": "0.19.12",
+        "@esbuild/linux-loong64": "0.19.12",
+        "@esbuild/linux-mips64el": "0.19.12",
+        "@esbuild/linux-ppc64": "0.19.12",
+        "@esbuild/linux-riscv64": "0.19.12",
+        "@esbuild/linux-s390x": "0.19.12",
+        "@esbuild/linux-x64": "0.19.12",
+        "@esbuild/netbsd-x64": "0.19.12",
+        "@esbuild/openbsd-x64": "0.19.12",
+        "@esbuild/sunos-x64": "0.19.12",
+        "@esbuild/win32-arm64": "0.19.12",
+        "@esbuild/win32-ia32": "0.19.12",
+        "@esbuild/win32-x64": "0.19.12"
+      }
+    },
+    "node_modules/escalade": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
+      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/escape-string-regexp": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
+      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/eslint": {
+      "version": "8.57.1",
+      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.57.1.tgz",
+      "integrity": "sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==",
+      "deprecated": "This version is no longer supported. Please see https://eslint.org/version-support for other options.",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@eslint-community/eslint-utils": "^4.2.0",
+        "@eslint-community/regexpp": "^4.6.1",
+        "@eslint/eslintrc": "^2.1.4",
+        "@eslint/js": "8.57.1",
+        "@humanwhocodes/config-array": "^0.13.0",
+        "@humanwhocodes/module-importer": "^1.0.1",
+        "@nodelib/fs.walk": "^1.2.8",
+        "@ungap/structured-clone": "^1.2.0",
+        "ajv": "^6.12.4",
+        "chalk": "^4.0.0",
+        "cross-spawn": "^7.0.2",
+        "debug": "^4.3.2",
+        "doctrine": "^3.0.0",
+        "escape-string-regexp": "^4.0.0",
+        "eslint-scope": "^7.2.2",
+        "eslint-visitor-keys": "^3.4.3",
+        "espree": "^9.6.1",
+        "esquery": "^1.4.2",
+        "esutils": "^2.0.2",
+        "fast-deep-equal": "^3.1.3",
+        "file-entry-cache": "^6.0.1",
+        "find-up": "^5.0.0",
+        "glob-parent": "^6.0.2",
+        "globals": "^13.19.0",
+        "graphemer": "^1.4.0",
+        "ignore": "^5.2.0",
+        "imurmurhash": "^0.1.4",
+        "is-glob": "^4.0.0",
+        "is-path-inside": "^3.0.3",
+        "js-yaml": "^4.1.0",
+        "json-stable-stringify-without-jsonify": "^1.0.1",
+        "levn": "^0.4.1",
+        "lodash.merge": "^4.6.2",
+        "minimatch": "^3.1.2",
+        "natural-compare": "^1.4.0",
+        "optionator": "^0.9.3",
+        "strip-ansi": "^6.0.1",
+        "text-table": "^0.2.0"
+      },
+      "bin": {
+        "eslint": "bin/eslint.js"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/eslint-plugin-react-hooks": {
+      "version": "4.6.2",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-4.6.2.tgz",
+      "integrity": "sha512-QzliNJq4GinDBcD8gPB5v0wh6g8q3SUi6EFF0x8N/BL9PoVs0atuGc47ozMRyOWAKdwaZ5OnbOEa3WR+dSGKuQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "peerDependencies": {
+        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0"
+      }
+    },
+    "node_modules/eslint-plugin-react-refresh": {
+      "version": "0.4.20",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.20.tgz",
+      "integrity": "sha512-XpbHQ2q5gUF8BGOX4dHe+71qoirYMhApEPZ7sfhF/dNnOF1UXnCMGZf79SFTBO7Bz5YEIT4TMieSlJBWhP9WBA==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "eslint": ">=8.40"
+      }
+    },
+    "node_modules/eslint-scope": {
+      "version": "7.2.2",
+      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
+      "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "esrecurse": "^4.3.0",
+        "estraverse": "^5.2.0"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/eslint-visitor-keys": {
+      "version": "3.4.3",
+      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
+      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/eslint/node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/eslint/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/espree": {
+      "version": "9.6.1",
+      "resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
+      "integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "acorn": "^8.9.0",
+        "acorn-jsx": "^5.3.2",
+        "eslint-visitor-keys": "^3.4.1"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/esquery": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
+      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "estraverse": "^5.1.0"
+      },
+      "engines": {
+        "node": ">=0.10"
+      }
+    },
+    "node_modules/esrecurse": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
+      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "estraverse": "^5.2.0"
+      },
+      "engines": {
+        "node": ">=4.0"
+      }
+    },
+    "node_modules/estraverse": {
+      "version": "5.3.0",
+      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
+      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=4.0"
+      }
+    },
+    "node_modules/esutils": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
+      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/fast-deep-equal": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
+      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/fast-glob": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
+      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.stat": "^2.0.2",
+        "@nodelib/fs.walk": "^1.2.3",
+        "glob-parent": "^5.1.2",
+        "merge2": "^1.3.0",
+        "micromatch": "^4.0.8"
+      },
+      "engines": {
+        "node": ">=8.6.0"
+      }
+    },
+    "node_modules/fast-glob/node_modules/glob-parent": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/fast-json-stable-stringify": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
+      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/fast-levenshtein": {
+      "version": "2.0.6",
+      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
+      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/fastq": {
+      "version": "1.19.1",
+      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
+      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "reusify": "^1.0.4"
+      }
+    },
+    "node_modules/file-entry-cache": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
+      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "flat-cache": "^3.0.4"
+      },
+      "engines": {
+        "node": "^10.12.0 || >=12.0.0"
+      }
+    },
+    "node_modules/fill-range": {
+      "version": "7.1.1",
+      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
+      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "to-regex-range": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/find-up": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
+      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "locate-path": "^6.0.0",
+        "path-exists": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/flat-cache": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.2.0.tgz",
+      "integrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "flatted": "^3.2.9",
+        "keyv": "^4.5.3",
+        "rimraf": "^3.0.2"
+      },
+      "engines": {
+        "node": "^10.12.0 || >=12.0.0"
+      }
+    },
+    "node_modules/flatted": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
+      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/foreground-child": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
+      "integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "cross-spawn": "^7.0.6",
+        "signal-exit": "^4.0.1"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/fraction.js": {
+      "version": "4.3.7",
+      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
+      "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "type": "patreon",
+        "url": "https://github.com/sponsors/rawify"
+      }
+    },
+    "node_modules/fs.realpath": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
+      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/fsevents": {
+      "version": "2.3.3",
+      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
+      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
+      "dev": true,
+      "hasInstallScript": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
+      }
+    },
+    "node_modules/function-bind": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
+      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
+      "dev": true,
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/gensync": {
+      "version": "1.0.0-beta.2",
+      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
+      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/glob-parent": {
+      "version": "6.0.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
+      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.3"
+      },
+      "engines": {
+        "node": ">=10.13.0"
+      }
+    },
+    "node_modules/glob/node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/glob/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/globals": {
+      "version": "13.24.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
+      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "type-fest": "^0.20.2"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/globby": {
+      "version": "11.1.0",
+      "resolved": "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
+      "integrity": "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "array-union": "^2.1.0",
+        "dir-glob": "^3.0.1",
+        "fast-glob": "^3.2.9",
+        "ignore": "^5.2.0",
+        "merge2": "^1.4.1",
+        "slash": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/graphemer": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
+      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/has-flag": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/hasown": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
+      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/ignore": {
+      "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
+      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 4"
+      }
+    },
+    "node_modules/import-fresh": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
+      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "parent-module": "^1.0.0",
+        "resolve-from": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/imurmurhash": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
+      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8.19"
+      }
+    },
+    "node_modules/inflight": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
+      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
+      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "once": "^1.3.0",
+        "wrappy": "1"
+      }
+    },
+    "node_modules/inherits": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/is-binary-path": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
+      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "binary-extensions": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/is-core-module": {
+      "version": "2.16.1",
+      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
+      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "hasown": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-extglob": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
+      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/is-fullwidth-code-point": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
+      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/is-glob": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
+      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-extglob": "^2.1.1"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/is-number": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
+      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.12.0"
+      }
+    },
+    "node_modules/is-path-inside": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
+      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/isexe": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
+      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/jackspeak": {
+      "version": "3.4.3",
+      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
+      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
+      "dev": true,
+      "license": "BlueOak-1.0.0",
+      "dependencies": {
+        "@isaacs/cliui": "^8.0.2"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      },
+      "optionalDependencies": {
+        "@pkgjs/parseargs": "^0.11.0"
+      }
+    },
+    "node_modules/jiti": {
+      "version": "1.21.7",
+      "resolved": "https://registry.npmjs.org/jiti/-/jiti-1.21.7.tgz",
+      "integrity": "sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "jiti": "bin/jiti.js"
+      }
+    },
+    "node_modules/js-tokens": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
+      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
+      "license": "MIT"
+    },
+    "node_modules/js-yaml": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
+      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "argparse": "^2.0.1"
+      },
+      "bin": {
+        "js-yaml": "bin/js-yaml.js"
+      }
+    },
+    "node_modules/jsesc": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
+      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "jsesc": "bin/jsesc"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/json-buffer": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
+      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/json-schema-traverse": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
+      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/json-stable-stringify-without-jsonify": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
+      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/json5": {
+      "version": "2.2.3",
+      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
+      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "json5": "lib/cli.js"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/keyv": {
+      "version": "4.5.4",
+      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
+      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "json-buffer": "3.0.1"
+      }
+    },
+    "node_modules/levn": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
+      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "prelude-ls": "^1.2.1",
+        "type-check": "~0.4.0"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/lilconfig": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.3.tgz",
+      "integrity": "sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/antonk52"
+      }
+    },
+    "node_modules/lines-and-columns": {
+      "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
+      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/locate-path": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
+      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "p-locate": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/lodash.merge": {
+      "version": "4.6.2",
+      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
+      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/loose-envify": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
+      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
+      "license": "MIT",
+      "dependencies": {
+        "js-tokens": "^3.0.0 || ^4.0.0"
+      },
+      "bin": {
+        "loose-envify": "cli.js"
+      }
+    },
+    "node_modules/lru-cache": {
+      "version": "5.1.1",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
+      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^3.0.2"
+      }
+    },
+    "node_modules/lucide-react": {
+      "version": "0.294.0",
+      "resolved": "https://registry.npmjs.org/lucide-react/-/lucide-react-0.294.0.tgz",
+      "integrity": "sha512-V7o0/VECSGbLHn3/1O67FUgBwWB+hmzshrgDVRJQhMh8uj5D3HBuIvhuAmQTtlupILSplwIZg5FTc4tTKMA2SA==",
+      "license": "ISC",
+      "peerDependencies": {
+        "react": "^16.5.1 || ^17.0.0 || ^18.0.0"
+      }
+    },
+    "node_modules/merge2": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
+      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/micromatch": {
+      "version": "4.0.8",
+      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
+      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "braces": "^3.0.3",
+        "picomatch": "^2.3.1"
+      },
+      "engines": {
+        "node": ">=8.6"
+      }
+    },
+    "node_modules/minimatch": {
+      "version": "9.0.3",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.3.tgz",
+      "integrity": "sha512-RHiac9mvaRw0x3AYRgDC1CxAP7HTcNrrECeA8YYJeWnpo+2Q5CegtZjaotWTWxDG3UeGA1coE05iH1mPjT/2mg==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/minipass": {
+      "version": "7.1.2",
+      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
+      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
+      "dev": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
+    "node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/mz": {
+      "version": "2.7.0",
+      "resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
+      "integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "any-promise": "^1.0.0",
+        "object-assign": "^4.0.1",
+        "thenify-all": "^1.0.0"
+      }
+    },
+    "node_modules/nanoid": {
+      "version": "3.3.11",
+      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
+      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "bin": {
+        "nanoid": "bin/nanoid.cjs"
+      },
+      "engines": {
+        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
+      }
+    },
+    "node_modules/natural-compare": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
+      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/node-releases": {
+      "version": "2.0.19",
+      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
+      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/normalize-path": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
+      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/normalize-range": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
+      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/object-assign": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
+      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/object-hash": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
+      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/once": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
+      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "wrappy": "1"
+      }
+    },
+    "node_modules/optionator": {
+      "version": "0.9.4",
+      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
+      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "deep-is": "^0.1.3",
+        "fast-levenshtein": "^2.0.6",
+        "levn": "^0.4.1",
+        "prelude-ls": "^1.2.1",
+        "type-check": "^0.4.0",
+        "word-wrap": "^1.2.5"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/p-limit": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
+      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "yocto-queue": "^0.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/p-locate": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
+      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "p-limit": "^3.0.2"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/package-json-from-dist": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
+      "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
+      "dev": true,
+      "license": "BlueOak-1.0.0"
+    },
+    "node_modules/parent-module": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
+      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "callsites": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/path-exists": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
+      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/path-is-absolute": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
+      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/path-key": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
+      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/path-parse": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
+      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/path-scurry": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
+      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
+      "dev": true,
+      "license": "BlueOak-1.0.0",
+      "dependencies": {
+        "lru-cache": "^10.2.0",
+        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/path-scurry/node_modules/lru-cache": {
+      "version": "10.4.3",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
+      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/path-type": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
+      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/picocolors": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
+      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/picomatch": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
+      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
+    "node_modules/pify": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
+      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/pirates": {
+      "version": "4.0.7",
+      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.7.tgz",
+      "integrity": "sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/postcss": {
+      "version": "8.5.6",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
+      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/postcss"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "nanoid": "^3.3.11",
+        "picocolors": "^1.1.1",
+        "source-map-js": "^1.2.1"
+      },
+      "engines": {
+        "node": "^10 || ^12 || >=14"
+      }
+    },
+    "node_modules/postcss-import": {
+      "version": "15.1.0",
+      "resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-15.1.0.tgz",
+      "integrity": "sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "postcss-value-parser": "^4.0.0",
+        "read-cache": "^1.0.0",
+        "resolve": "^1.1.7"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      },
+      "peerDependencies": {
+        "postcss": "^8.0.0"
+      }
+    },
+    "node_modules/postcss-js": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.1.tgz",
+      "integrity": "sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "camelcase-css": "^2.0.1"
+      },
+      "engines": {
+        "node": "^12 || ^14 || >= 16"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/postcss/"
+      },
+      "peerDependencies": {
+        "postcss": "^8.4.21"
+      }
+    },
+    "node_modules/postcss-load-config": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-4.0.2.tgz",
+      "integrity": "sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "lilconfig": "^3.0.0",
+        "yaml": "^2.3.4"
+      },
+      "engines": {
+        "node": ">= 14"
+      },
+      "peerDependencies": {
+        "postcss": ">=8.0.9",
+        "ts-node": ">=9.0.0"
+      },
+      "peerDependenciesMeta": {
+        "postcss": {
+          "optional": true
+        },
+        "ts-node": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/postcss-nested": {
+      "version": "6.2.0",
+      "resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-6.2.0.tgz",
+      "integrity": "sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "postcss-selector-parser": "^6.1.1"
+      },
+      "engines": {
+        "node": ">=12.0"
+      },
+      "peerDependencies": {
+        "postcss": "^8.2.14"
+      }
+    },
+    "node_modules/postcss-selector-parser": {
+      "version": "6.1.2",
+      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
+      "integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "cssesc": "^3.0.0",
+        "util-deprecate": "^1.0.2"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/postcss-value-parser": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
+      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/prelude-ls": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
+      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/punycode": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
+      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/queue-microtask": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
+      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT"
+    },
+    "node_modules/react": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
+      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
+      "license": "MIT",
+      "dependencies": {
+        "loose-envify": "^1.1.0"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/react-dom": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
+      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
+      "license": "MIT",
+      "dependencies": {
+        "loose-envify": "^1.1.0",
+        "scheduler": "^0.23.2"
+      },
+      "peerDependencies": {
+        "react": "^18.3.1"
+      }
+    },
+    "node_modules/react-refresh": {
+      "version": "0.17.0",
+      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
+      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/read-cache": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
+      "integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "pify": "^2.3.0"
+      }
+    },
+    "node_modules/readdirp": {
+      "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
+      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "picomatch": "^2.2.1"
+      },
+      "engines": {
+        "node": ">=8.10.0"
+      }
+    },
+    "node_modules/resolve": {
+      "version": "1.22.10",
+      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
+      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-core-module": "^2.16.0",
+        "path-parse": "^1.0.7",
+        "supports-preserve-symlinks-flag": "^1.0.0"
+      },
+      "bin": {
+        "resolve": "bin/resolve"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/resolve-from": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
+      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/reusify": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
+      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "iojs": ">=1.0.0",
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/rimraf": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
+      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
+      "deprecated": "Rimraf versions prior to v4 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "glob": "^7.1.3"
+      },
+      "bin": {
+        "rimraf": "bin.js"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/rollup": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.45.1.tgz",
+      "integrity": "sha512-4iya7Jb76fVpQyLoiVpzUrsjQ12r3dM7fIVz+4NwoYvZOShknRmiv+iu9CClZml5ZLGb0XMcYLutK6w9tgxHDw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/estree": "1.0.8"
+      },
+      "bin": {
+        "rollup": "dist/bin/rollup"
+      },
+      "engines": {
+        "node": ">=18.0.0",
+        "npm": ">=8.0.0"
+      },
+      "optionalDependencies": {
+        "@rollup/rollup-android-arm-eabi": "4.45.1",
+        "@rollup/rollup-android-arm64": "4.45.1",
+        "@rollup/rollup-darwin-arm64": "4.45.1",
+        "@rollup/rollup-darwin-x64": "4.45.1",
+        "@rollup/rollup-freebsd-arm64": "4.45.1",
+        "@rollup/rollup-freebsd-x64": "4.45.1",
+        "@rollup/rollup-linux-arm-gnueabihf": "4.45.1",
+        "@rollup/rollup-linux-arm-musleabihf": "4.45.1",
+        "@rollup/rollup-linux-arm64-gnu": "4.45.1",
+        "@rollup/rollup-linux-arm64-musl": "4.45.1",
+        "@rollup/rollup-linux-loongarch64-gnu": "4.45.1",
+        "@rollup/rollup-linux-powerpc64le-gnu": "4.45.1",
+        "@rollup/rollup-linux-riscv64-gnu": "4.45.1",
+        "@rollup/rollup-linux-riscv64-musl": "4.45.1",
+        "@rollup/rollup-linux-s390x-gnu": "4.45.1",
+        "@rollup/rollup-linux-x64-gnu": "4.45.1",
+        "@rollup/rollup-linux-x64-musl": "4.45.1",
+        "@rollup/rollup-win32-arm64-msvc": "4.45.1",
+        "@rollup/rollup-win32-ia32-msvc": "4.45.1",
+        "@rollup/rollup-win32-x64-msvc": "4.45.1",
+        "fsevents": "~2.3.2"
+      }
+    },
+    "node_modules/run-parallel": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
+      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "queue-microtask": "^1.2.2"
+      }
+    },
+    "node_modules/scheduler": {
+      "version": "0.23.2",
+      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
+      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
+      "license": "MIT",
+      "dependencies": {
+        "loose-envify": "^1.1.0"
+      }
+    },
+    "node_modules/semver": {
+      "version": "7.7.2",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
+      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/shebang-command": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
+      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "shebang-regex": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/shebang-regex": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
+      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/signal-exit": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
+      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
+      "dev": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/slash": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
+      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/source-map-js": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
+      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/string-width": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
+      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "eastasianwidth": "^0.2.0",
+        "emoji-regex": "^9.2.2",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/string-width-cjs": {
+      "name": "string-width",
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
+      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/string-width-cjs/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/string-width/node_modules/ansi-regex": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
+      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
+      }
+    },
+    "node_modules/string-width/node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
+      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
+      }
+    },
+    "node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-ansi-cjs": {
+      "name": "strip-ansi",
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-json-comments": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
+      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/sucrase": {
+      "version": "3.35.0",
+      "resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
+      "integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/gen-mapping": "^0.3.2",
+        "commander": "^4.0.0",
+        "glob": "^10.3.10",
+        "lines-and-columns": "^1.1.6",
+        "mz": "^2.7.0",
+        "pirates": "^4.0.1",
+        "ts-interface-checker": "^0.1.9"
+      },
+      "bin": {
+        "sucrase": "bin/sucrase",
+        "sucrase-node": "bin/sucrase-node"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
+    "node_modules/sucrase/node_modules/glob": {
+      "version": "10.4.5",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
+      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "foreground-child": "^3.1.0",
+        "jackspeak": "^3.1.2",
+        "minimatch": "^9.0.4",
+        "minipass": "^7.1.2",
+        "package-json-from-dist": "^1.0.0",
+        "path-scurry": "^1.11.1"
+      },
+      "bin": {
+        "glob": "dist/esm/bin.mjs"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/sucrase/node_modules/minimatch": {
+      "version": "9.0.5",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
+      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/supports-color": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "has-flag": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/supports-preserve-symlinks-flag": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
+      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/tailwind-merge": {
+      "version": "2.6.0",
+      "resolved": "https://registry.npmjs.org/tailwind-merge/-/tailwind-merge-2.6.0.tgz",
+      "integrity": "sha512-P+Vu1qXfzediirmHOC3xKGAYeZtPcV9g76X+xg2FD4tYgR71ewMA35Y3sCz3zhiN/dwefRpJX0yBcgwi1fXNQA==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/dcastil"
+      }
+    },
+    "node_modules/tailwindcss": {
+      "version": "3.4.17",
+      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.4.17.tgz",
+      "integrity": "sha512-w33E2aCvSDP0tW9RZuNXadXlkHXqFzSkQew/aIa2i/Sj8fThxwovwlXHSPXTbAHwEIhBFXAedUhP2tueAKP8Og==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@alloc/quick-lru": "^5.2.0",
+        "arg": "^5.0.2",
+        "chokidar": "^3.6.0",
+        "didyoumean": "^1.2.2",
+        "dlv": "^1.1.3",
+        "fast-glob": "^3.3.2",
+        "glob-parent": "^6.0.2",
+        "is-glob": "^4.0.3",
+        "jiti": "^1.21.6",
+        "lilconfig": "^3.1.3",
+        "micromatch": "^4.0.8",
+        "normalize-path": "^3.0.0",
+        "object-hash": "^3.0.0",
+        "picocolors": "^1.1.1",
+        "postcss": "^8.4.47",
+        "postcss-import": "^15.1.0",
+        "postcss-js": "^4.0.1",
+        "postcss-load-config": "^4.0.2",
+        "postcss-nested": "^6.2.0",
+        "postcss-selector-parser": "^6.1.2",
+        "resolve": "^1.22.8",
+        "sucrase": "^3.35.0"
+      },
+      "bin": {
+        "tailwind": "lib/cli.js",
+        "tailwindcss": "lib/cli.js"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
+    "node_modules/text-table": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
+      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/thenify": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
+      "integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "any-promise": "^1.0.0"
+      }
+    },
+    "node_modules/thenify-all": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
+      "integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "thenify": ">= 3.1.0 < 4"
+      },
+      "engines": {
+        "node": ">=0.8"
+      }
+    },
+    "node_modules/to-regex-range": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
+      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-number": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=8.0"
+      }
+    },
+    "node_modules/ts-api-utils": {
+      "version": "1.4.3",
+      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-1.4.3.tgz",
+      "integrity": "sha512-i3eMG77UTMD0hZhgRS562pv83RC6ukSAC2GMNWc+9dieh/+jDM5u5YG+NHX6VNDRHQcHwmsTHctP9LhbC3WxVw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=16"
+      },
+      "peerDependencies": {
+        "typescript": ">=4.2.0"
+      }
+    },
+    "node_modules/ts-interface-checker": {
+      "version": "0.1.13",
+      "resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
+      "integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==",
+      "dev": true,
+      "license": "Apache-2.0"
+    },
+    "node_modules/type-check": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
+      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "prelude-ls": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/type-fest": {
+      "version": "0.20.2",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
+      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
+      "dev": true,
+      "license": "(MIT OR CC0-1.0)",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/typescript": {
+      "version": "5.8.3",
+      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
+      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "bin": {
+        "tsc": "bin/tsc",
+        "tsserver": "bin/tsserver"
+      },
+      "engines": {
+        "node": ">=14.17"
+      }
+    },
+    "node_modules/update-browserslist-db": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
+      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/browserslist"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "escalade": "^3.2.0",
+        "picocolors": "^1.1.1"
+      },
+      "bin": {
+        "update-browserslist-db": "cli.js"
+      },
+      "peerDependencies": {
+        "browserslist": ">= 4.21.0"
+      }
+    },
+    "node_modules/uri-js": {
+      "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
+      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "punycode": "^2.1.0"
+      }
+    },
+    "node_modules/util-deprecate": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
+      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/vite": {
+      "version": "5.4.19",
+      "resolved": "https://registry.npmjs.org/vite/-/vite-5.4.19.tgz",
+      "integrity": "sha512-qO3aKv3HoQC8QKiNSTuUM1l9o/XX3+c+VTgLHbJWHZGeTPVAg2XwazI9UWzoxjIJCGCV2zU60uqMzjeLZuULqA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "esbuild": "^0.21.3",
+        "postcss": "^8.4.43",
+        "rollup": "^4.20.0"
+      },
+      "bin": {
+        "vite": "bin/vite.js"
+      },
+      "engines": {
+        "node": "^18.0.0 || >=20.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/vitejs/vite?sponsor=1"
+      },
+      "optionalDependencies": {
+        "fsevents": "~2.3.3"
+      },
+      "peerDependencies": {
+        "@types/node": "^18.0.0 || >=20.0.0",
+        "less": "*",
+        "lightningcss": "^1.21.0",
+        "sass": "*",
+        "sass-embedded": "*",
+        "stylus": "*",
+        "sugarss": "*",
+        "terser": "^5.4.0"
+      },
+      "peerDependenciesMeta": {
+        "@types/node": {
+          "optional": true
+        },
+        "less": {
+          "optional": true
+        },
+        "lightningcss": {
+          "optional": true
+        },
+        "sass": {
+          "optional": true
+        },
+        "sass-embedded": {
+          "optional": true
+        },
+        "stylus": {
+          "optional": true
+        },
+        "sugarss": {
+          "optional": true
+        },
+        "terser": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/aix-ppc64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
+      "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
+      "cpu": [
+        "ppc64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "aix"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/android-arm": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
+      "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/android-arm64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
+      "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/android-x64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
+      "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/darwin-arm64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
+      "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/darwin-x64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
+      "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/freebsd-arm64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
+      "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/freebsd-x64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
+      "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/linux-arm": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
+      "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/linux-arm64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
+      "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/linux-ia32": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
+      "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
+      "cpu": [
+        "ia32"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/linux-loong64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
+      "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
+      "cpu": [
+        "loong64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/linux-mips64el": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
+      "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
+      "cpu": [
+        "mips64el"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/linux-ppc64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
+      "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
+      "cpu": [
+        "ppc64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/linux-riscv64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
+      "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
+      "cpu": [
+        "riscv64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/linux-s390x": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
+      "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
+      "cpu": [
+        "s390x"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/linux-x64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
+      "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/netbsd-x64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
+      "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "netbsd"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/openbsd-x64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
+      "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "openbsd"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/sunos-x64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
+      "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "sunos"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/win32-arm64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
+      "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/win32-ia32": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
+      "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
+      "cpu": [
+        "ia32"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/@esbuild/win32-x64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
+      "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/vite/node_modules/esbuild": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
+      "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
+      "dev": true,
+      "hasInstallScript": true,
+      "license": "MIT",
+      "bin": {
+        "esbuild": "bin/esbuild"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "optionalDependencies": {
+        "@esbuild/aix-ppc64": "0.21.5",
+        "@esbuild/android-arm": "0.21.5",
+        "@esbuild/android-arm64": "0.21.5",
+        "@esbuild/android-x64": "0.21.5",
+        "@esbuild/darwin-arm64": "0.21.5",
+        "@esbuild/darwin-x64": "0.21.5",
+        "@esbuild/freebsd-arm64": "0.21.5",
+        "@esbuild/freebsd-x64": "0.21.5",
+        "@esbuild/linux-arm": "0.21.5",
+        "@esbuild/linux-arm64": "0.21.5",
+        "@esbuild/linux-ia32": "0.21.5",
+        "@esbuild/linux-loong64": "0.21.5",
+        "@esbuild/linux-mips64el": "0.21.5",
+        "@esbuild/linux-ppc64": "0.21.5",
+        "@esbuild/linux-riscv64": "0.21.5",
+        "@esbuild/linux-s390x": "0.21.5",
+        "@esbuild/linux-x64": "0.21.5",
+        "@esbuild/netbsd-x64": "0.21.5",
+        "@esbuild/openbsd-x64": "0.21.5",
+        "@esbuild/sunos-x64": "0.21.5",
+        "@esbuild/win32-arm64": "0.21.5",
+        "@esbuild/win32-ia32": "0.21.5",
+        "@esbuild/win32-x64": "0.21.5"
+      }
+    },
+    "node_modules/which": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
+      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "isexe": "^2.0.0"
+      },
+      "bin": {
+        "node-which": "bin/node-which"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/word-wrap": {
+      "version": "1.2.5",
+      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
+      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/wrap-ansi": {
+      "version": "8.1.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
+      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^6.1.0",
+        "string-width": "^5.0.1",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/wrap-ansi-cjs": {
+      "name": "wrap-ansi",
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
+      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/wrap-ansi-cjs/node_modules/string-width": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
+      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/wrap-ansi/node_modules/ansi-regex": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
+      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
+      }
+    },
+    "node_modules/wrap-ansi/node_modules/ansi-styles": {
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
+      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/wrap-ansi/node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
+      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
+      }
+    },
+    "node_modules/wrappy": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
+      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/yallist": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
+      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/yaml": {
+      "version": "2.8.0",
+      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.8.0.tgz",
+      "integrity": "sha512-4lLa/EcQCB0cJkyts+FpIRx5G/llPxfP6VQU5KByHEhLxY3IJCH0f0Hy1MHI8sClTvsIb8qwRJ6R/ZdlDJ/leQ==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "yaml": "bin.mjs"
+      },
+      "engines": {
+        "node": ">= 14.6"
+      }
+    },
+    "node_modules/yocto-queue": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
+      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    }
+  }
+}
diff --git a/chrome/browser/resources/vibe/apps/chat3/package.json b/chrome/browser/resources/vibe/apps/chat3/package.json
new file mode 100644
index 0000000000..4975fff834
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/package.json
@@ -0,0 +1,40 @@
+{
+  "name": "vibe-chat3",
+  "private": true,
+  "version": "0.0.1",
+  "type": "module",
+  "scripts": {
+    "dev": "vite",
+    "build": "node build.js",
+    "build-old": "tsc && vite build",
+    "preview": "vite preview",
+    "extension-build": "node extension-build.js"
+  },
+  "dependencies": {
+    "@radix-ui/react-collapsible": "^1.0.3",
+    "@radix-ui/react-scroll-area": "^1.0.5",
+    "@radix-ui/react-tooltip": "^1.0.7",
+    "clsx": "^2.0.0",
+    "lucide-react": "^0.294.0",
+    "react": "^18.2.0",
+    "react-dom": "^18.2.0",
+    "tailwind-merge": "^2.1.0"
+  },
+  "devDependencies": {
+    "@types/react": "^18.2.43",
+    "@types/react-dom": "^18.2.17",
+    "@types/chrome": "^0.0.254",
+    "@typescript-eslint/eslint-plugin": "^6.14.0",
+    "@typescript-eslint/parser": "^6.14.0",
+    "@vitejs/plugin-react": "^4.2.1",
+    "autoprefixer": "^10.4.16",
+    "esbuild": "^0.19.0",
+    "eslint": "^8.55.0",
+    "eslint-plugin-react-hooks": "^4.6.0",
+    "eslint-plugin-react-refresh": "^0.4.5",
+    "postcss": "^8.4.32",
+    "tailwindcss": "^3.3.0",
+    "typescript": "^5.2.2",
+    "vite": "^5.0.8"
+  }
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/postcss.config.js b/chrome/browser/resources/vibe/apps/chat3/postcss.config.js
new file mode 100644
index 0000000000..e99ebc2c0e
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/postcss.config.js
@@ -0,0 +1,6 @@
+export default {
+  plugins: {
+    tailwindcss: {},
+    autoprefixer: {},
+  },
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/src/App.tsx b/chrome/browser/resources/vibe/apps/chat3/src/App.tsx
new file mode 100644
index 0000000000..ba3d9d37c8
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/src/App.tsx
@@ -0,0 +1,19 @@
+import ChatContainer from './components/ChatContainer';
+import { useAIAgent } from './hooks/useAIAgent';
+
+function App() {
+  const { messages, sendMessage, isConnected } = useAIAgent();
+
+  return (
+    <div className="h-full bg-chat-bg">
+      <ChatContainer
+        messages={messages}
+        currentMessage={null}
+        onSendMessage={sendMessage}
+        isConnected={isConnected}
+      />
+    </div>
+  );
+}
+
+export default App;
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/src/components/ChatContainer.tsx b/chrome/browser/resources/vibe/apps/chat3/src/components/ChatContainer.tsx
new file mode 100644
index 0000000000..36daaa3f89
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/src/components/ChatContainer.tsx
@@ -0,0 +1,69 @@
+import { useState, useRef, useEffect } from 'react';
+import MessageList from './MessageList';
+import MessageInput from './MessageInput';
+import { Message } from '../types';
+
+interface ChatContainerProps {
+  messages: Message[];
+  currentMessage: Message | null;
+  onSendMessage: (content: string) => void;
+  isConnected: boolean;
+}
+
+export default function ChatContainer({
+  messages,
+  currentMessage,
+  onSendMessage,
+  isConnected,
+}: ChatContainerProps) {
+  const [userName] = useState('Den'); // You can make this dynamic later
+  const messagesEndRef = useRef<HTMLDivElement>(null);
+
+  const scrollToBottom = () => {
+    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
+  };
+
+  useEffect(() => {
+    scrollToBottom();
+  }, [messages, currentMessage]);
+
+  const allMessages = currentMessage 
+    ? [...messages, currentMessage]
+    : messages;
+
+  return (
+    <div className="flex flex-col h-full">
+      {/* Header */}
+      {messages.length === 0 && !currentMessage && (
+        <div className="flex-1 flex items-center justify-center">
+          <h1 className="text-3xl font-normal text-chat-text">
+            Good to see you, {userName}.
+          </h1>
+        </div>
+      )}
+
+      {/* Messages */}
+      {(messages.length > 0 || currentMessage) && (
+        <div className="flex-1 overflow-hidden">
+          <MessageList messages={allMessages} />
+          <div ref={messagesEndRef} />
+        </div>
+      )}
+
+      {/* Input */}
+      <div className="border-t border-chat-border">
+        <MessageInput 
+          onSendMessage={onSendMessage}
+          disabled={!isConnected || !!currentMessage}
+        />
+      </div>
+
+      {/* Connection status */}
+      {!isConnected && (
+        <div className="absolute top-4 right-4 bg-red-600 text-white px-3 py-1 rounded-md text-sm">
+          Not connected to AI agent
+        </div>
+      )}
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/src/components/Message.tsx b/chrome/browser/resources/vibe/apps/chat3/src/components/Message.tsx
new file mode 100644
index 0000000000..202c1cbf9c
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/src/components/Message.tsx
@@ -0,0 +1,113 @@
+import { User, Bot, AlertCircle } from 'lucide-react';
+import { Message as MessageType } from '../types';
+import { cn } from '../utils/cn';
+import ThinkingIndicator from './ThinkingIndicator';
+import ToolCallDisplay from './ToolCallDisplay';
+import ReasoningDisplay from './ReasoningDisplay';
+
+interface MessageProps {
+  message: MessageType;
+}
+
+export default function Message({ message }: MessageProps) {
+  const isUser = message.role === 'user';
+  const isSystem = message.role === 'system';
+  const isThinking = message.status === 'thinking';
+  const isError = message.status === 'error';
+
+  return (
+    <div
+      className={cn(
+        'group w-full border-b border-chat-border/50',
+        isUser && 'message-user',
+        !isUser && 'message-assistant'
+      )}
+    >
+      <div className="py-6 px-4">
+        <div className="flex gap-6">
+          {/* Avatar */}
+          <div className="flex-shrink-0">
+            <div
+              className={cn(
+                'w-8 h-8 rounded-sm flex items-center justify-center',
+                isUser && 'bg-chat-text text-chat-bg',
+                !isUser && !isSystem && 'bg-green-600 text-white',
+                isSystem && 'bg-orange-600 text-white'
+              )}
+            >
+              {isUser ? (
+                <User size={20} />
+              ) : isSystem ? (
+                <AlertCircle size={20} />
+              ) : (
+                <Bot size={20} />
+              )}
+            </div>
+          </div>
+
+          {/* Content */}
+          <div className="flex-1 overflow-hidden">
+            {/* Thinking indicator */}
+            {isThinking && !message.content && <ThinkingIndicator />}
+
+            {/* Reasoning display */}
+            {message.reasoning && (
+              <ReasoningDisplay reasoning={message.reasoning} />
+            )}
+
+            {/* Tool calls */}
+            {message.toolCalls && message.toolCalls.length > 0 && (
+              <div className="mb-4 space-y-2">
+                {message.toolCalls.map((toolCall) => (
+                  <ToolCallDisplay key={toolCall.id} toolCall={toolCall} />
+                ))}
+              </div>
+            )}
+
+            {/* Message content */}
+            {message.content && (
+              <div
+                className={cn(
+                  'prose prose-invert max-w-none',
+                  isError && 'text-red-400'
+                )}
+                dangerouslySetInnerHTML={{
+                  __html: formatMessageContent(message.content),
+                }}
+              />
+            )}
+
+            {/* Status indicator for streaming */}
+            {message.status === 'streaming' && (
+              <span className="inline-block w-2 h-5 bg-chat-text animate-pulse ml-1" />
+            )}
+          </div>
+        </div>
+      </div>
+    </div>
+  );
+}
+
+function formatMessageContent(content: string): string {
+  // Basic formatting - you can enhance this
+  return content
+    .replace(/```(\w+)?\n([\s\S]*?)```/g, (_, lang, code) => {
+      return `<pre class="code-block"><code class="language-${lang || 'plaintext'}">${escapeHtml(code.trim())}</code></pre>`;
+    })
+    .replace(/`([^`]+)`/g, '<code class="px-1 py-0.5 bg-chat-surface rounded">$1</code>')
+    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
+    .replace(/\*(.*?)\*/g, '<em>$1</em>')
+    .replace(/\n/g, '<br />');
+}
+
+function escapeHtml(text: string): string {
+  const map: { [key: string]: string } = {
+    '&': '&amp;',
+    '<': '&lt;',
+    '>': '&gt;',
+    '"': '&quot;',
+    "'": '&#x27;',
+    '/': '&#x2F;',
+  };
+  return text.replace(/[&<>"'/]/g, (m) => map[m]);
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/src/components/MessageInput.tsx b/chrome/browser/resources/vibe/apps/chat3/src/components/MessageInput.tsx
new file mode 100644
index 0000000000..bfa07dab77
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/src/components/MessageInput.tsx
@@ -0,0 +1,98 @@
+import { useState, useRef, KeyboardEvent } from 'react';
+import { Paperclip, Mic, Send } from 'lucide-react';
+import { cn } from '../utils/cn';
+
+interface MessageInputProps {
+  onSendMessage: (content: string) => void;
+  disabled?: boolean;
+}
+
+export default function MessageInput({ onSendMessage, disabled }: MessageInputProps) {
+  const [input, setInput] = useState('');
+  const textareaRef = useRef<HTMLTextAreaElement>(null);
+
+  const handleSubmit = () => {
+    if (input.trim() && !disabled) {
+      onSendMessage(input.trim());
+      setInput('');
+      // Reset textarea height
+      if (textareaRef.current) {
+        textareaRef.current.style.height = 'auto';
+      }
+    }
+  };
+
+  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {
+    if (e.key === 'Enter' && !e.shiftKey) {
+      e.preventDefault();
+      handleSubmit();
+    }
+  };
+
+  const handleInput = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
+    setInput(e.target.value);
+    // Auto-resize textarea
+    if (textareaRef.current) {
+      textareaRef.current.style.height = 'auto';
+      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
+    }
+  };
+
+  return (
+    <div className="max-w-chat mx-auto p-4">
+      <div className="relative flex items-end gap-2 bg-chat-input rounded-2xl px-4 py-3 shadow-sm">
+        {/* Tools button */}
+        <button
+          type="button"
+          className="btn-ghost p-2 text-chat-muted hover:text-chat-text"
+          title="Attach files"
+          disabled={disabled}
+        >
+          <Paperclip size={20} />
+        </button>
+
+        {/* Input field */}
+        <textarea
+          ref={textareaRef}
+          value={input}
+          onChange={handleInput}
+          onKeyDown={handleKeyDown}
+          placeholder="Ask anything"
+          disabled={disabled}
+          className={cn(
+            'flex-1 bg-transparent text-chat-text placeholder-chat-muted',
+            'resize-none outline-none min-h-[24px] max-h-[200px]',
+            'disabled:opacity-50 disabled:cursor-not-allowed'
+          )}
+          rows={1}
+        />
+
+        {/* Voice input button */}
+        <button
+          type="button"
+          className="btn-ghost p-2 text-chat-muted hover:text-chat-text"
+          title="Voice input"
+          disabled={disabled}
+        >
+          <Mic size={20} />
+        </button>
+
+        {/* Send button (only show when there's input) */}
+        {input.trim() && (
+          <button
+            type="button"
+            onClick={handleSubmit}
+            disabled={disabled}
+            className={cn(
+              'btn-ghost p-2 text-chat-text',
+              'disabled:opacity-50 disabled:cursor-not-allowed'
+            )}
+            title="Send message"
+          >
+            <Send size={20} />
+          </button>
+        )}
+      </div>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/src/components/MessageList.tsx b/chrome/browser/resources/vibe/apps/chat3/src/components/MessageList.tsx
new file mode 100644
index 0000000000..83a094e310
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/src/components/MessageList.tsx
@@ -0,0 +1,18 @@
+import Message from './Message';
+import { Message as MessageType } from '../types';
+
+interface MessageListProps {
+  messages: MessageType[];
+}
+
+export default function MessageList({ messages }: MessageListProps) {
+  return (
+    <div className="h-full overflow-y-auto">
+      <div className="max-w-chat mx-auto">
+        {messages.map((message) => (
+          <Message key={message.id} message={message} />
+        ))}
+      </div>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/src/components/ReasoningDisplay.tsx b/chrome/browser/resources/vibe/apps/chat3/src/components/ReasoningDisplay.tsx
new file mode 100644
index 0000000000..79b8b4f4a7
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/src/components/ReasoningDisplay.tsx
@@ -0,0 +1,42 @@
+import { useState } from 'react';
+import { Brain, ChevronDown } from 'lucide-react';
+import { cn } from '../utils/cn';
+
+interface ReasoningDisplayProps {
+  reasoning: string;
+}
+
+export default function ReasoningDisplay({ reasoning }: ReasoningDisplayProps) {
+  const [isExpanded, setIsExpanded] = useState(false);
+
+  return (
+    <div className="mb-4">
+      <button
+        onClick={() => setIsExpanded(!isExpanded)}
+        className={cn(
+          'flex items-center gap-2 text-sm text-chat-muted',
+          'hover:text-chat-text transition-colors duration-200',
+          'group'
+        )}
+      >
+        <Brain size={16} className="text-purple-400" />
+        <span>View reasoning</span>
+        <ChevronDown
+          size={16}
+          className={cn(
+            'transition-transform duration-200',
+            isExpanded && 'rotate-180'
+          )}
+        />
+      </button>
+
+      {isExpanded && (
+        <div className="mt-3 p-4 bg-chat-surface/30 rounded-lg border border-chat-border/50">
+          <div className="text-sm text-chat-muted whitespace-pre-wrap">
+            {reasoning}
+          </div>
+        </div>
+      )}
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/src/components/ThinkingIndicator.tsx b/chrome/browser/resources/vibe/apps/chat3/src/components/ThinkingIndicator.tsx
new file mode 100644
index 0000000000..333caef194
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/src/components/ThinkingIndicator.tsx
@@ -0,0 +1,12 @@
+export default function ThinkingIndicator() {
+  return (
+    <div className="flex items-center gap-1 py-2">
+      <span className="text-chat-muted text-sm">Thinking</span>
+      <div className="flex">
+        <span className="thinking-dot"></span>
+        <span className="thinking-dot"></span>
+        <span className="thinking-dot"></span>
+      </div>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/src/components/ToolCallDisplay.tsx b/chrome/browser/resources/vibe/apps/chat3/src/components/ToolCallDisplay.tsx
new file mode 100644
index 0000000000..7b3527d145
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/src/components/ToolCallDisplay.tsx
@@ -0,0 +1,40 @@
+import { Wrench, ChevronRight } from 'lucide-react';
+import { ToolCall } from '../types';
+import { cn } from '../utils/cn';
+import { useState } from 'react';
+
+interface ToolCallDisplayProps {
+  toolCall: ToolCall;
+}
+
+export default function ToolCallDisplay({ toolCall }: ToolCallDisplayProps) {
+  const [isExpanded, setIsExpanded] = useState(false);
+
+  return (
+    <div className="bg-chat-surface/50 rounded-lg p-3 text-sm">
+      <div 
+        className="flex items-center gap-2 cursor-pointer"
+        onClick={() => setIsExpanded(!isExpanded)}
+      >
+        <Wrench size={16} className="text-blue-400" />
+        <span className="font-medium text-blue-400">{toolCall.toolName}</span>
+        <span className="text-chat-muted flex-1">{toolCall.message}</span>
+        <ChevronRight 
+          size={16} 
+          className={cn(
+            "text-chat-muted transition-transform",
+            isExpanded && "rotate-90"
+          )}
+        />
+      </div>
+      
+      {isExpanded && toolCall.details && (
+        <div className="mt-2 pl-6 text-chat-muted">
+          <pre className="text-xs overflow-x-auto">
+            {JSON.stringify(toolCall.details, null, 2)}
+          </pre>
+        </div>
+      )}
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/src/hooks/useAIAgent.ts b/chrome/browser/resources/vibe/apps/chat3/src/hooks/useAIAgent.ts
new file mode 100644
index 0000000000..6bf7e3a1dd
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/src/hooks/useAIAgent.ts
@@ -0,0 +1,97 @@
+import { useState, useEffect, useCallback } from 'react';
+import { Message, AIAgentMessage } from '../types';
+import { createMessage, handleAIAgentMessage } from '../utils/messageHandlers';
+
+export function useAIAgent() {
+  const [messages, setMessages] = useState<Message[]>([]);
+  const [currentMessage, setCurrentMessage] = useState<Message | null>(null);
+  const [isConnected, setIsConnected] = useState(false);
+
+  useEffect(() => {
+    const handleMessage = (
+      request: any,
+      _sender: chrome.runtime.MessageSender,
+      _sendResponse: (response?: any) => void
+    ) => {
+      if (request && request.type) {
+        handleAIAgentMessage(
+          request as AIAgentMessage,
+          currentMessage,
+          setCurrentMessage,
+          (message) => setMessages(prev => [...prev, message])
+        );
+      }
+      // Return true to indicate we will send a response asynchronously
+      return true;
+    };
+
+    // Check if we're in Chrome extension context
+    if (typeof chrome !== 'undefined' && chrome.runtime && chrome.runtime.onMessage) {
+      chrome.runtime.onMessage.addListener(handleMessage);
+      setIsConnected(true);
+      
+      // Send initial connection message
+      chrome.runtime.sendMessage({ type: 'CHAT_CONNECTED' });
+    } else {
+      // Development mode
+      console.log('Running in development mode - Chrome APIs not available');
+      setIsConnected(true);
+      
+      // Simulate some messages for development
+      setTimeout(() => {
+        const devMessage = createMessage('assistant', 'Hello! I\'m running in development mode. Chrome extension APIs are not available.');
+        setMessages([devMessage]);
+      }, 1000);
+    }
+
+    return () => {
+      if (typeof chrome !== 'undefined' && chrome.runtime && chrome.runtime.onMessage) {
+        chrome.runtime.onMessage.removeListener(handleMessage);
+      }
+    };
+  }, [currentMessage]);
+
+  const sendMessage = useCallback((content: string) => {
+    // Add user message to chat
+    const userMessage = createMessage('user', content);
+    setMessages(prev => [...prev, userMessage]);
+
+    // Send to ai_agent.js
+    if (typeof chrome !== 'undefined' && chrome.runtime && chrome.runtime.sendMessage) {
+      chrome.runtime.sendMessage({
+        type: 'USER_MESSAGE',
+        content,
+        timestamp: Date.now(),
+      }).catch(err => {
+        console.error('Failed to send message:', err);
+        const errorMessage = createMessage('system', 'Failed to send message to AI agent');
+        errorMessage.status = 'error';
+        setMessages(prev => [...prev, errorMessage]);
+      });
+    } else {
+      // Development mode - simulate response
+      setTimeout(() => {
+        const thinking = createMessage('assistant', '');
+        thinking.status = 'thinking';
+        setCurrentMessage(thinking);
+        
+        setTimeout(() => {
+          const response = createMessage('assistant', `You said: "${content}"\n\nThis is a simulated response in development mode.`);
+          response.status = 'complete';
+          setMessages(prev => [...prev, response]);
+          setCurrentMessage(null);
+        }, 2000);
+      }, 500);
+    }
+  }, []);
+
+  const allMessages = currentMessage 
+    ? [...messages, currentMessage]
+    : messages;
+
+  return {
+    messages: allMessages,
+    sendMessage,
+    isConnected,
+  };
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/src/index.css b/chrome/browser/resources/vibe/apps/chat3/src/index.css
new file mode 100644
index 0000000000..d3c4fd42f6
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/src/index.css
@@ -0,0 +1,97 @@
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
+
+@layer base {
+  :root {
+    --chat-bg: #212121;
+    --chat-surface: #2a2a2a;
+    --chat-input: #40414f;
+    --chat-hover: #343541;
+    --chat-text: #ececf1;
+    --chat-muted: #8e8ea0;
+    --chat-border: #565869;
+  }
+
+  * {
+    box-sizing: border-box;
+  }
+
+  html, body, #root {
+    height: 100%;
+    margin: 0;
+    padding: 0;
+  }
+
+  body {
+    font-family: Inter, system-ui, -apple-system, sans-serif;
+    background-color: var(--chat-bg);
+    color: var(--chat-text);
+    -webkit-font-smoothing: antialiased;
+    -moz-osx-font-smoothing: grayscale;
+  }
+
+  /* Scrollbar styles */
+  ::-webkit-scrollbar {
+    width: 10px;
+  }
+
+  ::-webkit-scrollbar-track {
+    background: transparent;
+  }
+
+  ::-webkit-scrollbar-thumb {
+    background: var(--chat-border);
+    border-radius: 5px;
+  }
+
+  ::-webkit-scrollbar-thumb:hover {
+    background: var(--chat-muted);
+  }
+}
+
+@layer components {
+  /* Custom button styles */
+  .btn-ghost {
+    @apply hover:bg-chat-hover transition-colors duration-200 rounded-md;
+  }
+
+  /* Message styles */
+  .message-user {
+    @apply bg-chat-surface;
+  }
+
+  .message-assistant {
+    @apply bg-transparent;
+  }
+
+  /* Code block styles */
+  .code-block {
+    @apply bg-black/50 rounded-md p-4 my-2 overflow-x-auto;
+  }
+
+  /* Thinking animation */
+  .thinking-dot {
+    @apply inline-block w-2 h-2 bg-chat-muted rounded-full mx-0.5;
+    animation: thinking 1.4s infinite ease-in-out both;
+  }
+
+  .thinking-dot:nth-child(1) {
+    animation-delay: -0.32s;
+  }
+
+  .thinking-dot:nth-child(2) {
+    animation-delay: -0.16s;
+  }
+
+  @keyframes thinking {
+    0%, 80%, 100% {
+      transform: scale(0);
+      opacity: 0.5;
+    }
+    40% {
+      transform: scale(1);
+      opacity: 1;
+    }
+  }
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/src/main.tsx b/chrome/browser/resources/vibe/apps/chat3/src/main.tsx
new file mode 100644
index 0000000000..cbe1cdf3cb
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/src/main.tsx
@@ -0,0 +1,10 @@
+import React from 'react'
+import ReactDOM from 'react-dom/client'
+import App from './App.tsx'
+import './index.css'
+
+ReactDOM.createRoot(document.getElementById('root')!).render(
+  <React.StrictMode>
+    <App />
+  </React.StrictMode>,
+)
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/src/types/index.ts b/chrome/browser/resources/vibe/apps/chat3/src/types/index.ts
new file mode 100644
index 0000000000..8657159aa0
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/src/types/index.ts
@@ -0,0 +1,44 @@
+export interface Message {
+  id: string;
+  role: 'user' | 'assistant' | 'system';
+  content: string;
+  timestamp: number;
+  reasoning?: string;
+  toolCalls?: ToolCall[];
+  status?: 'sending' | 'thinking' | 'streaming' | 'complete' | 'error';
+}
+
+export interface ToolCall {
+  id: string;
+  toolName: string;
+  message: string;
+  details?: any;
+  timestamp: number;
+}
+
+export interface AIAgentStatus {
+  type: 'USER_QUERY' | 'PROCESSING' | 'COMPLETED' | 'ERROR';
+  message?: string;
+}
+
+export interface ReasoningUpdate {
+  type: 'REASONING_UPDATE';
+  reasoning: string;
+  iteration: number;
+}
+
+export interface ToolUpdate {
+  type: 'TOOL_UPDATE';
+  toolName: string;
+  message: string;
+  details?: any;
+  timestamp: number;
+}
+
+export interface StatusUpdate {
+  type: 'STATUS_UPDATE';
+  status: AIAgentStatus['type'];
+  message?: string;
+}
+
+export type AIAgentMessage = ReasoningUpdate | ToolUpdate | StatusUpdate;
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/src/utils/cn.ts b/chrome/browser/resources/vibe/apps/chat3/src/utils/cn.ts
new file mode 100644
index 0000000000..dad19100d4
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/src/utils/cn.ts
@@ -0,0 +1,6 @@
+import { clsx, type ClassValue } from 'clsx'
+import { twMerge } from 'tailwind-merge'
+
+export function cn(...inputs: ClassValue[]) {
+  return twMerge(clsx(inputs))
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/src/utils/messageHandlers.ts b/chrome/browser/resources/vibe/apps/chat3/src/utils/messageHandlers.ts
new file mode 100644
index 0000000000..043bcab369
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/src/utils/messageHandlers.ts
@@ -0,0 +1,85 @@
+import { AIAgentMessage, Message, ToolCall } from '../types';
+
+export function generateId(): string {
+  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
+}
+
+export function createMessage(role: Message['role'], content: string): Message {
+  return {
+    id: generateId(),
+    role,
+    content,
+    timestamp: Date.now(),
+    status: role === 'user' ? 'complete' : 'thinking',
+  };
+}
+
+export function handleAIAgentMessage(
+  message: AIAgentMessage,
+  currentMessage: Message | null,
+  setCurrentMessage: (message: Message | null) => void,
+  addMessage: (message: Message) => void
+) {
+  switch (message.type) {
+    case 'STATUS_UPDATE':
+      if (message.status === 'USER_QUERY' && currentMessage) {
+        // User query received, mark current message as complete
+        const updatedMessage = { ...currentMessage, status: 'complete' as const };
+        addMessage(updatedMessage);
+        setCurrentMessage(null);
+      } else if (message.status === 'PROCESSING') {
+        // Start new assistant message
+        const newMessage = createMessage('assistant', '');
+        newMessage.status = 'thinking';
+        setCurrentMessage(newMessage);
+      } else if (message.status === 'COMPLETED' && currentMessage) {
+        // Complete current message
+        const updatedMessage = { ...currentMessage, status: 'complete' as const };
+        addMessage(updatedMessage);
+        setCurrentMessage(null);
+      } else if (message.status === 'ERROR') {
+        // Handle error
+        const errorMessage = createMessage('system', message.message || 'An error occurred');
+        errorMessage.status = 'error';
+        addMessage(errorMessage);
+        setCurrentMessage(null);
+      }
+      break;
+
+    case 'REASONING_UPDATE':
+      if (currentMessage) {
+        const updatedMessage = {
+          ...currentMessage,
+          reasoning: message.reasoning,
+          status: 'thinking' as const,
+        };
+        setCurrentMessage(updatedMessage);
+      }
+      break;
+
+    case 'TOOL_UPDATE':
+      if (currentMessage) {
+        const toolCall: ToolCall = {
+          id: generateId(),
+          toolName: message.toolName,
+          message: message.message,
+          details: message.details,
+          timestamp: message.timestamp,
+        };
+        const updatedMessage = {
+          ...currentMessage,
+          toolCalls: [...(currentMessage.toolCalls || []), toolCall],
+          status: 'thinking' as const,
+        };
+        setCurrentMessage(updatedMessage);
+      }
+      break;
+  }
+}
+
+export function formatCode(content: string): string {
+  // Simple code block detection and formatting
+  return content.replace(/```(\w+)?\n([\s\S]*?)```/g, (_match, lang, code) => {
+    return `<pre class="code-block"><code class="language-${lang || 'plaintext'}">${code.trim()}</code></pre>`;
+  });
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/tailwind.config.js b/chrome/browser/resources/vibe/apps/chat3/tailwind.config.js
new file mode 100644
index 0000000000..248dae63ff
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/tailwind.config.js
@@ -0,0 +1,31 @@
+/** @type {import('tailwindcss').Config} */
+export default {
+  content: [
+    "./index.html",
+    "./src/**/*.{js,ts,jsx,tsx}",
+  ],
+  theme: {
+    extend: {
+      colors: {
+        // ChatGPT-like dark theme colors
+        'chat-bg': '#212121',
+        'chat-surface': '#2a2a2a',
+        'chat-input': '#40414f',
+        'chat-hover': '#343541',
+        'chat-text': '#ececf1',
+        'chat-muted': '#8e8ea0',
+        'chat-border': '#565869',
+      },
+      fontFamily: {
+        sans: ['Inter', 'system-ui', '-apple-system', 'sans-serif'],
+      },
+      maxWidth: {
+        'chat': '48rem',
+      },
+      animation: {
+        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
+      }
+    },
+  },
+  plugins: [],
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/tsconfig.json b/chrome/browser/resources/vibe/apps/chat3/tsconfig.json
new file mode 100644
index 0000000000..01a75afc24
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/tsconfig.json
@@ -0,0 +1,28 @@
+{
+  "compilerOptions": {
+    "target": "ES2020",
+    "useDefineForClassFields": true,
+    "lib": ["ES2020", "DOM", "DOM.Iterable"],
+    "module": "ESNext",
+    "skipLibCheck": true,
+
+    /* Bundler mode */
+    "moduleResolution": "bundler",
+    "allowImportingTsExtensions": true,
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "noEmit": true,
+    "jsx": "react-jsx",
+
+    /* Linting */
+    "strict": true,
+    "noUnusedLocals": true,
+    "noUnusedParameters": true,
+    "noFallthroughCasesInSwitch": true,
+
+    /* Chrome extension types */
+    "types": ["chrome"]
+  },
+  "include": ["src"],
+  "references": [{ "path": "./tsconfig.node.json" }]
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/tsconfig.node.json b/chrome/browser/resources/vibe/apps/chat3/tsconfig.node.json
new file mode 100644
index 0000000000..099658cf3d
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/tsconfig.node.json
@@ -0,0 +1,10 @@
+{
+  "compilerOptions": {
+    "composite": true,
+    "skipLibCheck": true,
+    "module": "ESNext",
+    "moduleResolution": "bundler",
+    "allowSyntheticDefaultImports": true
+  },
+  "include": ["vite.config.ts"]
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/apps/chat3/vite.config.ts b/chrome/browser/resources/vibe/apps/chat3/vite.config.ts
new file mode 100644
index 0000000000..c5ccfa5ebc
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat3/vite.config.ts
@@ -0,0 +1,30 @@
+import { defineConfig } from 'vite'
+import react from '@vitejs/plugin-react'
+import path from 'path'
+
+// https://vitejs.dev/config/
+export default defineConfig({
+  plugins: [react()],
+  base: './',
+  build: {
+    outDir: 'dist',
+    emptyOutDir: true,
+    rollupOptions: {
+      input: {
+        main: path.resolve(__dirname, 'index.html'),
+      },
+      output: {
+        entryFileNames: 'chat.js',
+        chunkFileNames: '[name].js',
+        assetFileNames: (assetInfo) => {
+          if (assetInfo.name === 'index.css') return 'chat.css'
+          return '[name][extname]'
+        }
+      }
+    }
+  },
+  server: {
+    port: 3000,
+    open: true
+  }
+})
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/home.css b/chrome/browser/resources/vibe/apps/sidepanel/sidepanel.css
similarity index 66%
rename from chrome/browser/resources/vibe/home.css
rename to chrome/browser/resources/vibe/apps/sidepanel/sidepanel.css
index 42938b147f..84d435a507 100644
--- a/chrome/browser/resources/vibe/home.css
+++ b/chrome/browser/resources/vibe/apps/sidepanel/sidepanel.css
@@ -14,11 +14,6 @@
 
   body {
     @apply antialiased;
-    background-color: #f7f7f8;
-  }
-  
-  .dark body {
-    background-color: #343541;
   }
 }
 
@@ -30,7 +25,7 @@
   }
 
   .messages-container::-webkit-scrollbar {
-    width: 8px;
+    width: 6px;
   }
 
   .messages-container::-webkit-scrollbar-track {
@@ -50,22 +45,21 @@
     field-sizing: content;
   }
 
-  /* Message content styling - optimized for wider layout */
+  /* Message content styling */
   .message-content {
-    line-height: 1.7;
-    max-width: 100%;
+    line-height: 1.6;
   }
 
   .message-content p {
-    @apply mb-3 last:mb-0;
+    @apply mb-2 last:mb-0;
   }
 
   .message-content pre {
-    @apply bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto text-sm my-3;
+    @apply bg-gray-900 text-gray-100 p-3 rounded-lg overflow-x-auto text-sm my-2;
   }
 
   .message-content code {
-    @apply bg-gray-100 text-gray-800 px-2 py-1 rounded text-sm;
+    @apply bg-gray-100 text-gray-800 px-1.5 py-0.5 rounded text-sm;
   }
 
   .message-content pre code {
@@ -73,31 +67,31 @@
   }
 
   .message-content ul, .message-content ol {
-    @apply pl-6 mb-3;
+    @apply pl-5 mb-2;
   }
 
   .message-content li {
-    @apply mb-1.5;
+    @apply mb-1;
   }
 
   .message-content blockquote {
-    @apply border-l-4 border-gray-300 pl-4 italic text-gray-600 my-3;
+    @apply border-l-4 border-gray-300 pl-4 italic text-gray-600 my-2;
   }
 
   .message-content h1, .message-content h2, .message-content h3, .message-content h4, .message-content h5, .message-content h6 {
-    @apply font-semibold mt-6 mb-3;
+    @apply font-semibold mt-4 mb-2;
   }
 
   .message-content h1 {
-    @apply text-2xl;
+    @apply text-xl;
   }
 
   .message-content h2 {
-    @apply text-xl;
+    @apply text-lg;
   }
 
   .message-content h3 {
-    @apply text-lg;
+    @apply text-base;
   }
 
   /* Processing animation */
@@ -132,33 +126,4 @@
   * {
     @apply transition-colors duration-200;
   }
-
-  /* New tab specific styles */
-  .messages-container {
-    min-height: calc(100vh - 200px);
-    @apply items-center; /* Horizontal centering */
-  }
-  
-  .messages-container > * {
-    @apply w-full; /* Each message uses full column */
-  }
-
-  /* Message bubbles with subtle shadow */
-  .message-bubble {
-    @apply shadow-sm;
-  }
-
-  /* Larger welcome message for new tab */
-  #welcomeMessage {
-    padding-top: 10vh;
-  }
-
-  /* Better spacing for wider layout */
-  .user-message {
-    max-width: 60%;
-  }
-
-  .assistant-message {
-    max-width: 80%;
-  }
 }
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/sidepanel.html b/chrome/browser/resources/vibe/apps/sidepanel/sidepanel.html
similarity index 100%
rename from chrome/browser/resources/vibe/sidepanel.html
rename to chrome/browser/resources/vibe/apps/sidepanel/sidepanel.html
diff --git a/chrome/browser/resources/vibe/apps/sidepanel/sidepanel.js b/chrome/browser/resources/vibe/apps/sidepanel/sidepanel.js
new file mode 100644
index 0000000000..c287a905e9
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/sidepanel/sidepanel.js
@@ -0,0 +1,1059 @@
+// @ts-nocheck
+
+/**
+ * Vibe AI Agent Side Panel
+ * Main UI for AI agent interaction and control
+ */
+
+class VibeAISidePanel {
+  constructor() {
+    // Main containers
+    this.messagesContainer = document.querySelector(".messages-container");
+    this.messageInput = document.getElementById("messageInput");
+    this.sendButton = document.getElementById("sendButton");
+    this.welcomeMessage = document.getElementById("welcomeMessage");
+    
+    // State
+    this.isProcessing = false;
+    this.messageHistory = [];
+    this.currentOperationId = null;
+    this.pendingQuestionRequest = null;
+    this.thinkingStartTime = null;
+    this.currentTool = null;
+    
+    // Templates
+    this.userMessageTemplate = document.getElementById("userMessageTemplate").content;
+    this.assistantMessageTemplate = document.getElementById("assistantMessageTemplate").content;
+    this.systemMessageTemplate = document.getElementById("systemMessageTemplate").content;
+    this.thinkingTemplate = document.getElementById("thinkingTemplate").content;
+    
+    this.initialize();
+  }
+  
+  initialize() {
+    console.log("Initializing Vibe AI Side Panel...");
+    
+    // Set up dark mode detection
+    this.setupDarkMode();
+    
+    // Initialize event listeners
+    this.initializeEventListeners();
+    
+    // Set up message input auto-resize
+    this.setupMessageInput();
+    
+    // Listen for messages from background script
+    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
+      const result = this.handleBackgroundMessage(message, sender, sendResponse);
+      if (!result) {
+        sendResponse({ success: true });
+      }
+      return result; // Keep channel open if needed
+    });
+    
+    // Update status
+    this.updateStatus("ready", "Ready");
+    
+    // Load any existing messages from storage
+    this.loadMessages();
+    
+    console.log("✅ [SIDE-PANEL] [sidepanel.js] Vibe AI Side Panel initialized");
+  }
+  
+  initializeEventListeners() {
+    // Send message on button click or Enter key (but allow Shift+Enter for new lines)
+    this.sendButton.addEventListener("click", () => this.sendMessage());
+    this.messageInput.addEventListener("keydown", (e) => {
+      if (e.key === "Enter" && !e.shiftKey) {
+        e.preventDefault();
+        this.sendMessage();
+      }
+    });
+    
+    // Stop button
+    if (this.stopButton) {
+      this.stopButton.addEventListener("click", () => this.stopProcessing());
+    }
+    
+    // Theme toggle
+    if (this.themeToggle) {
+      this.themeToggle.addEventListener("click", () => this.toggleDarkMode());
+    }
+    
+    // Keyboard shortcut: Cmd/Ctrl + E to focus input
+    document.addEventListener("keydown", (e) => {
+      if ((e.ctrlKey || e.metaKey) && e.key === "e") {
+        e.preventDefault();
+        this.messageInput.focus();
+      }
+    });
+  }
+  
+  setupMessageInput() {
+    // Auto-resize textarea as user types
+    this.messageInput.addEventListener('input', () => {
+      this.messageInput.style.height = 'auto';
+      this.messageInput.style.height = Math.min(this.messageInput.scrollHeight, 200) + 'px';
+    });
+    
+    // Focus the input when the panel is opened
+    this.messageInput.focus();
+  }
+  
+  setupDarkMode() {
+    // Check for saved preference or system preference
+    const savedTheme = localStorage.getItem('vibe-theme');
+    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
+    
+    if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
+      this.enableDarkMode();
+    } else {
+      this.disableDarkMode();
+    }
+  }
+  
+  toggleDarkMode() {
+    if (document.documentElement.classList.contains('dark')) {
+      this.disableDarkMode();
+    } else {
+      this.enableDarkMode();
+    }
+  }
+  
+  enableDarkMode() {
+    document.documentElement.classList.add('dark');
+    localStorage.setItem('vibe-theme', 'dark');
+    this.isDarkMode = true;
+    this.updateThemeIcon(true);
+  }
+  
+  disableDarkMode() {
+    document.documentElement.classList.remove('dark');
+    localStorage.setItem('vibe-theme', 'light');
+    this.isDarkMode = false;
+    this.updateThemeIcon(false);
+  }
+  
+  updateThemeIcon(isDark) {
+    if (!this.themeIcon) return;
+    
+    // Update the icon based on theme
+    if (isDark) {
+      // Moon icon for dark mode
+      this.themeIcon.innerHTML = `
+        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
+      `;
+    } else {
+      // Sun icon for light mode
+      this.themeIcon.innerHTML = `
+        <circle cx="12" cy="12" r="5"></circle>
+        <line x1="12" y1="1" x2="12" y2="3"></line>
+        <line x1="12" y1="21" x2="12" y2="23"></line>
+        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
+        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
+        <line x1="1" y1="12" x2="3" y2="12"></line>
+        <line x1="21" y1="12" x2="23" y2="12"></line>
+        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
+        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
+      `;
+    }
+  }
+  
+  /**
+   * Handles sending a message
+   * @param {string} [customMessage] - Optional custom message to send
+   */
+  async sendMessage(customMessage) {
+    try {
+      const message = customMessage || this.messageInput.value.trim();
+      if (!message) return;
+      
+      // Check if we have a pending question request
+      if (this.pendingQuestionRequest) {
+        const response = {
+          requestId: this.pendingQuestionRequest.requestId,
+          response: message,
+          timestamp: new Date().toISOString()
+        };
+        
+        // Add user message to chat
+        this.addMessage('user', message);
+        
+        // Clear input if this was from the input field
+        if (!customMessage) {
+          this.messageInput.value = '';
+          this.messageInput.style.height = 'auto'; // Reset input height
+        }
+        
+        // Send response back to background script
+        await new Promise((resolve) => {
+          chrome.runtime.sendMessage({
+            type: 'USER_QUESTION_RESPONSE',
+            response
+          }, resolve);
+        });
+        
+        // Clear pending question and update status
+        this.pendingQuestionRequest = null;
+        this.updateStatus('Response sent', 'success');
+        return;
+      }
+      
+      // Normal message handling - check if processing
+      if (this.isProcessing) return;
+      
+      // Add user message to chat
+      this.addMessage('user', message);
+      
+      // Clear input if this was from the input field
+      if (!customMessage) {
+        this.messageInput.value = '';
+        this.messageInput.style.height = 'auto'; // Reset input height
+      }
+      
+      // Show loading indicator and auto-scroll
+      this.setProcessing(true);
+      this.scrollToBottom({ behavior: 'smooth' });
+      
+      // Generate operation ID
+      this.currentOperationId = `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
+      
+      console.log('🔍 [SIDE-PANEL] [sidepanel.js] Checking navigator.vibeBrowser:', !!navigator.vibeBrowser);
+      console.log('🔍 [SIDE-PANEL] [sidepanel.js] Checking processAIPrompt:', !!(navigator.vibeBrowser?.processAIPrompt));
+      
+      // Try using C++ API if available, otherwise fall back to extension messaging
+      if (navigator.vibeBrowser?.processAIPrompt) {
+        // Use the C++ API directly
+        console.log('🔧 [SIDE-PANEL] [sidepanel.js] Using C++ API for processing');
+        const result = await navigator.vibeBrowser.processAIPrompt(message);
+        if (result && result.success) {
+          this.addMessage("agent", result.result || "AI processed successfully");
+        } else {
+          this.addMessage("agent", result?.error || "AI processing failed");
+        }
+      } else {
+        // Fallback: Send to background script for processing
+        console.log('🔧 [SIDE-PANEL] [sidepanel.js] Using extension background script for processing');
+        chrome.runtime.sendMessage({
+          type: "processCommand",
+          command: message,
+          source: "sidepanel",
+          operationId: this.currentOperationId
+        }, (response) => {
+          // Handle the response with tool results
+          if (chrome.runtime.lastError) {
+            console.error("❌ [SIDE-PANEL] [sidepanel.js] Runtime error:", chrome.runtime.lastError);
+            this.addMessage("agent", `Error: ${chrome.runtime.lastError.message}`);
+            this.setProcessing(false);
+            return;
+          }
+          
+          if (response && response.success) {
+            // Display individual tool results first
+            if (response.toolResults && Array.isArray(response.toolResults)) {
+              response.toolResults.forEach(toolResult => {
+                if (toolResult.tool === 'reasoning' && toolResult.args) {
+                  // Display thinking process
+                  if (toolResult.args.thinking) {
+                    this.addMessage("agent", `💭 **Thinking**: ${toolResult.args.thinking}`);
+                  }
+                  if (toolResult.args.evaluation) {
+                    this.addMessage("agent", `📊 **Evaluation**: ${toolResult.args.evaluation}`);
+                  }
+                  if (toolResult.args.next_goal) {
+                    this.addMessage("agent", `🎯 **Next Goal**: ${toolResult.args.next_goal}`);
+                  }
+                } else if (toolResult.tool !== 'reasoning') {
+                  // Display other tool results with enhanced formatting
+                  const result = toolResult.result;
+                  if (result && !result.error) {
+                    const resultText = typeof result === 'string' ? result : 'Success';
+                    this.addMessage("system", `🔧 **${toolResult.tool}**: ${resultText}`);
+                  } else if (result && result.error) {
+                    this.addMessage("system", `❌ **${toolResult.tool}**: ${result.error}`);
+                  }
+                }
+              });
+            }
+            
+            // Display final response
+            this.addMessage("agent", response.response || 'Task completed');
+          } else {
+            this.addMessage("agent", `❌ ${response?.error || response?.response || 'Unknown error'}`);
+          }
+          
+          this.setProcessing(false);
+        });
+      }
+    } catch (error) {
+      console.error("❌ [SIDE-PANEL] [sidepanel.js] Error sending message:", error);
+      this.addMessage("agent", `Error: ${error.message}`);
+      this.setProcessing(false);
+    }
+    // Note: We don't call setProcessing(false) here anymore
+    // as it will be handled by the message listener
+  }
+  
+  /**
+   * Adds a message to the chat with proper styling
+   * @param {string} type - 'user', 'agent', or 'system'
+   * @param {string} content - The message content (can include markdown)
+   * @param {Object} options - Additional options
+   * @param {boolean} options.isHtml - Whether the content is already HTML
+   * @returns {HTMLElement} The created message element
+   */
+  addMessage(type, content, options = {}) {
+    // Hide welcome message when first message is added
+    if (this.welcomeMessage && !this.welcomeMessage.classList.contains('hidden')) {
+      this.welcomeMessage.classList.add('hidden');
+    }
+    
+    let messageEl, messageContent;
+    
+    // Select the appropriate template based on message type
+    if (type === 'user') {
+      messageEl = document.importNode(this.userMessageTemplate, true).firstElementChild;
+      messageContent = messageEl.querySelector('.message-content');
+    } else if (type === 'system') {
+      messageEl = document.importNode(this.systemMessageTemplate, true).firstElementChild;
+      messageContent = messageEl.querySelector('.message-content');
+    } else { // 'agent' or 'assistant'
+      messageEl = document.importNode(this.assistantMessageTemplate, true).firstElementChild;
+      messageContent = messageEl.querySelector('.message-content');
+    }
+    
+    // Convert markdown to HTML if needed and remove emojis for user messages
+    const htmlContent = options.isHtml ? content : this.markdownToHtml(content);
+    const cleanContent = type === 'user' ? this.removeEmojis(htmlContent) : htmlContent;
+    messageContent.innerHTML = this.sanitizeHtml(cleanContent);
+    
+    // Add to message history
+    this.messageHistory.push({ type, content, timestamp: Date.now() });
+    
+    // Add message to container
+    this.messagesContainer.appendChild(messageEl);
+    this.scrollToBottom();
+    
+    return messageEl;
+  }
+  
+  /**
+   * Converts markdown to HTML
+   * @param {string} markdown - Markdown text to convert
+   * @returns {string} HTML string
+   */
+  markdownToHtml(markdown) {
+    // Simple markdown to HTML conversion
+    // In a real app, you might want to use a library like marked.js
+    return markdown
+      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Bold
+      .replace(/\*(.*?)\*/g, '<em>$1</em>') // Italic
+      .replace(/^### (.*$)/gm, '<h3 class="text-lg font-semibold mt-4 mb-2">$1</h3>') // Headers
+      .replace(/^## (.*$)/gm, '<h2 class="text-xl font-bold mt-5 mb-3">$1</h2>')
+      .replace(/^# (.*$)/gm, '<h1 class="text-2xl font-bold mt-6 mb-4">$1</h1>')
+      .replace(/\n/g, '<br>') // Line breaks
+      .replace(/`([^`]+)`/g, '<code class="bg-gray-100 dark:bg-gray-700 px-1 py-0.5 rounded text-sm">$1</code>') // Inline code
+      .replace(/```(?:\w+\n)?([\s\S]*?)```/g, 
+        '<pre class="bg-gray-100 dark:bg-gray-800 p-3 rounded-md overflow-x-auto my-2"><code class="block whitespace-pre">$1</code></pre>') // Code blocks
+      .replace(/\[([^\]]+)\]\(([^)]+)\)/g, 
+        '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-blue-600 dark:text-blue-400 hover:underline">$1</a>'); // Links
+  }
+  
+  /**
+   * Sanitizes HTML to prevent XSS while preserving basic formatting
+   * @param {string} html - HTML to sanitize
+   * @returns {string} Sanitized HTML
+   */
+  sanitizeHtml(html) {
+    // Simple sanitization - in production use DOMPurify or similar
+    const temp = document.createElement('div');
+    temp.innerHTML = html;
+    
+    // Remove script tags and other dangerous elements
+    const scripts = temp.querySelectorAll('script');
+    scripts.forEach(script => script.remove());
+    
+    return temp.innerHTML;
+  }
+  
+  /**
+   * Shows a loading indicator while waiting for a response
+   * @returns {HTMLElement} The loading element
+   */
+  showLoading() {
+    // If loading indicator already exists, just make it visible
+    if (this.loadingIndicator) {
+      this.loadingIndicator.classList.remove('hidden');
+      return this.loadingIndicator;
+    }
+    
+    // Create loading indicator from template
+    this.loadingIndicator = document.importNode(this.loaderTemplate, true).firstElementChild;
+    
+    // Add to messages container
+    this.messagesContainer.appendChild(this.loadingIndicator);
+    
+    // Scroll to show the loading indicator
+    this.scrollToBottom({ behavior: 'smooth', delay: 100 });
+    
+    return this.loadingIndicator;
+  }
+  
+  /**
+   * Hides the loading indicator with a fade-out effect
+   */
+  hideLoading() {
+    if (!this.loadingIndicator) return;
+    
+    // Add fade-out class and remove after animation completes
+    this.loadingIndicator.classList.add('opacity-0', 'transition-opacity', 'duration-300');
+    
+    // Remove the element after the fade-out animation completes
+    setTimeout(() => {
+      if (this.loadingIndicator && this.loadingIndicator.parentNode) {
+        this.loadingIndicator.parentNode.removeChild(this.loadingIndicator);
+        this.loadingIndicator = null;
+      }
+    }, 300);
+  }
+  
+  /**
+   * Smoothly scrolls the messages container to the bottom
+   * @param {Object} options - Scroll behavior options
+   * @param {string} options.behavior - Scroll behavior ('smooth' or 'auto')
+   * @param {number} options.delay - Delay in milliseconds before scrolling
+   */
+  scrollToBottom(options = { behavior: 'smooth', delay: 0 }) {
+    if (!this.messagesContainer) return;
+    
+    const scroll = () => {
+      this.messagesContainer.scrollTo({
+        top: this.messagesContainer.scrollHeight,
+        behavior: options.behavior
+      });
+    };
+    
+    if (options.delay > 0) {
+      setTimeout(scroll, options.delay);
+    } else {
+      scroll();
+    }
+    
+    // If we're near the bottom, stay scrolled to bottom when new messages arrive
+    const isNearBottom = 
+      this.messagesContainer.scrollHeight - this.messagesContainer.clientHeight - 
+      this.messagesContainer.scrollTop < 100;
+      
+    if (isNearBottom) {
+      requestAnimationFrame(() => {
+        this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
+      });
+    }
+  }
+  
+  /**
+   * Sets the processing state of the UI
+   * @param {boolean} processing - Whether processing is in progress
+   */
+  setProcessing(processing) {
+    this.isProcessing = processing;
+    
+    // Update input and button states
+    this.messageInput.disabled = processing;
+    this.sendButton.disabled = processing || !this.messageInput.value.trim();
+    
+    // Update send button styling
+    if (processing || !this.messageInput.value.trim()) {
+      this.sendButton.className = "p-2 m-1 rounded-lg bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors";
+    } else {
+      this.sendButton.className = "p-2 m-1 rounded-lg bg-green-600 hover:bg-green-700 text-white transition-colors";
+    }
+    
+    // Show/hide thinking indicator
+    if (processing) {
+      this.showThinking();
+    } else {
+      this.hideThinking();
+    }
+  }
+
+  /**
+   * Stops the current processing operation
+   */
+  stopProcessing() {
+    console.log("🛑 [SIDE-PANEL] [sidepanel.js] Stop button clicked");
+    
+    if (!this.isProcessing || !this.currentOperationId) {
+      console.log("⚠️ [SIDE-PANEL] [sidepanel.js] No operation to stop");
+      return;
+    }
+
+    // Send stop message to background
+    chrome.runtime.sendMessage({
+      type: "stopOperation",
+      operationId: this.currentOperationId,
+      source: "sidepanel"
+    });
+
+    // Add message and reset state
+    this.addMessage("system", "🛑 Operation stopped by user");
+    this.setProcessing(false);
+    this.currentOperationId = null;
+  }
+  
+  /**
+   * Updates the status indicator with visual feedback
+   * @param {string} status - The status message to display
+   * @param {string} [type='info'] - Status type: 'info', 'success', 'warning', 'error', or 'processing'
+   * @param {Object} [options] - Additional options
+   * @param {number} [options.timeout=3000] - Auto-hide timeout in ms (0 to disable)
+   * @param {boolean} [options.showDot=true] - Whether to show the status dot
+   */
+  updateStatus(status, type = 'info', options = {}) {
+    if (!this.statusIndicator) return;
+    
+    const {
+      timeout = type === 'info' ? 3000 : 0,
+      showDot = true
+    } = options;
+    
+    // Update status text
+    const statusText = this.statusIndicator.querySelector('.status-text');
+    if (statusText) {
+      statusText.textContent = status || '';
+      const statusTextClass = type === 'error' ? 'text-red-600 dark:text-red-400' :
+        type === 'warning' ? 'text-yellow-600 dark:text-yellow-400' :
+        type === 'success' ? 'text-green-600 dark:text-green-400' :
+        'text-gray-600 dark:text-gray-400';
+      statusText.className = `status-text text-xs font-medium ${statusTextClass} transition-colors duration-200`;
+    }
+    
+    // Update status dot if enabled
+    if (showDot) {
+      const statusDot = this.statusIndicator.querySelector('.status-dot');
+      if (statusDot) {
+        // Remove all status classes
+        const classesToRemove = [
+          'bg-green-500', 'bg-yellow-500', 'bg-red-500', 'bg-blue-500', 'bg-gray-400',
+          'ring-2', 'ring-offset-2', 'ring-green-500', 'ring-yellow-500', 'ring-red-500', 
+          'ring-blue-500', 'ring-gray-400', 'animate-pulse', 'pulse'
+        ];
+        statusDot.classList.remove(...classesToRemove);
+        
+        // Add appropriate classes based on status type
+        const dotClasses = ['w-2', 'h-2', 'rounded-full', 'transition-all', 'duration-300'];
+        
+        switch (type) {
+          case 'success':
+            dotClasses.push('bg-green-500', 'ring-2', 'ring-green-500/50');
+            break;
+          case 'warning':
+            dotClasses.push('bg-yellow-500', 'ring-2', 'ring-yellow-500/50', 'animate-pulse');
+            break;
+          case 'error':
+            dotClasses.push('bg-red-500', 'ring-2', 'ring-red-500/50', 'pulse');
+            break;
+          case 'processing':
+            dotClasses.push('bg-blue-500', 'ring-2', 'ring-blue-500/50', 'pulse');
+            break;
+          default: // info
+            dotClasses.push('bg-gray-400');
+        }
+        
+        statusDot.className = `status-dot ${dotClasses.join(' ')}`;
+      }
+    }
+    
+    // Show status indicator with animation
+    this.statusIndicator.classList.remove('opacity-0', 'invisible');
+    this.statusIndicator.classList.add('opacity-100', 'transition-opacity', 'duration-200');
+    
+    // Auto-hide after delay if specified
+    if (timeout > 0) {
+      clearTimeout(this.statusTimeout);
+      this.statusTimeout = setTimeout(() => {
+        if (this.statusIndicator) {
+          this.statusIndicator.classList.add('opacity-0');
+          this.statusIndicator.classList.remove('opacity-100');
+          
+          // Hide completely after fade out
+          setTimeout(() => {
+            if (this.statusIndicator) {
+              this.statusIndicator.classList.add('invisible');
+            }
+          }, 200);
+        }
+      }, timeout);
+    }
+  }
+
+  /**
+   * Loads messages from storage
+   */
+  async loadMessages() {
+    try {
+      // Try to load messages from chrome.storage.local
+      const result = await new Promise((resolve) => {
+        chrome.storage.local.get(['vibe_chat_history'], resolve);
+      });
+      
+      if (result && result.vibe_chat_history) {
+        this.messageHistory = result.vibe_chat_history;
+        
+        // Clear existing messages
+        this.messagesContainer.innerHTML = '';
+        
+        // Add each message to the UI
+        this.messageHistory.forEach(msg => {
+          this.addMessage(msg.type, msg.content, { 
+            isHtml: msg.isHtml || false 
+          });
+        });
+        
+        console.log('📝 [SIDE-PANEL] [sidepanel.js] Loaded', this.messageHistory.length, 'messages from storage');
+      }
+    } catch (error) {
+      console.error('❌ [SIDE-PANEL] [sidepanel.js] Error loading messages:', error);
+    }
+  }
+  
+  /**
+   * Saves messages to storage
+   */
+  async saveMessages() {
+    try {
+      // Only keep the last 100 messages to prevent storage issues
+      const messagesToSave = this.messageHistory.slice(-100);
+      
+      await new Promise((resolve) => {
+        chrome.storage.local.set({ vibe_chat_history: messagesToSave }, resolve);
+      });
+      
+      console.log('💾 [SIDE-PANEL] [sidepanel.js] Saved', messagesToSave.length, 'messages to storage');
+    } catch (error) {
+      console.error('❌ [SIDE-PANEL] [sidepanel.js] Error saving messages:', error);
+    }
+  }
+
+  /**
+   * Updates the quick action suggestions
+   * @param {Array} suggestions - Array of suggestion objects with text and optional command
+   */
+  updateSuggestions(suggestions) {
+    if (!this.quickActionsContainer) return;
+    
+    console.log("💡 [SIDE-PANEL] [sidepanel.js] Updating suggestions:", suggestions);
+    
+    // Clear existing suggestions
+    this.quickActionsContainer.innerHTML = '';
+    
+    if (!suggestions || suggestions.length === 0) {
+      // Hide suggestions if empty
+      this.quickActionsContainer.classList.add('hidden');
+      return;
+    }
+    
+    // Create title
+    const title = document.createElement('h3');
+    title.className = 'text-sm font-medium text-gray-500 dark:text-gray-400 mb-2';
+    title.textContent = 'Suggested Actions';
+    this.quickActionsContainer.appendChild(title);
+    
+    // Create buttons container
+    const buttonsContainer = document.createElement('div');
+    buttonsContainer.className = 'flex flex-wrap gap-2';
+    
+    // Add each suggestion as a button
+    suggestions.forEach(suggestion => {
+      const button = document.createElement('button');
+      button.className = 'px-3 py-1.5 text-sm font-medium rounded-full bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors';
+      
+      // Set button text and click handler
+      button.textContent = typeof suggestion === 'object' ? (suggestion.text || suggestion.command) : suggestion;
+      
+      button.addEventListener('click', () => {
+        const command = typeof suggestion === 'object' ? (suggestion.command || suggestion.text) : suggestion;
+        this.messageInput.value = command;
+        this.sendMessage();
+      });
+      
+      // Add icon if provided
+      if (suggestion.icon) {
+        const icon = document.createElement('span');
+        icon.className = `mr-2 ${suggestion.icon}`;
+        button.prepend(icon);
+      }
+      
+      buttonsContainer.appendChild(button);
+    });
+    
+    this.quickActionsContainer.appendChild(buttonsContainer);
+    this.quickActionsContainer.classList.remove('hidden');
+    
+    console.log('💡 [SIDE-PANEL] [sidepanel.js] Updated quick actions with', suggestions.length, 'suggestions');
+  }
+
+  /**
+   * Handles messages from the background script
+   * @param {Object} message - The message object
+   * @param {MessageSender} sender - The sender of the message
+   * @param {Function} sendResponse - Function to send a response
+   * @returns {boolean|undefined} True if using sendResponse asynchronously
+   */
+  handleBackgroundMessage(message, sender, sendResponse) {
+    if (!message || !message.type) {
+      console.warn("⚠️ [SIDE-PANEL] [sidepanel.js] Received invalid message:", message);
+      return;
+    }
+    
+    console.log(`📨 [SIDE-PANEL] [sidepanel.js] Received message type: ${message.type}`, message);
+    
+    try {
+      switch (message.type) {
+        case "omniboxQuery":
+          this.handleOmniboxQuery(message.query);
+          break;
+          
+        case "commandResult":
+          this.addMessage("agent", message.result || 'Operation completed successfully');
+          this.setProcessing(false);
+          break;
+          
+        case "commandError":
+          this.addMessage("agent", `❌ Error: ${message.error || 'An unknown error occurred'}`);
+          this.setProcessing(false);
+          break;
+          
+        case "updateSuggestions":
+          this.updateSuggestions(message.suggestions || []);
+          break;
+          
+        case "STATUS_UPDATE":
+          this._handleStatusUpdate(message);
+          break;
+          
+        case "TOOL_UPDATE":
+          this._handleToolUpdate(message);
+          break;
+          
+        case "REASONING_UPDATE":
+          this._handleReasoningUpdate(message);
+          break;
+          
+        case "USER_QUESTION":
+          this._handleUserQuestion(message, sendResponse);
+          return true; // Keep message channel open for response
+          
+        case "displayQuestion":
+          this._askUserQuestion(message.question, message.context, sendResponse);
+          return true; // Keep message channel open for response
+          
+        case "displayOptions":
+          this._showUserOptions(message.message, message.options, message.context, sendResponse);
+          return true; // Keep message channel open for response
+          
+        case "displayConfirmation":
+          this._requestUserConfirmation(message.action, message.details, message.price, sendResponse);
+          return true; // Keep message channel open for response
+          
+        case "setProcessing":
+          this.setProcessing(!!message.processing);
+          break;
+          
+        case "addMessage":
+          this.addMessage(
+            message.messageType || 'system',
+            message.content || '',
+            { isHtml: !!message.isHtml }
+          );
+          break;
+          
+        case "clearChat":
+          this.clearChat();
+          break;
+          
+        default:
+          console.warn("⚠️ [SIDE-PANEL] [sidepanel.js] Unhandled message type:", message.type);
+      }
+    } catch (error) {
+      console.error("❌ [SIDE-PANEL] [sidepanel.js] Error handling message:", error, message);
+      
+      // Show error to user if we have a message container
+      if (this.messagesContainer) {
+        this.addMessage('system', `Error: ${error.message || 'An unknown error occurred'}`);
+      }
+      
+      // If we have a sendResponse function, send the error
+      if (typeof sendResponse === 'function') {
+        sendResponse({ success: false, error: error.message || 'Unknown error' });
+      }
+    }
+  }
+  
+  /**
+   * Handles status update messages
+   * @param {Object} message - The status update message
+   * @private
+   */
+  _handleStatusUpdate(message) {
+    if (!message.data) return;
+    
+    console.log('📊 [SIDE-PANEL] [sidepanel.js] Processing status update:', JSON.stringify(message.data));
+    
+    switch (message.data.type) {
+      case 'USER_QUERY':
+        // Only add user messages that come from other sources (like omnibox)
+        if (message.data.source && message.data.source !== 'sidepanel') {
+          this.addMessage("user", message.data.message);
+        }
+        break;
+        
+      case 'PROCESSING':
+        this.addMessage("system", `🔄 ${message.data.message || 'Processing...'}`);
+        this.setProcessing(true);
+        break;
+        
+      case 'COMPLETED':
+        if (message.data.result) {
+          // Display individual tool results, especially reasoning/thinking
+          if (message.data.result.toolResults && Array.isArray(message.data.result.toolResults)) {
+            this._processToolResults(message.data.result.toolResults);
+          }
+          
+          // Display final response if available
+          if (message.data.result.response) {
+            this.addMessage("agent", message.data.result.response);
+          } else if (!message.data.result.success) {
+            this.addMessage("agent", `❌ ${message.data.result.error || 'Operation failed'}`);
+          }
+        }
+        this.setProcessing(false);
+        break;
+        
+      case 'ERROR':
+        this.addMessage("system", `❌ ${message.data.error || 'An error occurred'}`);
+        this.setProcessing(false);
+        break;
+        
+      default:
+        console.warn('⚠️ [SIDE-PANEL] [sidepanel.js] Unknown status type:', message.data.type);
+    }
+  }
+  
+  /**
+   * Processes tool results and adds appropriate messages
+   * @param {Array} toolResults - Array of tool result objects
+   * @private
+   */
+  _processToolResults(toolResults) {
+    try {
+      toolResults.forEach(toolResult => {
+        // Update tool indicator to show current tool
+        if (toolResult.tool && this.isProcessing) {
+          this.updateToolIndicator(`Using ${this._getToolDisplayName(toolResult.tool)}...`);
+        }
+        
+        if (toolResult.tool === 'reasoning' && toolResult.args) {
+          // Display thinking process
+          if (toolResult.args.thinking) {
+            this.addMessage("agent", `💭 **Thinking**: ${toolResult.args.thinking}`);
+          }
+          if (toolResult.args.evaluation) {
+            this.addMessage("agent", `📊 **Evaluation**: ${toolResult.args.evaluation}`);
+          }
+          if (toolResult.args.next_goal) {
+            this.addMessage("agent", `🎯 **Next Goal**: ${toolResult.args.next_goal}`);
+          }
+        } else if (toolResult.tool !== 'reasoning') {
+          // Display other tool results briefly
+          const result = toolResult.result;
+          if (result && !result.error) {
+            this.addMessage("system", `🔧 ${this._getToolDisplayName(toolResult.tool)}: ${typeof result === 'string' ? result : 'Success'}`);
+          } else if (result && result.error) {
+            this.addMessage("system", `❌ ${this._getToolDisplayName(toolResult.tool)}: ${result.error}`);
+          }
+        }
+      });
+    } catch (error) {
+      console.error("❌ [SIDE-PANEL] [sidepanel.js] Error in _processToolResults:", error);
+      this.addMessage("system", `❌ Error processing tool results: ${error.message || 'Unknown error'}`);
+    }
+  }
+
+  /**
+   * Handles user questions from the LLM
+   * @param {Object} message - The message object
+   * @param {Function} sendResponse - Function to send a response
+   * @private
+   */
+  _handleUserQuestion(message, sendResponse) {
+    console.log('❓ [SIDE-PANEL] Handling user question:', message.question);
+
+    // Add the question as an agent message
+    this.addMessage("agent", `❓ ${message.question}`);
+
+    // Store the request info for when user responds
+    this.pendingQuestionRequest = {
+      requestId: message.requestId,
+      sendResponse: sendResponse
+    };
+
+    // Update status to show we're waiting for user input
+    this.updateStatus("waiting", "Waiting for your response...");
+
+    // Acknowledge receipt
+    sendResponse({ success: true });
+
+    return true;
+  }
+
+
+  /**
+   * Remove emojis from text content
+   */
+  /**
+   * Handle tool update messages
+   * @param {Object} message - The tool update message
+   * @private
+   */
+  _handleToolUpdate(message) {
+    console.log('🔧 [SIDE-PANEL] Tool update received:', message);
+    
+    if (message.tool && this.isProcessing) {
+      // Update the tool indicator in the thinking display
+      this.updateToolIndicator(message.message || `Using ${this._getToolDisplayName(message.tool)}...`);
+      
+      // Show tool details if available
+      if (message.details && (message.details.error || message.details.success)) {
+        const statusIcon = message.details.error ? '❌' : message.details.success ? '✅' : '🔧';
+        const toolMessage = message.details.error 
+          ? `${statusIcon} ${this._getToolDisplayName(message.tool)}: ${message.details.error}`
+          : `${statusIcon} ${this._getToolDisplayName(message.tool)}: Success`;
+        
+        // Only show significant tool results (errors or important completions)
+        if (message.details.error || message.tool === 'reasoning') {
+          this.addMessage("system", toolMessage);
+        }
+      }
+    }
+  }
+
+  /**
+   * Handle reasoning update messages
+   * @param {Object} message - The reasoning update message
+   * @private
+   */
+  _handleReasoningUpdate(message) {
+    console.log('🧠 [SIDE-PANEL] Reasoning update received:', message);
+    
+    if (message.reasoning && message.reasoning.trim()) {
+      // Show AI reasoning as agent message
+      const reasoningText = `💭 **Iteration ${message.iteration}**: ${message.reasoning}`;
+      this.addMessage("agent", reasoningText);
+    }
+  }
+
+  /**
+   * Get display name for tools
+   * @param {string} toolName - Internal tool name
+   * @returns {string} Display name
+   * @private
+   */
+  _getToolDisplayName(toolName) {
+    const toolNames = {
+      'clickElement': 'Click Element',
+      'fillInput': 'Fill Input',
+      'getPageContent': 'Get Page Content',
+      'scrollPage': 'Scroll Page',
+      'navigateToUrl': 'Navigate to URL',
+      'takeScreenshot': 'Take Screenshot',
+      'reasoning': 'Reasoning',
+      'webSearch': 'Web Search',
+      'readFile': 'Read File',
+      'writeFile': 'Write File'
+    };
+    return toolNames[toolName] || toolName;
+  }
+
+  removeEmojis(text) {
+    // Remove common emojis used in the system
+    return text.replace(/[🚀🔧📊❌✅⏳💭🎯🔍⚠️📸📝🌐✨📋❓]/g, '')
+               .replace(/\s+/g, ' ')
+               .trim();
+  }
+
+  /**
+   * Show thinking indicator
+   * @param {string} toolName - Name of the current tool being used
+   */
+  showThinking(toolName = 'Thinking...') {
+    this.thinkingStartTime = Date.now();
+    this.currentTool = toolName;
+    
+    const thinkingEl = document.importNode(this.thinkingTemplate, true).firstElementChild;
+    const durationSpan = thinkingEl.querySelector('.thinking-duration');
+    const toolNameSpan = thinkingEl.querySelector('.tool-name');
+    
+    // Set initial tool name
+    if (toolNameSpan) {
+      toolNameSpan.textContent = toolName;
+    }
+    
+    // Update duration every second
+    const updateDuration = () => {
+      if (this.thinkingStartTime) {
+        const seconds = Math.floor((Date.now() - this.thinkingStartTime) / 1000);
+        if (durationSpan) {
+          durationSpan.textContent = seconds;
+        }
+      }
+    };
+    
+    this.thinkingInterval = setInterval(updateDuration, 1000);
+    
+    this.messagesContainer.appendChild(thinkingEl);
+    this.currentThinkingElement = thinkingEl;
+    this.scrollToBottom();
+  }
+
+  /**
+   * Update the current tool being used
+   * @param {string} toolName - Name of the tool
+   */
+  updateToolIndicator(toolName) {
+    this.currentTool = toolName;
+    if (this.currentThinkingElement) {
+      const toolNameSpan = this.currentThinkingElement.querySelector('.tool-name');
+      if (toolNameSpan) {
+        toolNameSpan.textContent = toolName;
+      }
+    }
+  }
+
+  /**
+   * Hide thinking indicator
+   */
+  hideThinking() {
+    if (this.thinkingInterval) {
+      clearInterval(this.thinkingInterval);
+      this.thinkingInterval = null;
+    }
+    
+    if (this.currentThinkingElement) {
+      this.currentThinkingElement.remove();
+      this.currentThinkingElement = null;
+    }
+    
+    this.thinkingStartTime = null;
+    this.currentTool = null;
+  }
+
+}
+
+// Initialize the side panel when the DOM is fully loaded
+document.addEventListener('DOMContentLoaded', () => {
+  window.vibeSidePanel = new VibeAISidePanel();
+});
+
+// Make available globally for debugging
+window.VibeAISidePanel = VibeAISidePanel;
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/background.js b/chrome/browser/resources/vibe/background.js
index 1b49b7028d..6a7de48ff5 100644
--- a/chrome/browser/resources/vibe/background.js
+++ b/chrome/browser/resources/vibe/background.js
@@ -543,6 +543,11 @@ chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
       handleReasoningUpdate(message, sendResponse);
       return true; // Keep the message channel open for async response
       
+    case 'AI_AGENT_REQUEST':
+      // Handle AI agent requests from home page
+      handleAIAgentRequest(message, sendResponse);
+      return true; // Keep the message channel open for async response
+      
     default:
       console.log('❓ Unknown message type:', message.type);
       sendResponse({ success: false, error: 'Unknown message type' });
@@ -744,4 +749,42 @@ function handleUpdateSuggestions(message, sendResponse) {
   }
 }
 
+// Handle AI agent requests from home page
+async function handleAIAgentRequest(message, sendResponse) {
+  console.log('🤖 [AI_AGENT_REQUEST] Processing request from home page:', message.payload);
+  
+  try {
+    const { user_request, tabId, config } = message.payload;
+    
+    if (!user_request) {
+      throw new Error('No user request provided');
+    }
+    
+    // Process the request with the AI agent
+    const response = await aiAgent.process({
+      user_request,
+      tabId,
+      config
+    });
+    
+    console.log('✅ [AI_AGENT_REQUEST] AI agent response:', response);
+    
+    // Send successful response back to home page
+    sendResponse({
+      success: true,
+      content: response.content || response.message || response,
+      data: response
+    });
+    
+  } catch (error) {
+    console.error('❌ [AI_AGENT_REQUEST] Error processing AI agent request:', error);
+    
+    // Send error response back to home page
+    sendResponse({
+      success: false,
+      error: error.message || 'Failed to process AI agent request'
+    });
+  }
+}
+
 console.log('✅ [BACKGROUND] Background script initialization complete');
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/build.js b/chrome/browser/resources/vibe/build.js
new file mode 100755
index 0000000000..d1aaf1a983
--- /dev/null
+++ b/chrome/browser/resources/vibe/build.js
@@ -0,0 +1,151 @@
+#!/usr/bin/env node
+// esbuild.config.js
+import * as esbuild from 'esbuild';
+import * as fs from 'fs';
+import * as path from 'path';
+import { fileURLToPath } from 'url';
+import { execSync } from 'child_process';
+
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = path.dirname(__filename);
+
+const isProd = process.env.NODE_ENV === 'production';
+const outDir = process.argv[2] || "dist";
+
+// Check if VIBE_BUILD_CHAT3 environment variable is set
+const shouldBuildChat3 = ['true', '1', 'yes'].includes(process.env.VIBE_BUILD_CHAT3?.toLowerCase());
+
+const chat2AppDir = path.resolve(__dirname, 'apps/chat2');
+const chat3AppDir = path.resolve(__dirname, 'apps/chat3');
+
+// Ensure output directory exists
+function ensureDirectoryExists(filePath) {
+  const dirname = path.dirname(filePath);
+  if (fs.existsSync(dirname)) {
+    return true;
+  }
+  ensureDirectoryExists(dirname);
+  fs.mkdirSync(dirname);
+}
+
+
+// Build chat2 app if it exists
+function buildChat2App() {
+  const outputDirAbsolute = path.resolve(__dirname, outDir);
+  // Run the chat2 build script
+  console.log('Building chat2 app...');
+  execSync('npm run build', { 
+    cwd: chat2AppDir, 
+    stdio: 'inherit',
+    env: { 
+      ...process.env, 
+      NODE_ENV: 'production',
+      OUTPUT_DIRECTORY: outputDirAbsolute
+    }
+  });
+}
+
+// Copy static files
+function copyStaticFiles() {
+  const filesToCopy = [
+    'manifest.json',
+    'assets/icon16.png',
+    'assets/icon48.png',
+    'assets/icon128.png'
+  ];
+  
+  filesToCopy.forEach(file => {
+    const srcPath = path.resolve(__dirname, file);
+    const destPath = path.resolve(__dirname, outDir, file);
+    
+    try {
+      ensureDirectoryExists(destPath);
+      fs.copyFileSync(srcPath, destPath);
+      console.log(`Copied ${file} to ${destPath}`);
+    } catch (err) {
+      console.error(`Error copying ${file}:`, err);
+      process.exit(1);
+    }
+  });
+}
+
+// Build chat3 app if it exists
+function buildChat3App() {
+  const outputDirAbsolute = path.resolve(__dirname, outDir);
+  
+  // First run npm install if needed
+  if (!fs.existsSync(path.join(chat3AppDir, 'node_modules'))) {
+    console.log('Installing chat3 dependencies...');
+    execSync('npm install', { 
+      cwd: chat3AppDir, 
+      stdio: 'inherit'
+    });
+  }
+  
+  // Run consolidated build script
+  console.log('Building chat3 app...');
+  execSync('npm run build', { 
+    cwd: chat3AppDir, 
+    stdio: 'inherit',
+    env: { 
+      ...process.env, 
+      NODE_ENV: 'production',
+      OUTPUT_DIRECTORY: outputDirAbsolute
+    }
+  });
+}
+
+// Build JavaScript files
+async function buildJS() {
+  try {
+    await esbuild.build({
+      entryPoints: {
+        background: 'background.js',
+        content: 'content.js',
+      },
+      bundle: true,
+      splitting: false,
+      format: 'iife',
+      outdir: outDir,
+      target: ['chrome112'],
+      sourcemap: true,
+      minify: isProd,
+      platform: 'browser',
+      external: [],
+      define: {
+        'process.env.NODE_ENV': isProd ? '"production"' : '"development"',
+        'global': 'globalThis'
+      },
+      inject: ['./lib/test/async_hooks_shim.js'],
+    });
+    
+    console.log('JavaScript build completed');
+  } catch (err) {
+    console.error('Error building JavaScript:', err);
+    process.exit(1);
+  }
+}
+
+
+
+// Main build function
+async function build() {
+  if (!fs.existsSync(outDir)) {
+    fs.mkdirSync(outDir, { recursive: true });
+  }
+  
+  if (shouldBuildChat3) {
+    buildChat3App();
+  } else {
+    buildChat2App();
+  }
+  
+  // Build JS
+  await buildJS();
+  
+  // Copy static files
+  copyStaticFiles();
+}
+
+// Run the build
+build().catch(console.error);
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/build.py b/chrome/browser/resources/vibe/build.py
index 583a90fe5b..461eed9c74 100644
--- a/chrome/browser/resources/vibe/build.py
+++ b/chrome/browser/resources/vibe/build.py
@@ -13,5 +13,12 @@ if len(sys.argv) > 1:
     output_dir_abs = os.path.abspath(output_dir_rel)
 
 # Run the webpack build
-cmd = ["node", "esbuild.js", output_dir_abs]
-subprocess.check_call(cmd, cwd=script_dir)
+cmd = ["node", "build.js", output_dir_abs]
+
+# Pass through VIBE_BUILD_CHAT3 environment variable
+env = os.environ.copy()
+if os.environ.get('VIBE_BUILD_CHAT3', '').lower() in ['true', '1', 'yes']:
+    print("Building with chat3 enabled (VIBE_BUILD_CHAT3=true)")
+    env['VIBE_BUILD_CHAT3'] = 'true'
+
+subprocess.check_call(cmd, cwd=script_dir, env=env)
diff --git a/chrome/browser/resources/vibe/chat_interface.js b/chrome/browser/resources/vibe/chat_interface.js
new file mode 100644
index 0000000000..305d8c30a3
--- /dev/null
+++ b/chrome/browser/resources/vibe/chat_interface.js
@@ -0,0 +1,371 @@
+// Chat interface for Chrome extension integration with ai_agent.js
+class VibeChatApp {
+    constructor() {
+        this.messages = [];
+        this.messageInput = document.getElementById('message-input');
+        this.sendButton = document.getElementById('send-button');
+        this.messagesContainer = document.getElementById('messages');
+        
+        // Processing state
+        this.isProcessing = false;
+        this.currentThinkingElement = null;
+        this.thinkingStartTime = null;
+        this.thinkingInterval = null;
+        this.currentTool = null;
+        
+        this.initialize();
+    }
+    
+    initialize() {
+        // Set up event listeners
+        this.sendButton.addEventListener('click', () => this.sendMessage());
+        this.messageInput.addEventListener('keydown', (e) => {
+            if (e.key === 'Enter' && !e.shiftKey) {
+                e.preventDefault();
+                this.sendMessage();
+            }
+        });
+        
+        // Auto-resize textarea
+        this.messageInput.addEventListener('input', () => {
+            this.messageInput.style.height = 'auto';
+            this.messageInput.style.height = Math.min(this.messageInput.scrollHeight, 100) + 'px';
+        });
+        
+        // Setup chrome extension messaging
+        if (typeof chrome !== 'undefined' && chrome.runtime) {
+            chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
+                this.handleChromeMessage(message, sender, sendResponse);
+                return true; // Keep channel open
+            });
+        }
+        
+        // Dark mode detection
+        this.setupDarkMode();
+        
+        console.log('Vibe Chat App initialized');
+    }
+    
+    setupDarkMode() {
+        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
+        const savedTheme = localStorage.getItem('vibe-theme');
+        
+        if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
+            document.body.classList.add('dark');
+        }
+    }
+    
+    sendMessage() {
+        const message = this.messageInput.value.trim();
+        if (!message || this.isProcessing) return;
+        
+        // Add user message to chat
+        this.addMessage('user', message);
+        
+        // Clear input
+        this.messageInput.value = '';
+        this.messageInput.style.height = 'auto';
+        
+        // Set processing state
+        this.setProcessing(true);
+        
+        // Send to ai_agent.js through chrome extension messaging
+        if (typeof chrome !== 'undefined' && chrome.runtime) {
+            chrome.runtime.sendMessage({
+                type: "processCommand",
+                command: message,
+                source: "chat",
+                timestamp: Date.now()
+            }, (response) => {
+                if (chrome.runtime.lastError) {
+                    console.error('Chrome runtime error:', chrome.runtime.lastError);
+                    this.addMessage('assistant', 'Error: Could not send message');
+                    this.setProcessing(false);
+                    return;
+                }
+                
+                if (response && response.success) {
+                    // Response will be handled through message listener
+                } else {
+                    this.addMessage('assistant', response?.error || 'Unknown error occurred');
+                    this.setProcessing(false);
+                }
+            });
+        }
+    }
+    
+    addMessage(type, content) {
+        const messageEl = document.createElement('div');
+        messageEl.className = `message ${type}`;
+        
+        const contentEl = document.createElement('div');
+        contentEl.className = 'message-content';
+        contentEl.innerHTML = this.formatMessage(content);
+        
+        messageEl.appendChild(contentEl);
+        this.messagesContainer.appendChild(messageEl);
+        
+        // Scroll to bottom
+        this.scrollToBottom();
+        
+        // Store message
+        this.messages.push({ type, content, timestamp: Date.now() });
+    }
+    
+    formatMessage(content) {
+        // Simple markdown-like formatting
+        return content
+            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
+            .replace(/\*(.*?)\*/g, '<em>$1</em>')
+            .replace(/`([^`]+)`/g, '<code>$1</code>')
+            .replace(/\n/g, '<br>');
+    }
+    
+    handleChromeMessage(message, sender, sendResponse) {
+        console.log('📨 Received message:', message.type, message);
+        
+        switch (message.type) {
+            case 'commandResult':
+                this.addMessage('assistant', message.result || 'Task completed');
+                this.setProcessing(false);
+                break;
+                
+            case 'commandError':
+                this.addMessage('assistant', `❌ Error: ${message.error || 'Unknown error'}`);
+                this.setProcessing(false);
+                break;
+                
+            case 'STATUS_UPDATE':
+                this._handleStatusUpdate(message);
+                break;
+                
+            case 'TOOL_UPDATE':
+                this._handleToolUpdate(message);
+                break;
+                
+            case 'REASONING_UPDATE':
+                this._handleReasoningUpdate(message);
+                break;
+                
+            case 'setProcessing':
+                this.setProcessing(!!message.processing);
+                break;
+                
+            case 'addMessage':
+                this.addMessage(message.messageType || 'assistant', message.content || '');
+                break;
+                
+            case 'clearChat':
+                this.clearChat();
+                break;
+                
+            default:
+                console.warn('⚠️ Unhandled message type:', message.type);
+        }
+        
+        sendResponse({ success: true });
+    }
+    
+    _handleStatusUpdate(message) {
+        if (!message.data) return;
+        
+        switch (message.data.type) {
+            case 'USER_QUERY':
+                if (message.data.source && message.data.source !== 'chat') {
+                    this.addMessage('user', message.data.message);
+                }
+                break;
+                
+            case 'PROCESSING':
+                this.addMessage('system', `🔄 ${message.data.message || 'Processing...'}`);
+                this.setProcessing(true);
+                break;
+                
+            case 'COMPLETED':
+                if (message.data.result) {
+                    if (message.data.result.toolResults && Array.isArray(message.data.result.toolResults)) {
+                        this._processToolResults(message.data.result.toolResults);
+                    }
+                    
+                    if (message.data.result.response) {
+                        this.addMessage('assistant', message.data.result.response);
+                    } else if (!message.data.result.success) {
+                        this.addMessage('assistant', `❌ ${message.data.result.error || 'Operation failed'}`);
+                    }
+                }
+                this.setProcessing(false);
+                break;
+                
+            case 'ERROR':
+                this.addMessage('system', `❌ ${message.data.error || 'An error occurred'}`);
+                this.setProcessing(false);
+                break;
+        }
+    }
+    
+    _handleToolUpdate(message) {
+        if (message.tool && this.isProcessing) {
+            this.updateToolIndicator(message.message || `Using ${this._getToolDisplayName(message.tool)}...`);
+            
+            if (message.details && (message.details.error || message.details.success)) {
+                const statusIcon = message.details.error ? '❌' : message.details.success ? '✅' : '🔧';
+                const toolMessage = message.details.error 
+                    ? `${statusIcon} ${this._getToolDisplayName(message.tool)}: ${message.details.error}`
+                    : `${statusIcon} ${this._getToolDisplayName(message.tool)}: Success`;
+                
+                if (message.details.error || message.tool === 'reasoning') {
+                    this.addMessage('system', toolMessage);
+                }
+            }
+        }
+    }
+    
+    _handleReasoningUpdate(message) {
+        if (message.reasoning && message.reasoning.trim()) {
+            const reasoningText = `💭 **Iteration ${message.iteration || ''}**: ${message.reasoning}`;
+            this.addMessage('assistant', reasoningText);
+        }
+    }
+    
+    _processToolResults(toolResults) {
+        try {
+            toolResults.forEach(toolResult => {
+                if (toolResult.tool && this.isProcessing) {
+                    this.updateToolIndicator(`Using ${this._getToolDisplayName(toolResult.tool)}...`);
+                }
+                
+                if (toolResult.tool === 'reasoning' && toolResult.args) {
+                    if (toolResult.args.thinking) {
+                        this.addMessage('assistant', `💭 **Thinking**: ${toolResult.args.thinking}`);
+                    }
+                    if (toolResult.args.evaluation) {
+                        this.addMessage('assistant', `📊 **Evaluation**: ${toolResult.args.evaluation}`);
+                    }
+                    if (toolResult.args.next_goal) {
+                        this.addMessage('assistant', `🎯 **Next Goal**: ${toolResult.args.next_goal}`);
+                    }
+                } else if (toolResult.tool !== 'reasoning') {
+                    const result = toolResult.result;
+                    if (result && !result.error) {
+                        this.addMessage('system', `🔧 ${this._getToolDisplayName(toolResult.tool)}: ${typeof result === 'string' ? result : 'Success'}`);
+                    } else if (result && result.error) {
+                        this.addMessage('system', `❌ ${this._getToolDisplayName(toolResult.tool)}: ${result.error}`);
+                    }
+                }
+            });
+        } catch (error) {
+            console.error('❌ Error processing tool results:', error);
+            this.addMessage('system', `❌ Error processing tool results: ${error.message || 'Unknown error'}`);
+        }
+    }
+    
+    _getToolDisplayName(toolName) {
+        const toolNames = {
+            'clickElement': 'Click Element',
+            'fillInput': 'Fill Input',
+            'getPageContent': 'Get Page Content',
+            'scrollPage': 'Scroll Page',
+            'navigateToUrl': 'Navigate to URL',
+            'takeScreenshot': 'Take Screenshot',
+            'reasoning': 'Reasoning',
+            'webSearch': 'Web Search',
+            'readFile': 'Read File',
+            'writeFile': 'Write File'
+        };
+        return toolNames[toolName] || toolName;
+    }
+    
+    setProcessing(processing) {
+        this.isProcessing = processing;
+        
+        // Update input and button states
+        this.messageInput.disabled = processing;
+        this.sendButton.disabled = processing || !this.messageInput.value.trim();
+        
+        // Update UI state
+        const container = document.getElementById('chat-container');
+        if (processing) {
+            container.classList.add('processing');
+            this.showThinking();
+        } else {
+            container.classList.remove('processing');
+            this.hideThinking();
+        }
+    }
+    
+    showThinking(toolName = 'Thinking...') {
+        if (this.currentThinkingElement) {
+            this.hideThinking();
+        }
+        
+        this.thinkingStartTime = Date.now();
+        this.currentTool = toolName;
+        
+        const thinkingEl = document.createElement('div');
+        thinkingEl.className = 'thinking-indicator';
+        thinkingEl.innerHTML = `
+            <div class="thinking-spinner"></div>
+            <span class="tool-indicator">${toolName}</span>
+            <span class="duration">(<span class="duration-value">0</span>s)</span>
+        `;
+        
+        this.messagesContainer.appendChild(thinkingEl);
+        this.currentThinkingElement = thinkingEl;
+        
+        this.thinkingInterval = setInterval(() => {
+            if (this.thinkingStartTime) {
+                const seconds = Math.floor((Date.now() - this.thinkingStartTime) / 1000);
+                const durationSpan = thinkingEl.querySelector('.duration-value');
+                if (durationSpan) {
+                    durationSpan.textContent = seconds;
+                }
+            }
+        }, 1000);
+        
+        this.scrollToBottom();
+    }
+    
+    hideThinking() {
+        if (this.thinkingInterval) {
+            clearInterval(this.thinkingInterval);
+            this.thinkingInterval = null;
+        }
+        
+        if (this.currentThinkingElement) {
+            this.currentThinkingElement.remove();
+            this.currentThinkingElement = null;
+        }
+        
+        this.thinkingStartTime = null;
+        this.currentTool = null;
+    }
+    
+    updateToolIndicator(toolName) {
+        this.currentTool = toolName;
+        if (this.currentThinkingElement) {
+            const toolSpan = this.currentThinkingElement.querySelector('.tool-indicator');
+            if (toolSpan) {
+                toolSpan.textContent = toolName;
+            }
+        }
+    }
+    
+    clearChat() {
+        this.messagesContainer.innerHTML = '';
+        this.messages = [];
+        this.hideThinking();
+        this.setProcessing(false);
+    }
+    
+    scrollToBottom() {
+        this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
+    }
+}
+
+// Initialize when DOM is loaded
+document.addEventListener('DOMContentLoaded', () => {
+    window.vibeChatApp = new VibeChatApp();
+});
+
+// Make available globally
+window.VibeChatApp = VibeChatApp;
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/chat_simple.html b/chrome/browser/resources/vibe/chat_simple.html
new file mode 100644
index 0000000000..d7ac742a3c
--- /dev/null
+++ b/chrome/browser/resources/vibe/chat_simple.html
@@ -0,0 +1,264 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Vibe Chat</title>
+    <style>
+        * {
+            margin: 0;
+            padding: 0;
+            box-sizing: border-box;
+        }
+        
+        body {
+            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
+            background: #f5f5f5;
+            height: 100vh;
+            overflow: hidden;
+        }
+        
+        body.dark {
+            background: #1a1a1a;
+            color: #e0e0e0;
+        }
+        
+        #chat-container {
+            display: flex;
+            flex-direction: column;
+            height: 100vh;
+            background: white;
+        }
+        
+        body.dark #chat-container {
+            background: #2a2a2a;
+        }
+        
+        /* Header */
+        .chat-header {
+            display: flex;
+            align-items: center;
+            justify-content: space-between;
+            padding: 16px;
+            border-bottom: 1px solid #e0e0e0;
+        }
+        
+        body.dark .chat-header {
+            border-bottom-color: #444;
+        }
+        
+        .header-title {
+            display: flex;
+            align-items: center;
+            gap: 8px;
+            font-size: 18px;
+            font-weight: 600;
+        }
+        
+        /* Messages container */
+        #messages {
+            flex: 1;
+            overflow-y: auto;
+            padding: 20px;
+            display: flex;
+            flex-direction: column;
+            gap: 16px;
+        }
+        
+        /* Message styles */
+        .message {
+            display: flex;
+            gap: 12px;
+            animation: slideIn 0.3s ease-out;
+        }
+        
+        @keyframes slideIn {
+            from {
+                opacity: 0;
+                transform: translateY(10px);
+            }
+            to {
+                opacity: 1;
+                transform: translateY(0);
+            }
+        }
+        
+        .message.user {
+            flex-direction: row-reverse;
+        }
+        
+        .message-content {
+            max-width: 70%;
+            padding: 12px 16px;
+            border-radius: 16px;
+            line-height: 1.4;
+            word-wrap: break-word;
+        }
+        
+        .message.user .message-content {
+            background: #007aff;
+            color: white;
+            border-bottom-right-radius: 4px;
+        }
+        
+        .message.assistant .message-content,
+        .message.system .message-content {
+            background: #f0f0f0;
+            color: #333;
+            border-bottom-left-radius: 4px;
+        }
+        
+        body.dark .message.assistant .message-content,
+        body.dark .message.system .message-content {
+            background: #3a3a3a;
+            color: #e0e0e0;
+        }
+        
+        .message.system .message-content {
+            font-size: 0.9em;
+            opacity: 0.8;
+            font-style: italic;
+        }
+        
+        /* Input container */
+        .input-container {
+            padding: 16px;
+            border-top: 1px solid #e0e0e0;
+            display: flex;
+            gap: 8px;
+            align-items: flex-end;
+        }
+        
+        body.dark .input-container {
+            border-top-color: #444;
+        }
+        
+        #message-input {
+            flex: 1;
+            padding: 10px 16px;
+            border: 1px solid #ddd;
+            border-radius: 20px;
+            outline: none;
+            font-size: 14px;
+            resize: none;
+            min-height: 40px;
+            max-height: 100px;
+            line-height: 1.4;
+            font-family: inherit;
+        }
+        
+        body.dark #message-input {
+            background: #3a3a3a;
+            border-color: #555;
+            color: #e0e0e0;
+        }
+        
+        #send-button {
+            width: 40px;
+            height: 40px;
+            border-radius: 50%;
+            border: none;
+            background: #007aff;
+            color: white;
+            cursor: pointer;
+            display: flex;
+            align-items: center;
+            justify-content: center;
+            transition: background 0.2s;
+        }
+        
+        #send-button:hover:not(:disabled) {
+            background: #0056b3;
+        }
+        
+        #send-button:disabled {
+            opacity: 0.5;
+            cursor: not-allowed;
+        }
+        
+        /* Thinking indicator */
+        .thinking-indicator {
+            display: flex;
+            align-items: center;
+            gap: 8px;
+            padding: 12px 16px;
+            background: #f0f0f0;
+            border-radius: 16px;
+            animation: slideIn 0.3s ease-out;
+            font-size: 14px;
+            color: #666;
+        }
+        
+        body.dark .thinking-indicator {
+            background: #3a3a3a;
+            color: #aaa;
+        }
+        
+        .thinking-spinner {
+            width: 16px;
+            height: 16px;
+            border: 2px solid #ddd;
+            border-top-color: #666;
+            border-radius: 50%;
+            animation: spin 1s linear infinite;
+        }
+        
+        @keyframes spin {
+            to { transform: rotate(360deg); }
+        }
+        
+        /* Code formatting */
+        code {
+            background: #f4f4f4;
+            padding: 2px 4px;
+            border-radius: 3px;
+            font-family: 'Courier New', monospace;
+            font-size: 0.9em;
+        }
+        
+        body.dark code {
+            background: #4a4a4a;
+        }
+        
+        /* Strong text */
+        strong {
+            font-weight: 600;
+        }
+        
+        /* Processing state */
+        #chat-container.processing .input-container {
+            opacity: 0.6;
+        }
+    </style>
+</head>
+<body>
+    <div id="chat-container">
+        <div class="chat-header">
+            <div class="header-title">
+                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
+                    <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
+                </svg>
+                <span>Vibe Chat</span>
+            </div>
+        </div>
+        
+        <div id="messages"></div>
+        
+        <div class="input-container">
+            <textarea 
+                id="message-input" 
+                placeholder="Type a message..."
+                rows="1"
+            ></textarea>
+            <button id="send-button">
+                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
+                    <line x1="22" y1="2" x2="11" y2="13"></line>
+                    <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
+                </svg>
+            </button>
+        </div>
+    </div>
+    
+    <script src="chat_interface.js"></script>
+</body>
+</html>
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/check_console.js b/chrome/browser/resources/vibe/check_console.js
new file mode 100644
index 0000000000..cf909e7b35
--- /dev/null
+++ b/chrome/browser/resources/vibe/check_console.js
@@ -0,0 +1,75 @@
+#!/usr/bin/env node
+
+// Quick console error checker for agent.html
+import puppeteer from 'puppeteer';
+import path from 'path';
+import { fileURLToPath } from 'url';
+
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = path.dirname(__filename);
+
+const agentHtmlPath = `file://${path.resolve(__dirname, 'dist/agent.html')}`;
+
+console.log('🔍 Checking console errors for agent.html...');
+console.log('📁 URL:', agentHtmlPath);
+
+try {
+  const browser = await puppeteer.launch({ headless: true });
+  const page = await browser.newPage();
+  
+  const errors = [];
+  const warnings = [];
+  
+  // Capture console messages
+  page.on('console', msg => {
+    const type = msg.type();
+    const text = msg.text();
+    
+    if (type === 'error') {
+      errors.push(text);
+      console.log('❌ Console Error:', text);
+    } else if (type === 'warning') {
+      warnings.push(text);
+      console.log('⚠️  Console Warning:', text);
+    } else {
+      console.log(`📝 Console ${type}:`, text);
+    }
+  });
+  
+  // Capture page errors
+  page.on('pageerror', error => {
+    errors.push(error.message);
+    console.log('❌ Page Error:', error.message);
+  });
+  
+  // Navigate to the page
+  await page.goto(agentHtmlPath, { waitUntil: 'networkidle0', timeout: 10000 });
+  
+  // Wait a bit more for React to render
+  await page.waitForFunction(() => document.readyState === 'complete');
+  
+  // Check if React rendered correctly
+  const reactRoot = await page.$('#__next > *');
+  if (reactRoot) {
+    console.log('✅ React app rendered successfully');
+  } else {
+    console.log('❌ React app did not render');
+  }
+  
+  await browser.close();
+  
+  // Summary
+  console.log('\n📊 Summary:');
+  console.log(`   Errors: ${errors.length}`);
+  console.log(`   Warnings: ${warnings.length}`);
+  
+  if (errors.length === 0) {
+    console.log('✅ No JavaScript errors found!');
+  } else {
+    console.log('❌ Found JavaScript errors that need fixing');
+  }
+  
+} catch (error) {
+  console.error('❌ Error running test:', error.message);
+  process.exit(1);
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/content.js b/chrome/browser/resources/vibe/content.js
index 383a0cb4d0..bc28aa1c9f 100644
--- a/chrome/browser/resources/vibe/content.js
+++ b/chrome/browser/resources/vibe/content.js
@@ -252,6 +252,78 @@ chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
           .catch(error => sendResponse({ success: false, error: String(error) }));
         break;
 
+      case "HIGHLIGHT_ELEMENTS":
+        Promise.resolve(handleHighlightElements(message.data))
+          .then(result => sendResponse({ success: true, action: "elements_highlighted", result }))
+          .catch(error => sendResponse({ success: false, error: String(error) }));
+        break;
+
+      case "KEYBOARD_SHORTCUT":
+        Promise.resolve(handleKeyboardShortcut(message.data))
+          .then(result => sendResponse({ success: true, action: "shortcut_sent", result }))
+          .catch(error => sendResponse({ success: false, error: String(error) }));
+        break;
+
+      case "HOVER_ELEMENT":
+        Promise.resolve(handleHoverElement(message.data))
+          .then(result => sendResponse({ success: true, action: "element_hovered", result }))
+          .catch(error => sendResponse({ success: false, error: String(error) }));
+        break;
+
+      case "SEARCH_SCROLL_TO_TEXT":
+        Promise.resolve(handleSearchScrollToText(message.data))
+          .then(result => sendResponse({ success: true, action: "text_found_scrolled", result }))
+          .catch(error => sendResponse({ success: false, error: String(error) }));
+        break;
+
+      case "DRAG_DROP":
+        Promise.resolve(handleDragDrop(message.data))
+          .then(result => sendResponse({ success: true, action: "drag_drop_completed", result }))
+          .catch(error => sendResponse({ success: false, error: String(error) }));
+        break;
+
+      case "VERIFY_ACTION":
+        Promise.resolve(handleVerifyAction(message.data))
+          .then(result => sendResponse({ success: true, action: "action_verified", ...result }))
+          .catch(error => sendResponse({ success: false, error: String(error) }));
+        break;
+
+      case "REFLECT_ON_FAILURE":
+        Promise.resolve(handleReflectOnFailure(message.data))
+          .then(result => sendResponse({ success: true, action: "failure_analyzed", ...result }))
+          .catch(error => sendResponse({ success: false, error: String(error) }));
+        break;
+
+      case "CAPTURE_STATE":
+        Promise.resolve(handleCaptureState(message.data))
+          .then(result => sendResponse({ success: true, action: "state_captured", result }))
+          .catch(error => sendResponse({ success: false, error: String(error) }));
+        break;
+
+      case "CLICK_WITH_STRATEGY":
+        Promise.resolve(handleClickWithStrategy(message.data))
+          .then(result => sendResponse({ success: true, action: "click_strategy_executed", result }))
+          .catch(error => sendResponse({ success: false, error: String(error) }));
+        break;
+
+      case "VERIFY_CLICK_EFFECT":
+        Promise.resolve(handleVerifyClickEffect(message.data))
+          .then(result => sendResponse({ success: true, action: "click_effect_verified", ...result }))
+          .catch(error => sendResponse({ success: false, error: String(error) }));
+        break;
+
+      case "FILL_WITH_STRATEGY":
+        Promise.resolve(handleFillWithStrategy(message.data))
+          .then(result => sendResponse({ success: true, action: "fill_strategy_executed", result }))
+          .catch(error => sendResponse({ success: false, error: String(error) }));
+        break;
+
+      case "VERIFY_FIELD_VALUE":
+        Promise.resolve(handleVerifyFieldValue(message.data))
+          .then(result => sendResponse({ success: true, action: "field_value_verified", ...result }))
+          .catch(error => sendResponse({ success: false, error: String(error) }));
+        break;
+
       default:
         console.log("🤷 Unknown message type:", message.type);
         sendResponse({ success: false, error: "Unknown message type" });
@@ -1290,25 +1362,305 @@ function handlePageScroll(data) {
 }
 
 /**
- * Get clean page content with text and input fields
- * This extracts all text content and preserves input fields with full HTML tags
+ * Enhanced page content extraction with intelligent interactive element highlighting
+ * This gives the agent better "vision" to see and understand dynamic content
  */
-function handleGetPageContent(data) {
-  console.log("📄 Extracting page content as markdown with HTML controls...");
-
+function handleGetPageContent(data = {}) {
+  console.log("📄 Extracting enhanced page content for intelligent agent...");
+  
+  const options = {
+    includeInteractive: data.includeInteractive !== false,
+    includeAriaInfo: data.includeAriaInfo !== false, 
+    includeChanges: data.includeChanges === true,
+    focusArea: data.focusArea || null
+  };
+  
   try {
-    // Use the existing content extractor if available
-    if (window.VibeAI && window.VibeAI.extractPageContentAsMarkdown) {
-      return handleGetPageContentWithExtractor();
+    // Use enhanced intelligent extraction
+    return handleIntelligentPageContent(options);
+  } catch (error) {
+    console.log(`❌ Error extracting page content: ${error.message}`);
+    // Fallback to original method
+    try {
+      if (window.VibeAI && window.VibeAI.extractPageContentAsMarkdown) {
+        return handleGetPageContentWithExtractor();
+      }
+      return handleGetPageContentFallback();
+    } catch (fallbackError) {
+      console.log(`❌ Fallback extraction also failed: ${fallbackError.message}`);
+      throw error;
     }
+  }
+}
+
+/**
+ * Intelligent page content extraction that helps agent see and understand interactive elements
+ */
+function handleIntelligentPageContent(options) {
+  const startTime = Date.now();
+  console.log("🧠 Performing intelligent content extraction with options:", options);
+  
+  // Get base content
+  let baseContent = "";
+  if (window.VibeAI && window.VibeAI.extractPageContentAsMarkdown) {
+    const result = window.VibeAI.extractPageContentAsMarkdown();
+    baseContent = result.success ? result.content : "";
+  } else {
+    baseContent = convertToBasicMarkdown(document.body);
+  }
+  
+  // Get intelligent interactive elements
+  const interactiveElements = extractIntelligentInteractiveElements(options);
+  
+  // Get recent changes if requested
+  let recentChanges = [];
+  if (options.includeChanges) {
+    recentChanges = getIntelligentChangeSummary();
+  }
+  
+  // Combine everything intelligently
+  let enhancedContent = baseContent;
+  
+  // Add interactive elements with clear markings
+  if (options.includeInteractive && interactiveElements.length > 0) {
+    enhancedContent += "\n\n## 🎯 INTERACTIVE ELEMENTS (Agent should pay attention to these)\n\n";
+    
+    interactiveElements.forEach((element, index) => {
+      enhancedContent += `### ${index + 1}. ${element.description}\n`;
+      enhancedContent += `**Type**: ${element.type}`;
+      if (element.isNew) enhancedContent += " **[NEW - JUST APPEARED]**";
+      if (element.isDropdownOption) enhancedContent += " **[DROPDOWN OPTION]**";
+      if (element.isAirportRelated) enhancedContent += " **[AIRPORT RELATED]**";
+      enhancedContent += `\n`;
+      enhancedContent += `**Selector**: \`${element.selector}\`\n`;
+      if (element.text) enhancedContent += `**Text**: "${element.text}"\n`;
+      if (element.context) enhancedContent += `**Context**: ${element.context}\n`;
+      enhancedContent += `\n`;
+    });
+  }
+  
+  // Add recent changes if requested
+  if (options.includeChanges && recentChanges.length > 0) {
+    enhancedContent += "\n\n## 🔄 RECENT CHANGES (What just happened on the page)\n\n";
+    recentChanges.forEach((change, index) => {
+      enhancedContent += `${index + 1}. **${change.type}**: ${change.description}\n`;
+      if (change.isInteractive) enhancedContent += "   👆 **This is clickable - agent should consider interacting**\n";
+    });
+  }
+  
+  const extractionTime = Date.now() - startTime;
+  
+  const result = {
+    pageInfo: {
+      title: document.title,
+      url: window.location.href,
+      textLength: enhancedContent.length,
+      interactiveCount: interactiveElements.length,
+      changesCount: recentChanges.length,
+      extractionMethod: 'intelligent',
+      extractionTime: extractionTime
+    },
+    content: enhancedContent,
+    intelligentElements: interactiveElements,
+    recentChanges: recentChanges
+  };
+  
+  console.log(`✅ Intelligent extraction complete: ${interactiveElements.length} interactive elements, ${recentChanges.length} changes (${extractionTime}ms)`);
+  return result;
+}
 
-    // Fallback to manual extraction if content extractor is not available
-    return handleGetPageContentFallback();
+/**
+ * Extract interactive elements with intelligent context and highlighting
+ */
+function extractIntelligentInteractiveElements(options) {
+  const elements = [];
+  
+  // Define comprehensive selectors for interactive elements
+  const interactiveSelectors = [
+    '[role="option"]', '[role="button"]', '[role="menuitem"]', '[role="listbox"]',
+    'button', 'a[href]', 'input', 'select', 'textarea',
+    '.dropdown-item', '.suggestion', '.autocomplete-option', '.menu-item',
+    '[onclick]', '[data-testid*="option"]', '[tabindex]:not([tabindex="-1"])',
+    'li[data-value]', '[aria-expanded]', '[data-option]'
+  ];
+  
+  // Focus on specific area if requested
+  const searchRoot = options.focusArea ? 
+    document.querySelector(options.focusArea) || document : 
+    document;
+  
+  interactiveSelectors.forEach(selector => {
+    const found = querySelectorAllDeep(searchRoot, selector);
+    found.forEach(element => {
+      if (isElementVisible(element) && isElementInteractable(element)) {
+        const elementInfo = analyzeIntelligentElement(element, options);
+        if (elementInfo) {
+          elements.push(elementInfo);
+        }
+      }
+    });
+  });
+  
+  // Remove duplicates and sort by importance
+  const uniqueElements = removeDuplicateElements(elements);
+  return sortElementsByImportance(uniqueElements);
+}
 
-  } catch (error) {
-    console.log(`❌ Error extracting page content: ${error.message}`);
-    throw error;
+/**
+ * Analyze an element to provide intelligent context for the agent
+ */
+function analyzeIntelligentElement(element, options) {
+  const text = getElementText(element);
+  const tag = element.tagName.toLowerCase();
+  const role = element.getAttribute('role');
+  const ariaLabel = element.getAttribute('aria-label');
+  
+  // Determine if this is a new element (appeared recently)
+  const isNew = isElementNew(element);
+  
+  // Analyze element context and purpose
+  const context = analyzeElementContext(element);
+  
+  // Generate clear description for the agent
+  let description = "";
+  if (text) {
+    description = `[CLICKABLE] ${text}`;
+  } else if (ariaLabel) {
+    description = `[CLICKABLE] ${ariaLabel}`;
+  } else {
+    description = `[CLICKABLE] ${tag.toUpperCase()}`;
+  }
+  
+  if (role) {
+    description += ` [${role}]`;
+  }
+  
+  return {
+    description: description,
+    type: role || tag,
+    text: text,
+    selector: generateRobustSelector(element),
+    role: role,
+    ariaLabel: ariaLabel,
+    isNew: isNew,
+    isDropdownOption: context.isDropdownOption,
+    isAirportRelated: context.isAirportRelated,
+    isFormRelated: context.isFormRelated,
+    context: context.description,
+    element: element // Keep reference for debugging
+  };
+}
+
+/**
+ * Analyze element context to help agent understand what it's for
+ */
+function analyzeElementContext(element) {
+  const text = element.textContent || '';
+  const nearbyText = getNearbyText(element, 100);
+  const parent = element.closest('form, [role="listbox"], .dropdown, .suggestions, .autocomplete');
+  
+  // Check if this is a dropdown option
+  const isDropdownOption = element.matches('[role="option"], .dropdown-item, .suggestion, .autocomplete-option') ||
+                           parent?.matches('[role="listbox"], .dropdown, .suggestions');
+  
+  // Check if airport related
+  const airportKeywords = ['airport', 'international', /\([A-Z]{3}\)/, 'city', 'station'];
+  const isAirportRelated = airportKeywords.some(keyword => {
+    if (keyword instanceof RegExp) {
+      return keyword.test(text) || keyword.test(nearbyText);
+    }
+    return text.toLowerCase().includes(keyword) || nearbyText.toLowerCase().includes(keyword);
+  });
+  
+  // Check if form related
+  const isFormRelated = element.closest('form') !== null || 
+                       element.matches('input, select, textarea, button[type="submit"]');
+  
+  // Generate context description
+  let contextDescription = "";
+  if (isDropdownOption) {
+    contextDescription += "Dropdown option";
+    if (isAirportRelated) contextDescription += " for airport selection";
+  } else if (isFormRelated) {
+    contextDescription += "Form element";
+  } else {
+    contextDescription += "Interactive element";
+  }
+  
+  if (parent) {
+    contextDescription += ` in ${parent.tagName.toLowerCase()}`;
+    if (parent.className) contextDescription += `.${parent.className.split(' ')[0]}`;
+  }
+  
+  return {
+    isDropdownOption,
+    isAirportRelated, 
+    isFormRelated,
+    description: contextDescription,
+    parent: parent
+  };
+}
+
+/**
+ * Check if element appeared recently (heuristic based on DOM mutations)
+ */
+function isElementNew(element) {
+  // Simple heuristic: check if element was added in recent mutations
+  const recentMutations = pendingMutations.filter(m => 
+    Date.now() - m.timestamp < 3000 && // Last 3 seconds
+    m.kind === 'added'
+  );
+  
+  return recentMutations.some(mutation => {
+    return mutation.text && element.textContent.includes(mutation.text) ||
+           mutation.id && element.id === mutation.id ||
+           mutation.cls && element.className.includes(mutation.cls);
+  });
+}
+
+/**
+ * Get intelligent summary of recent changes for agent awareness
+ */
+function getIntelligentChangeSummary() {
+  const recentMutations = pendingMutations.filter(m => 
+    Date.now() - m.timestamp < 5000 // Last 5 seconds
+  );
+  
+  const changes = [];
+  const addedElements = recentMutations.filter(m => m.kind === 'added');
+  
+  // Group similar additions
+  const dropdownOptions = addedElements.filter(m => 
+    m.role === 'option' || 
+    m.cls?.includes('dropdown') || 
+    m.cls?.includes('suggestion')
+  );
+  
+  if (dropdownOptions.length > 0) {
+    changes.push({
+      type: "NEW_DROPDOWN_OPTIONS",
+      description: `${dropdownOptions.length} dropdown/suggestion options appeared`,
+      isInteractive: true,
+      elements: dropdownOptions
+    });
+  }
+  
+  // Other interactive additions
+  const otherInteractive = addedElements.filter(m => 
+    !dropdownOptions.includes(m) && 
+    (m.tag === 'button' || m.role === 'button' || m.tag === 'a')
+  );
+  
+  if (otherInteractive.length > 0) {
+    changes.push({
+      type: "NEW_INTERACTIVE_ELEMENTS", 
+      description: `${otherInteractive.length} new clickable elements appeared`,
+      isInteractive: true,
+      elements: otherInteractive
+    });
   }
+  
+  return changes;
 }
 
 /**
@@ -1879,3 +2231,1549 @@ function init() {
   enhanceForms();
   observePageChanges();
 }
+
+// ========================
+// Helper Functions for Intelligent Content Extraction
+// ========================
+
+/**
+ * Check if element is interactable (clickable, focusable, etc.)
+ */
+function isElementInteractable(element) {
+  // Element must be visible first
+  if (!isElementVisible(element)) return false;
+  
+  // Check if element is disabled
+  if (element.disabled || element.getAttribute('aria-disabled') === 'true') {
+    return false;
+  }
+  
+  // Check if element has pointer-events disabled
+  const style = window.getComputedStyle(element);
+  if (style.pointerEvents === 'none') return false;
+  
+  // Element is interactable if it's naturally interactive or has interactive role/attributes
+  const interactiveTypes = ['button', 'submit', 'reset', 'checkbox', 'radio'];
+  const interactiveRoles = ['button', 'option', 'menuitem', 'tab', 'link'];
+  
+  return (
+    element.tagName.toLowerCase() === 'button' ||
+    element.tagName.toLowerCase() === 'a' && element.hasAttribute('href') ||
+    element.tagName.toLowerCase() === 'input' && element.type !== 'hidden' ||
+    element.tagName.toLowerCase() === 'select' ||
+    element.tagName.toLowerCase() === 'textarea' ||
+    interactiveRoles.includes(element.getAttribute('role')) ||
+    element.hasAttribute('onclick') ||
+    element.hasAttribute('tabindex') && element.getAttribute('tabindex') !== '-1'
+  );
+}
+
+/**
+ * Remove duplicate elements from array based on selector and text
+ */
+function removeDuplicateElements(elements) {
+  const seen = new Set();
+  return elements.filter(element => {
+    const key = `${element.selector}|${element.text}`;
+    if (seen.has(key)) {
+      return false;
+    }
+    seen.add(key);
+    return true;
+  });
+}
+
+/**
+ * Sort elements by importance for agent attention
+ */
+function sortElementsByImportance(elements) {
+  return elements.sort((a, b) => {
+    let scoreA = 0;
+    let scoreB = 0;
+    
+    // New elements are most important
+    if (a.isNew) scoreA += 100;
+    if (b.isNew) scoreB += 100;
+    
+    // Dropdown options are very important
+    if (a.isDropdownOption) scoreA += 50;
+    if (b.isDropdownOption) scoreB += 50;
+    
+    // Airport related elements are important for flight booking
+    if (a.isAirportRelated) scoreA += 30;
+    if (b.isAirportRelated) scoreB += 30;
+    
+    // Form elements are generally important
+    if (a.isFormRelated) scoreA += 20;
+    if (b.isFormRelated) scoreB += 20;
+    
+    // Elements with more descriptive text are more important
+    if (a.text && a.text.length > 3) scoreA += 10;
+    if (b.text && b.text.length > 3) scoreB += 10;
+    
+    return scoreB - scoreA;
+  });
+}
+
+/**
+ * Generate robust selector for element that works across page changes
+ */
+function generateRobustSelector(element) {
+  // Try different selector strategies in order of preference
+  
+  // 1. Use ID if available and unique
+  if (element.id) {
+    const selector = `#${element.id}`;
+    if (document.querySelectorAll(selector).length === 1) {
+      return selector;
+    }
+  }
+  
+  // 2. Use role and text combination for dropdown options
+  if (element.getAttribute('role') === 'option' && element.textContent.trim()) {
+    const text = element.textContent.trim().substring(0, 30);
+    return `[role="option"]:contains("${text}")`;
+  }
+  
+  // 3. Use aria-label if available
+  const ariaLabel = element.getAttribute('aria-label');
+  if (ariaLabel) {
+    const selector = `[aria-label="${ariaLabel}"]`;
+    if (document.querySelectorAll(selector).length === 1) {
+      return selector;
+    }
+  }
+  
+  // 4. Use data attributes if available
+  const dataAttrs = Array.from(element.attributes)
+    .filter(attr => attr.name.startsWith('data-'))
+    .slice(0, 2); // Use max 2 data attributes
+  
+  if (dataAttrs.length > 0) {
+    const dataSelector = dataAttrs
+      .map(attr => `[${attr.name}="${attr.value}"]`)
+      .join('');
+    if (document.querySelectorAll(dataSelector).length === 1) {
+      return dataSelector;
+    }
+  }
+  
+  // 5. Use combination of tag, class, and position
+  const tag = element.tagName.toLowerCase();
+  const classes = element.className.split(' ').filter(c => c.length > 0);
+  let selector = tag;
+  
+  if (classes.length > 0) {
+    // Use first 2 classes that aren't generic
+    const meaningfulClasses = classes
+      .filter(c => !['active', 'selected', 'hover', 'focus'].includes(c))
+      .slice(0, 2);
+    if (meaningfulClasses.length > 0) {
+      selector += '.' + meaningfulClasses.join('.');
+    }
+  }
+  
+  // Add nth-child if needed for uniqueness
+  const siblings = document.querySelectorAll(selector);
+  if (siblings.length > 1) {
+    const index = Array.from(siblings).indexOf(element);
+    if (index >= 0) {
+      selector += `:nth-child(${index + 1})`;
+    }
+  }
+  
+  return selector;
+}
+
+/**
+ * Get nearby text content to understand element context
+ */
+function getNearbyText(element, maxLength = 200) {
+  const parent = element.parentElement;
+  if (!parent) return '';
+  
+  // Get text from parent and siblings
+  let text = parent.textContent || '';
+  
+  // Clean up text (remove extra whitespace, newlines)
+  text = text.replace(/\s+/g, ' ').trim();
+  
+  // Truncate if too long
+  if (text.length > maxLength) {
+    text = text.substring(0, maxLength) + '...';
+  }
+  
+  return text;
+}
+
+// ========================
+// New Enhanced Tools Implementation
+// ========================
+
+/**
+ * Highlight interactive elements with numbered overlays like browser-use
+ */
+function handleHighlightElements(data) {
+  try {
+    const { duration = 10000, elementTypes = ["button", "input", "select", "a", "[role='option']"], showNumbers = true } = data;
+    
+    console.log(`🎯 Highlighting elements for ${duration}ms with types:`, elementTypes);
+    
+    // Find all interactive elements
+    const allElements = [];
+    elementTypes.forEach(selector => {
+      const elements = querySelectorAllDeep(document, selector);
+      elements.forEach(el => {
+        if (isElementVisible(el) && isElementInteractable(el)) {
+          allElements.push(el);
+        }
+      });
+    });
+    
+    // Remove duplicates
+    const uniqueElements = [...new Set(allElements)];
+    
+    console.log(`📍 Found ${uniqueElements.length} interactive elements to highlight`);
+    
+    // Create highlight overlays
+    const overlays = [];
+    uniqueElements.forEach((element, index) => {
+      const overlay = createElementHighlight(element, index + 1, showNumbers);
+      if (overlay) {
+        document.body.appendChild(overlay);
+        overlays.push(overlay);
+      }
+    });
+    
+    // Remove highlights after duration
+    setTimeout(() => {
+      overlays.forEach(overlay => {
+        if (overlay.parentNode) {
+          overlay.parentNode.removeChild(overlay);
+        }
+      });
+      console.log(`✅ Removed ${overlays.length} element highlights`);
+    }, duration);
+    
+    return {
+      success: true,
+      count: uniqueElements.length,
+      duration: duration
+    };
+    
+  } catch (error) {
+    console.error('❌ Error highlighting elements:', error);
+    throw error;
+  }
+}
+
+/**
+ * Create visual highlight overlay for an element
+ */
+function createElementHighlight(element, number, showNumbers) {
+  try {
+    const rect = element.getBoundingClientRect();
+    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
+    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
+    
+    if (rect.width === 0 || rect.height === 0) return null;
+    
+    // Create overlay div
+    const overlay = document.createElement('div');
+    overlay.style.cssText = `
+      position: absolute;
+      top: ${rect.top + scrollTop}px;
+      left: ${rect.left + scrollLeft}px;
+      width: ${rect.width}px;
+      height: ${rect.height}px;
+      border: 2px solid #ff6b6b;
+      background-color: rgba(255, 107, 107, 0.1);
+      z-index: 999999;
+      pointer-events: none;
+      box-sizing: border-box;
+      border-radius: 4px;
+    `;
+    
+    // Add number label if requested
+    if (showNumbers) {
+      const numberLabel = document.createElement('div');
+      numberLabel.textContent = number.toString();
+      numberLabel.style.cssText = `
+        position: absolute;
+        top: -8px;
+        left: -8px;
+        width: 20px;
+        height: 20px;
+        background-color: #ff6b6b;
+        color: white;
+        border-radius: 50%;
+        display: flex;
+        align-items: center;
+        justify-content: center;
+        font-size: 12px;
+        font-weight: bold;
+        font-family: monospace;
+        line-height: 1;
+      `;
+      overlay.appendChild(numberLabel);
+    }
+    
+    // Add class for easy cleanup
+    overlay.className = 'vibe-element-highlight';
+    
+    return overlay;
+  } catch (error) {
+    console.error('❌ Error creating highlight for element:', error);
+    return null;
+  }
+}
+
+/**
+ * Handle keyboard shortcuts and key combinations
+ */
+function handleKeyboardShortcut(data) {
+  try {
+    const { keys, target } = data;
+    
+    console.log(`⌨️ Sending keyboard shortcut: ${keys}${target ? ` to ${target}` : ''}`);
+    
+    // Find target element
+    let targetElement = document.activeElement;
+    if (target) {
+      targetElement = querySelectorDeep(document, target);
+      if (!targetElement) {
+        throw new Error(`Target element not found: ${target}`);
+      }
+      targetElement.focus();
+    }
+    
+    // Parse key combination
+    const keyInfo = parseKeyCombo(keys);
+    
+    // Create and dispatch keyboard events
+    const keyDownEvent = new KeyboardEvent('keydown', {
+      key: keyInfo.key,
+      code: keyInfo.code,
+      keyCode: keyInfo.keyCode,
+      which: keyInfo.keyCode,
+      ctrlKey: keyInfo.ctrlKey,
+      altKey: keyInfo.altKey,
+      shiftKey: keyInfo.shiftKey,
+      metaKey: keyInfo.metaKey,
+      bubbles: true,
+      cancelable: true
+    });
+    
+    const keyUpEvent = new KeyboardEvent('keyup', {
+      key: keyInfo.key,
+      code: keyInfo.code,
+      keyCode: keyInfo.keyCode,
+      which: keyInfo.keyCode,
+      ctrlKey: keyInfo.ctrlKey,
+      altKey: keyInfo.altKey,
+      shiftKey: keyInfo.shiftKey,
+      metaKey: keyInfo.metaKey,
+      bubbles: true,
+      cancelable: true
+    });
+    
+    targetElement.dispatchEvent(keyDownEvent);
+    
+    // Small delay between keydown and keyup
+    setTimeout(() => {
+      targetElement.dispatchEvent(keyUpEvent);
+    }, 10);
+    
+    return {
+      success: true,
+      keys: keys,
+      target: target || 'focused element'
+    };
+    
+  } catch (error) {
+    console.error('❌ Error sending keyboard shortcut:', error);
+    throw error;
+  }
+}
+
+/**
+ * Parse key combination string into event properties
+ */
+function parseKeyCombo(keyString) {
+  const parts = keyString.split('+').map(p => p.trim());
+  
+  let ctrlKey = false;
+  let altKey = false;
+  let shiftKey = false;
+  let metaKey = false;
+  let key = '';
+  let code = '';
+  let keyCode = 0;
+  
+  parts.forEach(part => {
+    const lowerPart = part.toLowerCase();
+    if (lowerPart === 'ctrl' || lowerPart === 'control') {
+      ctrlKey = true;
+    } else if (lowerPart === 'alt') {
+      altKey = true;
+    } else if (lowerPart === 'shift') {
+      shiftKey = true;
+    } else if (lowerPart === 'meta' || lowerPart === 'cmd' || lowerPart === 'command') {
+      metaKey = true;
+    } else {
+      key = part;
+    }
+  });
+  
+  // Map key names to codes
+  const keyMap = {
+    'Enter': { code: 'Enter', keyCode: 13 },
+    'Escape': { code: 'Escape', keyCode: 27 },
+    'ArrowUp': { code: 'ArrowUp', keyCode: 38 },
+    'ArrowDown': { code: 'ArrowDown', keyCode: 40 },
+    'ArrowLeft': { code: 'ArrowLeft', keyCode: 37 },
+    'ArrowRight': { code: 'ArrowRight', keyCode: 39 },
+    'Tab': { code: 'Tab', keyCode: 9 },
+    'Space': { code: 'Space', keyCode: 32 },
+    'Backspace': { code: 'Backspace', keyCode: 8 },
+    'Delete': { code: 'Delete', keyCode: 46 },
+    'Home': { code: 'Home', keyCode: 36 },
+    'End': { code: 'End', keyCode: 35 },
+    'PageUp': { code: 'PageUp', keyCode: 33 },
+    'PageDown': { code: 'PageDown', keyCode: 34 }
+  };
+  
+  if (keyMap[key]) {
+    code = keyMap[key].code;
+    keyCode = keyMap[key].keyCode;
+  } else if (key.length === 1) {
+    // Single character
+    code = `Key${key.toUpperCase()}`;
+    keyCode = key.toUpperCase().charCodeAt(0);
+  } else {
+    // Default fallback
+    code = key;
+    keyCode = key.charCodeAt(0);
+  }
+  
+  return { key, code, keyCode, ctrlKey, altKey, shiftKey, metaKey };
+}
+
+/**
+ * Handle hovering over elements
+ */
+function handleHoverElement(data) {
+  try {
+    const { selector, duration = 1000 } = data;
+    
+    console.log(`🖱️ Hovering over ${selector} for ${duration}ms`);
+    
+    const element = querySelectorDeep(document, selector);
+    if (!element) {
+      throw new Error(`Element not found: ${selector}`);
+    }
+    
+    // Create and dispatch mouse events
+    const rect = element.getBoundingClientRect();
+    const x = rect.left + rect.width / 2;
+    const y = rect.top + rect.height / 2;
+    
+    const mouseEnterEvent = new MouseEvent('mouseenter', {
+      bubbles: true,
+      cancelable: true,
+      clientX: x,
+      clientY: y
+    });
+    
+    const mouseOverEvent = new MouseEvent('mouseover', {
+      bubbles: true,
+      cancelable: true,
+      clientX: x,
+      clientY: y
+    });
+    
+    element.dispatchEvent(mouseEnterEvent);
+    element.dispatchEvent(mouseOverEvent);
+    
+    // Dispatch mouseleave after duration
+    setTimeout(() => {
+      const mouseLeaveEvent = new MouseEvent('mouseleave', {
+        bubbles: true,
+        cancelable: true,
+        clientX: x,
+        clientY: y
+      });
+      
+      const mouseOutEvent = new MouseEvent('mouseout', {
+        bubbles: true,
+        cancelable: true,
+        clientX: x,
+        clientY: y
+      });
+      
+      element.dispatchEvent(mouseLeaveEvent);
+      element.dispatchEvent(mouseOutEvent);
+    }, duration);
+    
+    return {
+      success: true,
+      selector: selector,
+      duration: duration
+    };
+    
+  } catch (error) {
+    console.error('❌ Error hovering over element:', error);
+    throw error;
+  }
+}
+
+/**
+ * Search for text on page and scroll to it
+ */
+function handleSearchScrollToText(data) {
+  try {
+    const { searchText, fuzzyMatch = true, highlightDuration = 3000 } = data;
+    
+    console.log(`🔍 Searching for text: "${searchText}" (fuzzy: ${fuzzyMatch})`);
+    
+    let foundElement = null;
+    let matchedText = searchText;
+    
+    if (fuzzyMatch) {
+      // Fuzzy search - find text that contains the search term
+      const walker = document.createTreeWalker(
+        document.body,
+        NodeFilter.SHOW_TEXT,
+        null,
+        false
+      );
+      
+      let node;
+      while (node = walker.nextNode()) {
+        const text = node.textContent.trim();
+        if (text.toLowerCase().includes(searchText.toLowerCase())) {
+          foundElement = node.parentElement;
+          matchedText = text;
+          break;
+        }
+      }
+    } else {
+      // Exact search
+      const walker = document.createTreeWalker(
+        document.body,
+        NodeFilter.SHOW_TEXT,
+        null,
+        false
+      );
+      
+      let node;
+      while (node = walker.nextNode()) {
+        if (node.textContent.trim() === searchText) {
+          foundElement = node.parentElement;
+          break;
+        }
+      }
+    }
+    
+    if (!foundElement) {
+      throw new Error(`Text not found: "${searchText}"`);
+    }
+    
+    // Scroll to element
+    foundElement.scrollIntoView({
+      behavior: 'smooth',
+      block: 'center',
+      inline: 'center'
+    });
+    
+    // Highlight the found text if requested
+    if (highlightDuration > 0) {
+      highlightFoundText(foundElement, searchText, highlightDuration);
+    }
+    
+    return {
+      success: true,
+      searchText: searchText,
+      matchedText: matchedText,
+      highlightDuration: highlightDuration
+    };
+    
+  } catch (error) {
+    console.error('❌ Error searching for text:', error);
+    throw error;
+  }
+}
+
+/**
+ * Highlight found text temporarily
+ */
+function highlightFoundText(element, searchText, duration) {
+  try {
+    const originalBackground = element.style.backgroundColor;
+    const originalTransition = element.style.transition;
+    
+    element.style.transition = 'background-color 0.3s ease';
+    element.style.backgroundColor = '#ffff99';
+    
+    setTimeout(() => {
+      element.style.backgroundColor = originalBackground;
+      setTimeout(() => {
+        element.style.transition = originalTransition;
+      }, 300);
+    }, duration);
+  } catch (error) {
+    console.warn('⚠️ Could not highlight found text:', error);
+  }
+}
+
+/**
+ * Handle drag and drop operations
+ */
+function handleDragDrop(data) {
+  try {
+    const { source, target, duration = 500 } = data;
+    
+    console.log(`🎯 Drag and drop from`, source, 'to', target);
+    
+    let sourceElement, sourceX, sourceY;
+    let targetElement, targetX, targetY;
+    
+    // Get source coordinates
+    if (typeof source === 'string') {
+      sourceElement = querySelectorDeep(document, source);
+      if (!sourceElement) {
+        throw new Error(`Source element not found: ${source}`);
+      }
+      const sourceRect = sourceElement.getBoundingClientRect();
+      sourceX = sourceRect.left + sourceRect.width / 2;
+      sourceY = sourceRect.top + sourceRect.height / 2;
+    } else {
+      sourceX = source.x;
+      sourceY = source.y;
+      sourceElement = document.elementFromPoint(sourceX, sourceY);
+    }
+    
+    // Get target coordinates
+    if (typeof target === 'string') {
+      targetElement = querySelectorDeep(document, target);
+      if (!targetElement) {
+        throw new Error(`Target element not found: ${target}`);
+      }
+      const targetRect = targetElement.getBoundingClientRect();
+      targetX = targetRect.left + targetRect.width / 2;
+      targetY = targetRect.top + targetRect.height / 2;
+    } else {
+      targetX = target.x;
+      targetY = target.y;
+      targetElement = document.elementFromPoint(targetX, targetY);
+    }
+    
+    // Perform drag and drop sequence
+    return performDragDrop(sourceElement, sourceX, sourceY, targetElement, targetX, targetY, duration);
+    
+  } catch (error) {
+    console.error('❌ Error in drag and drop:', error);
+    throw error;
+  }
+}
+
+/**
+ * Perform the actual drag and drop sequence
+ */
+function performDragDrop(sourceElement, sourceX, sourceY, targetElement, targetX, targetY, duration) {
+  return new Promise((resolve) => {
+    try {
+      // Start drag
+      const dragStartEvent = new DragEvent('dragstart', {
+        bubbles: true,
+        cancelable: true,
+        clientX: sourceX,
+        clientY: sourceY
+      });
+      
+      const mouseDownEvent = new MouseEvent('mousedown', {
+        bubbles: true,
+        cancelable: true,
+        clientX: sourceX,
+        clientY: sourceY,
+        button: 0
+      });
+      
+      sourceElement.dispatchEvent(mouseDownEvent);
+      sourceElement.dispatchEvent(dragStartEvent);
+      
+      // Drag over target
+      setTimeout(() => {
+        const dragOverEvent = new DragEvent('dragover', {
+          bubbles: true,
+          cancelable: true,
+          clientX: targetX,
+          clientY: targetY
+        });
+        
+        const mouseMoveEvent = new MouseEvent('mousemove', {
+          bubbles: true,
+          cancelable: true,
+          clientX: targetX,
+          clientY: targetY,
+          button: 0
+        });
+        
+        targetElement.dispatchEvent(mouseMoveEvent);
+        targetElement.dispatchEvent(dragOverEvent);
+        
+        // Drop
+        setTimeout(() => {
+          const dropEvent = new DragEvent('drop', {
+            bubbles: true,
+            cancelable: true,
+            clientX: targetX,
+            clientY: targetY
+          });
+          
+          const mouseUpEvent = new MouseEvent('mouseup', {
+            bubbles: true,
+            cancelable: true,
+            clientX: targetX,
+            clientY: targetY,
+            button: 0
+          });
+          
+          const dragEndEvent = new DragEvent('dragend', {
+            bubbles: true,
+            cancelable: true,
+            clientX: targetX,
+            clientY: targetY
+          });
+          
+          targetElement.dispatchEvent(dropEvent);
+          sourceElement.dispatchEvent(mouseUpEvent);
+          sourceElement.dispatchEvent(dragEndEvent);
+          
+          resolve({
+            success: true,
+            source: { x: sourceX, y: sourceY },
+            target: { x: targetX, y: targetY },
+            duration: duration
+          });
+          
+        }, duration / 2);
+      }, duration / 2);
+      
+    } catch (error) {
+      console.error('❌ Error performing drag and drop:', error);
+      resolve({
+        success: false,
+        error: error.message
+      });
+    }
+  });
+}
+
+// ========================
+// Action Verification and Retry System
+// ========================
+
+/**
+ * Verify that an action had the expected effect
+ */
+function handleVerifyAction(data) {
+  try {
+    const { actionType, expectedChanges, waitTime } = data;
+    
+    console.log(`🔍 Verifying ${actionType} action effects`);
+    
+    const verification = {
+      verified: false,
+      details: {
+        summary: '',
+        changes: 0,
+        findings: []
+      }
+    };
+    
+    let changeCount = 0;
+    const findings = [];
+    
+    // Check for new elements
+    if (expectedChanges.newElements) {
+      expectedChanges.newElements.forEach(selector => {
+        const elements = querySelectorAllDeep(document, selector);
+        if (elements.length > 0) {
+          changeCount++;
+          findings.push(`✅ New element appeared: ${selector} (${elements.length} found)`);
+        } else {
+          findings.push(`❌ Expected element not found: ${selector}`);
+        }
+      });
+    }
+    
+    // Check for removed elements
+    if (expectedChanges.removedElements) {
+      expectedChanges.removedElements.forEach(selector => {
+        const elements = querySelectorAllDeep(document, selector);
+        if (elements.length === 0) {
+          changeCount++;
+          findings.push(`✅ Element removed as expected: ${selector}`);
+        } else {
+          findings.push(`❌ Element still present: ${selector} (${elements.length} found)`);
+        }
+      });
+    }
+    
+    // Check for text changes
+    if (expectedChanges.changedText) {
+      expectedChanges.changedText.forEach(({ selector, expectedText, shouldContain }) => {
+        const element = querySelectorDeep(document, selector);
+        if (element) {
+          const actualText = element.textContent.trim();
+          if (expectedText && actualText === expectedText) {
+            changeCount++;
+            findings.push(`✅ Text matches expected: "${expectedText}"`);
+          } else if (shouldContain && actualText.includes(shouldContain)) {
+            changeCount++;
+            findings.push(`✅ Text contains expected: "${shouldContain}"`);
+          } else {
+            findings.push(`❌ Text mismatch in ${selector}: expected "${expectedText || shouldContain}", got "${actualText}"`);
+          }
+        } else {
+          findings.push(`❌ Element not found for text verification: ${selector}`);
+        }
+      });
+    }
+    
+    // Check for URL changes
+    if (expectedChanges.urlChange) {
+      const currentUrl = window.location.href;
+      if (currentUrl.includes(expectedChanges.urlChange) || currentUrl.match(new RegExp(expectedChanges.urlChange))) {
+        changeCount++;
+        findings.push(`✅ URL changed as expected: ${currentUrl}`);
+      } else {
+        findings.push(`❌ URL did not change as expected: ${currentUrl}`);
+      }
+    }
+    
+    // Check form values
+    if (expectedChanges.formValues) {
+      expectedChanges.formValues.forEach(({ selector, expectedValue }) => {
+        const element = querySelectorDeep(document, selector);
+        if (element && element.value === expectedValue) {
+          changeCount++;
+          findings.push(`✅ Form value set correctly: ${selector} = "${expectedValue}"`);
+        } else {
+          findings.push(`❌ Form value mismatch: ${selector} expected "${expectedValue}", got "${element?.value || 'not found'}"`);
+        }
+      });
+    }
+    
+    // Determine if action was successful
+    const expectedChangeCount = (expectedChanges.newElements?.length || 0) +
+                               (expectedChanges.removedElements?.length || 0) +
+                               (expectedChanges.changedText?.length || 0) +
+                               (expectedChanges.urlChange ? 1 : 0) +
+                               (expectedChanges.formValues?.length || 0);
+    
+    verification.verified = changeCount > 0 && changeCount >= (expectedChangeCount * 0.5); // At least 50% success
+    verification.details.changes = changeCount;
+    verification.details.findings = findings;
+    verification.details.summary = verification.verified 
+      ? `Action successful: ${changeCount}/${expectedChangeCount} expected changes detected`
+      : `Action failed: only ${changeCount}/${expectedChangeCount} expected changes detected`;
+    
+    return verification;
+    
+  } catch (error) {
+    console.error('❌ Error verifying action:', error);
+    throw error;
+  }
+}
+
+/**
+ * Analyze failed actions and suggest alternatives
+ */
+function handleReflectOnFailure(data) {
+  try {
+    const { failedAction, contextAnalysis } = data;
+    
+    console.log(`🤔 Analyzing failed ${failedAction.type} action`);
+    
+    const analysis = {
+      summary: '',
+      likelyCause: '',
+      context: {}
+    };
+    
+    const suggestions = [];
+    
+    // Find the target element for analysis
+    let targetElement = null;
+    try {
+      targetElement = querySelectorDeep(document, failedAction.target);
+    } catch (e) {
+      // Selector might be invalid
+    }
+    
+    // Analyze the failure based on action type
+    switch (failedAction.type) {
+      case 'click':
+        if (!targetElement) {
+          analysis.likelyCause = 'Element not found with given selector';
+          analysis.summary = 'The target element could not be located on the page';
+          
+          suggestions.push({
+            approach: 'Wait for element',
+            description: 'Element might be loading dynamically',
+            method: 'Use wait_for_element tool before clicking',
+            probability: 70
+          });
+          
+          suggestions.push({
+            approach: 'Try alternative selector',
+            description: 'Use a different CSS selector or xpath',
+            method: 'Inspect element and find a more specific selector',
+            probability: 60
+          });
+          
+          suggestions.push({
+            approach: 'Check for iframe',
+            description: 'Element might be inside an iframe',
+            method: 'Look for iframe elements and switch context',
+            probability: 40
+          });
+          
+        } else {
+          const rect = targetElement.getBoundingClientRect();
+          const isVisible = rect.width > 0 && rect.height > 0;
+          const isInViewport = rect.top >= 0 && rect.left >= 0 && 
+                              rect.bottom <= window.innerHeight && rect.right <= window.innerWidth;
+          
+          if (!isVisible) {
+            analysis.likelyCause = 'Element exists but is not visible';
+            analysis.summary = 'Target element is hidden or has zero dimensions';
+            
+            suggestions.push({
+              approach: 'Scroll into view',
+              description: 'Element might be outside viewport',
+              method: 'Use scroll or bring element into view first',
+              probability: 80
+            });
+            
+            suggestions.push({
+              approach: 'Wait for visibility',
+              description: 'Element might become visible after page loads',
+              method: 'Wait longer or trigger events that show the element',
+              probability: 60
+            });
+            
+          } else if (!isInViewport) {
+            analysis.likelyCause = 'Element is outside the viewport';
+            analysis.summary = 'Element exists and is visible but not in current view';
+            
+            suggestions.push({
+              approach: 'Scroll to element',
+              description: 'Bring element into viewport before clicking',
+              method: 'Use scrollIntoView() or scroll_page tool',
+              probability: 90
+            });
+            
+          } else {
+            // Element is visible and in viewport
+            const style = window.getComputedStyle(targetElement);
+            
+            if (style.pointerEvents === 'none') {
+              analysis.likelyCause = 'Element has pointer-events: none';
+              analysis.summary = 'Element is visible but not clickable due to CSS';
+              
+              suggestions.push({
+                approach: 'Click parent element',
+                description: 'Parent element might be the actual clickable target',
+                method: 'Try clicking the parent or container element',
+                probability: 70
+              });
+              
+              suggestions.push({
+                approach: 'Use coordinate click',
+                description: 'Force click at element coordinates',  
+                method: 'Use click_at_coordinates tool with element position',
+                probability: 60
+              });
+              
+            } else if (targetElement.disabled) {
+              analysis.likelyCause = 'Element is disabled';
+              analysis.summary = 'Element exists but is in disabled state';
+              
+              suggestions.push({
+                approach: 'Enable element first',
+                description: 'Some action might be needed to enable the element',
+                method: 'Look for prerequisites or form validation',
+                probability: 50
+              });
+              
+            } else {
+              analysis.likelyCause = 'Click event not triggering expected behavior';
+              analysis.summary = 'Element is clickable but action had no visible effect';
+              
+              suggestions.push({
+                approach: 'Try different click method',
+                description: 'Use JavaScript click instead of mouse event',
+                method: 'Force click with direct event dispatch',
+                probability: 70
+              });
+              
+              suggestions.push({
+                approach: 'Look for dynamic loading',
+                description: 'Action might trigger asynchronous behavior',
+                method: 'Wait longer after clicking and check for changes',
+                probability: 60
+              });
+            }
+          }
+        }
+        break;
+        
+      case 'fill':
+        if (!targetElement) {
+          analysis.likelyCause = 'Form field not found';
+          analysis.summary = 'The target form field could not be located';
+          
+          suggestions.push({
+            approach: 'Use more specific selector',
+            description: 'Form field selector might be too generic',
+            method: 'Find unique identifier like name, id, or data attribute',
+            probability: 80
+          });
+          
+        } else {
+          const tagName = targetElement.tagName.toLowerCase();
+          const inputType = targetElement.type;
+          
+          if (!['input', 'textarea', 'select'].includes(tagName)) {
+            analysis.likelyCause = 'Target is not a form field';
+            analysis.summary = `Target element is ${tagName}, not a form field`;
+            
+            suggestions.push({
+              approach: 'Find actual input field',
+              description: 'Look for input field inside or near this element',
+              method: 'Search for input, textarea, or select elements nearby',
+              probability: 90
+            });
+            
+          } else if (targetElement.readOnly) {
+            analysis.likelyCause = 'Field is read-only';
+            analysis.summary = 'Form field exists but is read-only';
+            
+            suggestions.push({
+              approach: 'Look for editable alternative',
+              description: 'Find a different field or make this one editable',
+              method: 'Check if there is an "edit" button or mode',
+              probability: 50
+            });
+            
+          } else {
+            analysis.likelyCause = 'Value not being set properly';
+            analysis.summary = 'Form field is valid but value is not sticking';
+            
+            suggestions.push({
+              approach: 'Clear field first',
+              description: 'Field might have existing value preventing new input',
+              method: 'Select all text and delete before typing new value',
+              probability: 80
+            });
+            
+            suggestions.push({
+              approach: 'Trigger input events',
+              description: 'Field might require specific events to register changes',
+              method: 'Dispatch focus, input, and change events',
+              probability: 70
+            });
+          }
+        }
+        break;
+        
+      default:
+        analysis.likelyCause = 'Unknown action type';
+        analysis.summary = `Analysis not available for action type: ${failedAction.type}`;
+        
+        suggestions.push({
+          approach: 'Use alternative method',
+          description: 'Try a different tool or approach',
+          method: 'Consider using coordinate-based or keyboard-based methods',
+          probability: 50
+        });
+    }
+    
+    // Add context information if requested
+    if (contextAnalysis && targetElement) {
+      analysis.context = {
+        elementType: targetElement.tagName.toLowerCase(),
+        elementId: targetElement.id || null,
+        elementClass: targetElement.className || null,
+        parentElement: targetElement.parentElement?.tagName.toLowerCase() || null,
+        siblings: targetElement.parentElement?.children.length || 0,
+        computedDisplay: window.getComputedStyle(targetElement).display,
+        computedVisibility: window.getComputedStyle(targetElement).visibility
+      };
+    }
+    
+    // Sort suggestions by probability
+    suggestions.sort((a, b) => b.probability - a.probability);
+    
+    return { analysis, suggestions };
+    
+  } catch (error) {
+    console.error('❌ Error reflecting on failure:', error);
+    throw error;
+  }
+}
+
+/**
+ * Capture current page state for comparison
+ */
+function handleCaptureState(data) {
+  try {
+    const { target } = data;
+    
+    console.log(`📸 Capturing page state for ${target}`);
+    
+    const state = {
+      url: window.location.href,
+      title: document.title,
+      timestamp: Date.now(),
+      visibleElements: [],
+      formValues: {},
+      targetElementState: null
+    };
+    
+    // Capture target element state if provided
+    if (target) {
+      const targetElement = querySelectorDeep(document, target);
+      if (targetElement) {
+        const rect = targetElement.getBoundingClientRect();
+        state.targetElementState = {
+          exists: true,
+          visible: rect.width > 0 && rect.height > 0,
+          bounds: rect,
+          value: targetElement.value || null,
+          textContent: targetElement.textContent?.trim() || null,
+          disabled: targetElement.disabled || false,
+          readonly: targetElement.readOnly || false
+        };
+      } else {
+        state.targetElementState = { exists: false };
+      }
+    }
+    
+    // Capture some visible interactive elements
+    const interactiveSelectors = ['button', 'a[href]', 'input', 'select', '[role="button"]'];
+    interactiveSelectors.forEach(selector => {
+      const elements = document.querySelectorAll(selector);
+      Array.from(elements).slice(0, 10).forEach(el => {
+        if (isElementVisible(el)) {
+          state.visibleElements.push({
+            selector: generateRobustSelector(el),
+            tag: el.tagName.toLowerCase(),
+            text: el.textContent?.trim().substring(0, 50) || '',
+            value: el.value || null
+          });
+        }
+      });
+    });
+    
+    // Capture form values
+    const forms = document.querySelectorAll('form');
+    forms.forEach((form, formIndex) => {
+      const formData = {};
+      const inputs = form.querySelectorAll('input, select, textarea');
+      inputs.forEach(input => {
+        if (input.name || input.id) {
+          formData[input.name || input.id] = input.value;
+        }
+      });
+      state.formValues[`form_${formIndex}`] = formData;
+    });
+    
+    return state;
+    
+  } catch (error) {
+    console.error('❌ Error capturing state:', error);
+    throw error;
+  }
+}
+
+/**
+ * Click element using specific strategy
+ */
+function handleClickWithStrategy(data) {
+  try {
+    const { selector, strategy } = data;
+    
+    console.log(`🎯 Clicking ${selector} using strategy: ${strategy}`);
+    
+    const element = querySelectorDeep(document, selector);
+    if (!element) {
+      throw new Error(`Element not found: ${selector}`);
+    }
+    
+    switch (strategy) {
+      case 'standard_click':
+        element.focus();
+        element.click();
+        break;
+        
+      case 'scroll_and_click':
+        element.scrollIntoView({ behavior: 'smooth', block: 'center' });
+        setTimeout(() => {
+          element.focus();
+          element.click();
+        }, 300);
+        break;
+        
+      case 'coordinate_click':
+        const rect = element.getBoundingClientRect();
+        const x = rect.left + rect.width / 2;
+        const y = rect.top + rect.height / 2;
+        
+        const clickEvent = new MouseEvent('click', {
+          bubbles: true,
+          cancelable: true,
+          clientX: x,
+          clientY: y
+        });
+        element.dispatchEvent(clickEvent);
+        break;
+        
+      case 'javascript_click':
+        // Force click using JavaScript
+        element.click();
+        
+        // Also try triggering with synthetic events
+        const events = ['mousedown', 'mouseup', 'click'];
+        events.forEach(eventType => {
+          const event = new MouseEvent(eventType, { bubbles: true, cancelable: true });
+          element.dispatchEvent(event);
+        });
+        break;
+        
+      case 'force_click':
+        // Try multiple methods
+        element.focus();
+        
+        // Mouse events
+        ['mousedown', 'mouseup', 'click'].forEach(eventType => {
+          const event = new MouseEvent(eventType, { bubbles: true, cancelable: true });
+          element.dispatchEvent(event);
+        });
+        
+        // Also try direct click
+        element.click();
+        
+        // Try click on parent if element click doesn't work
+        if (element.parentElement) {
+          element.parentElement.click();
+        }
+        break;
+        
+      default:
+        throw new Error(`Unknown click strategy: ${strategy}`);
+    }
+    
+    return {
+      success: true,
+      strategy: strategy,
+      element: {
+        tag: element.tagName.toLowerCase(),
+        id: element.id || null,
+        class: element.className || null
+      }
+    };
+    
+  } catch (error) {
+    console.error(`❌ Error with click strategy ${data.strategy}:`, error);
+    throw error;
+  }
+}
+
+/**
+ * Verify that a click had the expected effect
+ */
+function handleVerifyClickEffect(data) {
+  try {
+    const { selector, expectedEffect, beforeState, strategy } = data;
+    
+    console.log(`🔍 Verifying click effect for ${selector}`);
+    
+    const verification = {
+      verified: false,
+      details: ''
+    };
+    
+    switch (expectedEffect.type) {
+      case 'navigation':
+        const urlChanged = window.location.href !== beforeState.url;
+        verification.verified = urlChanged;
+        verification.details = urlChanged 
+          ? `Page navigated from ${beforeState.url} to ${window.location.href}`
+          : 'No navigation detected';
+        break;
+        
+      case 'dropdown':
+        if (expectedEffect.verificationSelector) {
+          const dropdownElements = querySelectorAllDeep(document, expectedEffect.verificationSelector);
+          verification.verified = dropdownElements.length > 0;
+          verification.details = verification.verified
+            ? `Dropdown appeared: ${dropdownElements.length} options found`
+            : 'No dropdown elements found';
+        } else {
+          // Generic dropdown detection
+          const commonDropdownSelectors = [
+            '[role="listbox"]', '[role="menu"]', '.dropdown-menu', '.dropdown-content',
+            'ul[class*="dropdown"]', 'div[class*="dropdown"]'
+          ];
+          
+          let foundDropdown = false;
+          for (const sel of commonDropdownSelectors) {
+            if (document.querySelector(sel)) {
+              foundDropdown = true;
+              break;
+            }
+          }
+          
+          verification.verified = foundDropdown;
+          verification.details = foundDropdown ? 'Dropdown menu detected' : 'No dropdown menu found';
+        }
+        break;
+        
+      case 'modal':
+        const modalSelectors = [
+          '[role="dialog"]', '.modal', '.popup', '[class*="modal"]',
+          '.overlay', '[class*="popup"]'
+        ];
+        
+        let foundModal = false;
+        for (const sel of modalSelectors) {
+          const modals = document.querySelectorAll(sel);
+          if (modals.length > 0) {
+            foundModal = true;
+            break;
+          }
+        }
+        
+        verification.verified = foundModal;
+        verification.details = foundModal ? 'Modal/dialog detected' : 'No modal or dialog found';
+        break;
+        
+      case 'form_change':
+        // Check if any form values changed
+        let formChanged = false;
+        const currentFormValues = {};
+        
+        document.querySelectorAll('form').forEach((form, index) => {
+          const inputs = form.querySelectorAll('input, select, textarea');
+          inputs.forEach(input => {
+            const key = `form_${index}_${input.name || input.id || input.type}`;
+            currentFormValues[key] = input.value;
+          });
+        });
+        
+        // Compare with before state
+        const beforeFormValues = beforeState.formValues || {};
+        for (const key in currentFormValues) {
+          if (beforeFormValues[key] !== currentFormValues[key]) {
+            formChanged = true;
+            break;
+          }
+        }
+        
+        verification.verified = formChanged;
+        verification.details = formChanged ? 'Form values changed' : 'No form changes detected';
+        break;
+        
+      case 'content_change':
+        if (expectedEffect.verificationSelector) {
+          const element = querySelectorDeep(document, expectedEffect.verificationSelector);
+          if (element && expectedEffect.verificationText) {
+            const hasText = element.textContent.includes(expectedEffect.verificationText);
+            verification.verified = hasText;
+            verification.details = hasText 
+              ? `Expected text found: "${expectedEffect.verificationText}"`
+              : `Expected text not found: "${expectedEffect.verificationText}"`;
+          } else {
+            verification.verified = !!element;
+            verification.details = element ? 'Verification element found' : 'Verification element not found';
+          }
+        } else {
+          // Generic content change detection
+          verification.verified = true; // Assume success if no specific verification
+          verification.details = 'Click completed (no specific verification requested)';
+        }
+        break;
+        
+      case 'no_visible_change':
+        verification.verified = true;
+        verification.details = 'Click completed successfully (no visible change expected)';
+        break;
+        
+      default:
+        verification.verified = false;
+        verification.details = `Unknown verification type: ${expectedEffect.type}`;
+    }
+    
+    return verification;
+    
+  } catch (error) {
+    console.error('❌ Error verifying click effect:', error);
+    throw error;
+  }
+}
+
+/**
+ * Fill form field using specific strategy
+ */
+function handleFillWithStrategy(data) {
+  try {
+    const { selector, value, strategy } = data;
+    
+    console.log(`📝 Filling ${selector} with "${value}" using strategy: ${strategy}`);
+    
+    const element = querySelectorDeep(document, selector);
+    if (!element) {
+      throw new Error(`Form field not found: ${selector}`);
+    }
+    
+    // Focus the element first
+    element.focus();
+    
+    switch (strategy) {
+      case 'standard_fill':
+        element.value = '';
+        element.value = value;
+        
+        // Dispatch events
+        element.dispatchEvent(new Event('input', { bubbles: true }));
+        element.dispatchEvent(new Event('change', { bubbles: true }));
+        break;
+        
+      case 'triple_click_fill':
+        // Triple click to select all
+        const tripleClick = () => {
+          for (let i = 0; i < 3; i++) {
+            element.dispatchEvent(new MouseEvent('click', { bubbles: true }));
+          }
+        };
+        
+        tripleClick();
+        element.value = value;
+        element.dispatchEvent(new Event('input', { bubbles: true }));
+        element.dispatchEvent(new Event('change', { bubbles: true }));
+        break;
+        
+      case 'key_by_key':
+        // Clear field with backspace
+        element.focus();
+        element.setSelectionRange(0, element.value.length);
+        
+        // Type character by character
+        element.value = '';
+        for (let i = 0; i < value.length; i++) {
+          const char = value[i];
+          element.value += char;
+          
+          // Dispatch key events
+          element.dispatchEvent(new KeyboardEvent('keydown', { key: char, bubbles: true }));
+          element.dispatchEvent(new Event('input', { bubbles: true }));
+          element.dispatchEvent(new KeyboardEvent('keyup', { key: char, bubbles: true }));
+        }
+        element.dispatchEvent(new Event('change', { bubbles: true }));
+        break;
+        
+      case 'javascript_set':
+        // Direct property assignment
+        const descriptor = Object.getOwnPropertyDescriptor(element, 'value') ||
+                          Object.getOwnPropertyDescriptor(Object.getPrototypeOf(element), 'value');
+        
+        if (descriptor && descriptor.set) {
+          descriptor.set.call(element, value);
+        } else {
+          element.value = value;
+        }
+        
+        // Trigger React/Vue updates if needed
+        element.dispatchEvent(new Event('input', { bubbles: true }));
+        element.dispatchEvent(new Event('change', { bubbles: true }));
+        break;
+        
+      case 'clipboard_paste':
+        // Simulate clipboard paste
+        element.focus();
+        element.setSelectionRange(0, element.value.length);
+        
+        // Create paste event
+        const pasteEvent = new ClipboardEvent('paste', {
+          bubbles: true,
+          cancelable: true,
+          clipboardData: new DataTransfer()
+        });
+        
+        // Set clipboard data
+        pasteEvent.clipboardData.setData('text/plain', value);
+        
+        element.dispatchEvent(pasteEvent);
+        
+        // Set value and trigger events
+        element.value = value;
+        element.dispatchEvent(new Event('input', { bubbles: true }));
+        element.dispatchEvent(new Event('change', { bubbles: true }));
+        break;
+        
+      default:
+        throw new Error(`Unknown fill strategy: ${strategy}`);
+    }
+    
+    return {
+      success: true,
+      strategy: strategy,
+      value: value,
+      actualValue: element.value
+    };
+    
+  } catch (error) {
+    console.error(`❌ Error with fill strategy ${data.strategy}:`, error);
+    throw error;
+  }
+}
+
+/**
+ * Verify that a form field has the expected value
+ */
+function handleVerifyFieldValue(data) {
+  try {
+    const { selector, expectedValue } = data;
+    
+    console.log(`🔍 Verifying field value for ${selector}`);
+    
+    const element = querySelectorDeep(document, selector);
+    if (!element) {
+      return {
+        verified: false,
+        actualValue: null,
+        details: 'Form field not found'
+      };
+    }
+    
+    const actualValue = element.value || '';
+    const verified = actualValue === expectedValue;
+    
+    return {
+      verified: verified,
+      actualValue: actualValue,
+      expectedValue: expectedValue,
+      details: verified 
+        ? `Value verified: "${actualValue}"`
+        : `Value mismatch: expected "${expectedValue}", got "${actualValue}"`
+    };
+    
+  } catch (error) {
+    console.error('❌ Error verifying field value:', error);
+    throw error;
+  }
+}
diff --git a/chrome/browser/resources/vibe/esbuild.js b/chrome/browser/resources/vibe/esbuild.js
deleted file mode 100644
index 02f3cb41dc..0000000000
--- a/chrome/browser/resources/vibe/esbuild.js
+++ /dev/null
@@ -1,156 +0,0 @@
-// esbuild.config.js
-import * as esbuild from 'esbuild';
-import * as fs from 'fs';
-import * as path from 'path';
-import { fileURLToPath } from 'url';
-
-const __filename = fileURLToPath(import.meta.url);
-const __dirname = path.dirname(__filename);
-
-const isProd = process.env.NODE_ENV === 'production';
-const outDir = process.argv[2] || "dist";
-
-// Ensure output directory exists
-function ensureDirectoryExists(filePath) {
-  const dirname = path.dirname(filePath);
-  if (fs.existsSync(dirname)) {
-    return true;
-  }
-  ensureDirectoryExists(dirname);
-  fs.mkdirSync(dirname);
-}
-
-// Copy static files
-function copyStaticFiles() {
-  const filesToCopy = [
-    'manifest.json',
-    'sidepanel.html',
-    'home.html',
-    'assets/icon16.png',
-    'assets/icon48.png',
-    'assets/icon128.png'
-  ];
-  
-  filesToCopy.forEach(file => {
-    const srcPath = path.resolve(__dirname, file);
-    const destPath = path.resolve(__dirname, outDir, file);
-    
-    try {
-      ensureDirectoryExists(destPath);
-      fs.copyFileSync(srcPath, destPath);
-      console.log(`Copied ${file} to ${destPath}`);
-    } catch (err) {
-      console.error(`Error copying ${file}:`, err);
-      process.exit(1);
-    }
-  });
-}
-
-// Process CSS with PostCSS, Tailwind, and Autoprefixer
-async function processCSS() {
-  try {
-    const cssEntryPoints = ['sidepanel.css', 'home.css'];
-    const { default: postcss } = await import('postcss');
-    const { default: postcssImport } = await import('postcss-import');
-    const { default: tailwindcss } = await import('tailwindcss');
-    const { default: autoprefixer } = await import('autoprefixer');
-    const cssnano = isProd ? (await import('cssnano')).default : null;
-    
-    const plugins = [
-      postcssImport(),
-      tailwindcss(),
-      autoprefixer(),
-      ...(isProd ? [cssnano({ preset: 'default' })] : [])
-    ];
-    
-    for (const cssFile of cssEntryPoints) {
-      const inputPath = path.resolve(__dirname, cssFile);
-      const outputPath = path.resolve(__dirname, outDir, cssFile);
-      
-      try {
-        // Read the CSS file
-        const css = await fs.promises.readFile(inputPath, 'utf8');
-        
-        // Process with PostCSS
-        const result = await postcss(plugins).process(css, {
-          from: inputPath,
-          to: outputPath,
-          map: !isProd && { inline: false }
-        });
-        
-        // Ensure output directory exists
-        ensureDirectoryExists(outputPath);
-        
-        // Write the processed CSS
-        await fs.promises.writeFile(outputPath, result.css, 'utf8');
-        
-        // Write source map if enabled
-        if (result.map) {
-          await fs.promises.writeFile(`${outputPath}.map`, result.map.toString(), 'utf8');
-        }
-        
-        console.log(`✅ Processed ${cssFile} with PostCSS, Tailwind${isProd ? ', and CSSNano' : ''}`);
-      } catch (err) {
-        console.error(`❌ Error processing ${cssFile}:`, err);
-        throw err;
-      }
-    }
-  } catch (err) {
-    console.error('❌ CSS processing failed. Ensure all dependencies are installed:');
-    console.error('   npm install -D postcss postcss-import tailwindcss autoprefixer' + (isProd ? ' cssnano' : ''));
-    process.exit(1);
-  }
-}
-
-// Build JavaScript files
-async function buildJS() {
-  try {
-    await esbuild.build({
-      entryPoints: {
-        background: 'background.js',
-        sidepanel: 'sidepanel.js',
-        home: 'home.js',
-        content: 'content.js',
-      },
-      bundle: true,
-      splitting: false,
-      format: 'iife',
-      outdir: outDir,
-      target: ['chrome112'],
-      sourcemap: true,
-      minify: isProd,
-      platform: 'browser',
-      external: [],
-      define: {
-        'process.env.NODE_ENV': isProd ? '"production"' : '"development"',
-        'global': 'globalThis'
-      },
-      inject: ['./lib/test/async_hooks_shim.js'],
-    });
-    
-    console.log('JavaScript build completed');
-  } catch (err) {
-    console.error('Error building JavaScript:', err);
-    process.exit(1);
-  }
-}
-
-// Main build function
-async function build() {
-  console.log('Starting build...');
-  
-  // Ensure output directory exists
-  ensureDirectoryExists(path.resolve(__dirname, outDir, 'dummy'));
-  
-  // Run builds in parallel
-  await Promise.all([
-    buildJS(),
-    processCSS(),
-    copyStaticFiles()
-  ]);
-  
-  console.log('Build completed successfully');
-}
-
-// Run the build
-build().catch(console.error);
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/home.html b/chrome/browser/resources/vibe/home.html
deleted file mode 100644
index b81a08387e..0000000000
--- a/chrome/browser/resources/vibe/home.html
+++ /dev/null
@@ -1,161 +0,0 @@
-<!doctype html>
-<html lang="en" class="h-full">
-<head>
-  <meta charset="UTF-8">
-  <meta name="viewport" content="width=device-width,initial-scale=1">
-  <title>Vibe AI - New Tab</title>
-  <link rel="preconnect" href="https://fonts.googleapis.com">
-  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
-  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
-  <link href="./home.css" rel="stylesheet">
-</head>
-<body class="h-full bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 font-inter">
-  <!-- Vertical nav rail -->
-  <aside class="fixed inset-y-0 left-0 w-14 flex flex-col items-center gap-6 py-4 border-r bg-white dark:bg-gray-900 z-20">
-    <button class="w-9 h-9 bg-green-600 rounded-full text-white text-lg font-bold">V</button>
-    <button title="New chat" class="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800">
-      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
-        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
-      </svg>
-    </button>
-    <button title="History" class="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800">
-      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
-        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
-      </svg>
-    </button>
-    <button class="mt-auto mb-2 p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800" title="Settings">
-      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
-        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
-        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
-      </svg>
-    </button>
-  </aside>
-
-  <div id="root" class="h-full flex flex-col lg:ml-14">
-    <!-- Header -->
-    <div class="shrink-0 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800">
-      <div class="px-6 py-4">
-        <div class="flex items-center justify-between max-w-6xl mx-auto">
-          <div class="flex items-center space-x-3">
-            <div class="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center">
-              <span class="text-white font-bold text-lg">V</span>
-            </div>
-            <h1 class="text-xl font-semibold text-gray-800 dark:text-gray-200">Vibe AI</h1>
-          </div>
-          <div id="modelName" class="text-sm text-gray-600 dark:text-gray-400">GPT-4o mini</div>
-        </div>
-      </div>
-    </div>
-
-    <!-- Messages container -->
-    <div class="flex-1 overflow-hidden pb-[calc(theme(spacing.32)+env(safe-area-inset-bottom))]">
-      <div id="messages" class="h-full overflow-y-auto">
-        <div class="messages-container px-4 sm:px-6 py-8 max-w-3xl mx-auto flex flex-col gap-8">
-          <!-- Welcome message - hidden when chat starts -->
-          <div id="welcomeMessage" class="flex justify-center mb-12">
-            <div class="text-center">
-              <div class="w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-6">
-                <span class="text-white font-bold text-2xl">V</span>
-              </div>
-              <h2 class="text-3xl font-medium text-gray-800 dark:text-gray-200 mb-4">What can I help with?</h2>
-              <p class="text-gray-600 dark:text-gray-400 max-w-md">Ask me anything or let me help you browse the web more efficiently.</p>
-            </div>
-          </div>
-          <!-- Messages will be inserted here by JavaScript -->
-        </div>
-      </div>
-    </div>
-
-    <!-- Input area -->
-    <div class="fixed bottom-0 inset-x-0 border-t border-gray-200 dark:border-gray-700 bg-white/70 dark:bg-gray-800/70 backdrop-blur supports-[backdrop-filter]:backdrop-blur z-10">
-      <div class="relative max-w-3xl mx-auto px-4 sm:px-6 py-6">
-        <div class="relative max-w-4xl mx-auto">
-          <div class="flex items-end bg-gray-50 dark:bg-gray-700 rounded-2xl border border-gray-200 dark:border-gray-600 focus-within:border-gray-300 dark:focus-within:border-gray-500 transition-colors">
-            <!-- Attachment button -->
-            <button class="p-4 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 transition-colors">
-              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
-                <path d="M15 7v6a3 3 0 0 1-6 0V3a5 5 0 0 1 10 0v10a7 7 0 0 1-14 0V9"></path>
-              </svg>
-            </button>
-            
-            <textarea
-              id="messageInput"
-              class="flex-1 resize-none bg-transparent px-3 py-4 text-base outline-none placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-gray-100 min-h-[56px] max-h-40"
-              placeholder="Message Vibe AI"
-              rows="1"
-              spellcheck="true"
-            ></textarea>
-            
-            <!-- Voice input button -->
-            <button class="p-4 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 transition-colors">
-              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
-                <path d="M12 2a3 3 0 0 0-3 3v6a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"></path>
-                <path d="M19 10v1a7 7 0 0 1-14 0v-1"></path>
-                <line x1="12" y1="18" x2="12" y2="22"></line>
-                <line x1="8" y1="22" x2="16" y2="22"></line>
-              </svg>
-            </button>
-            
-            <button id="sendButton" class="p-3 m-2 rounded-lg bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors" disabled>
-              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="text-gray-600 dark:text-gray-300">
-                <line x1="22" y1="2" x2="11" y2="13"></line>
-                <polygon points="22,2 15,22 11,13 2,9 22,2"></polygon>
-              </svg>
-            </button>
-          </div>
-        </div>
-      </div>
-    </div>
-  </div>
-
-  <!-- Message templates -->
-  <template id="userMessageTemplate">
-    <div class="flex justify-end mb-8">
-      <div class="bg-gray-100 dark:bg-gray-700 rounded-2xl px-5 py-4 max-w-2xl text-base text-gray-900 dark:text-gray-100">
-        <div class="message-content"></div>
-      </div>
-    </div>
-  </template>
-
-  <template id="assistantMessageTemplate">
-    <div class="flex justify-start mb-8">
-      <div class="flex items-start space-x-4 max-w-full">
-        <div class="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center shrink-0 mt-1">
-          <span class="text-white font-bold text-sm">AI</span>
-        </div>
-        <div class="message-content text-base leading-relaxed max-w-none text-gray-900 dark:text-gray-100"></div>
-      </div>
-    </div>
-  </template>
-
-  <template id="systemMessageTemplate">
-    <div class="flex justify-center mb-6">
-      <div class="text-sm text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-700 px-4 py-2 rounded-full">
-        <div class="message-content"></div>
-      </div>
-    </div>
-  </template>
-  
-  <!-- Thinking indicator template -->
-  <template id="thinkingTemplate">
-    <div class="flex justify-start mb-8">
-      <div class="flex items-start space-x-4 max-w-full">
-        <div class="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center shrink-0 mt-1">
-          <span class="text-white font-bold text-sm">AI</span>
-        </div>
-        <div class="text-base text-gray-600 dark:text-gray-400 italic bg-gray-50 dark:bg-gray-700 px-4 py-3 rounded-lg">
-          <div class="thinking-content">
-            <div class="tool-indicator flex items-center gap-3">
-              <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-green-600"></div>
-              <span class="tool-name">Thinking...</span>
-            </div>
-            <div class="thinking-duration-text text-sm opacity-75 mt-2">for <span class="thinking-duration">0</span> seconds</div>
-          </div>
-        </div>
-      </div>
-    </div>
-  </template>
-
-  <script src="home.js"></script>
-</body>
-</html>
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/home.js b/chrome/browser/resources/vibe/home.js
deleted file mode 100644
index fe09d5f8b5..0000000000
--- a/chrome/browser/resources/vibe/home.js
+++ /dev/null
@@ -1,427 +0,0 @@
-// @ts-nocheck
-
-/**
- * Vibe AI Agent New Tab Page
- * Main UI for AI agent interaction in new tab context
- */
-
-class VibeAIHomePage {
-  constructor() {
-    // Main containers
-    this.messagesContainer = document.querySelector(".messages-container");
-    this.messageInput = document.getElementById("messageInput");
-    this.sendButton = document.getElementById("sendButton");
-    this.welcomeMessage = document.getElementById("welcomeMessage");
-    
-    // State
-    this.isProcessing = false;
-    this.messageHistory = [];
-    this.currentOperationId = null;
-    this.pendingQuestionRequest = null;
-    this.thinkingStartTime = null;
-    this.currentTool = null;
-    
-    // Templates
-    this.userMessageTemplate = document.getElementById("userMessageTemplate").content;
-    this.assistantMessageTemplate = document.getElementById("assistantMessageTemplate").content;
-    this.systemMessageTemplate = document.getElementById("systemMessageTemplate").content;
-    this.thinkingTemplate = document.getElementById("thinkingTemplate").content;
-    
-    this.initialize();
-  }
-  
-  initialize() {
-    console.log("Initializing Vibe AI Home Page...");
-    
-    // Set up dark mode detection
-    this.setupDarkMode();
-    
-    // Initialize event listeners
-    this.initializeEventListeners();
-    
-    // Set up message input auto-resize
-    this.setupMessageInput();
-    
-    // Listen for messages from background script
-    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
-      const result = this.handleBackgroundMessage(message, sender, sendResponse);
-      if (!result) {
-        sendResponse({ success: true });
-      }
-      return result; // Keep channel open if needed
-    });
-    
-    // Load any existing messages from storage
-    this.loadMessages();
-    
-    console.log("✅ [NEW-TAB] [home.js] Vibe AI Home Page initialized");
-  }
-  
-  initializeEventListeners() {
-    // Send message on button click or Enter key (but allow Shift+Enter for new lines)
-    this.sendButton.addEventListener("click", () => this.sendMessage());
-    this.messageInput.addEventListener("keydown", (e) => {
-      if (e.key === "Enter" && !e.shiftKey) {
-        e.preventDefault();
-        this.sendMessage();
-      }
-    });
-    
-    // Keyboard shortcut: Cmd/Ctrl + E to focus input
-    document.addEventListener("keydown", (e) => {
-      if ((e.ctrlKey || e.metaKey) && e.key === "e") {
-        e.preventDefault();
-        this.messageInput.focus();
-      }
-    });
-    
-    // Update send button state when input changes
-    this.messageInput.addEventListener('input', () => {
-      this.updateSendButtonState();
-    });
-  }
-  
-  setupMessageInput() {
-    // Auto-resize textarea as user types
-    this.messageInput.addEventListener('input', () => {
-      this.messageInput.style.height = 'auto';
-      this.messageInput.style.height = Math.min(this.messageInput.scrollHeight, 200) + 'px';
-    });
-    
-    // Focus the input when the page loads
-    this.messageInput.focus();
-  }
-  
-  setupDarkMode() {
-    // Check for saved preference or system preference
-    const savedTheme = localStorage.getItem('vibe-theme');
-    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
-    
-    if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
-      this.enableDarkMode();
-    } else {
-      this.disableDarkMode();
-    }
-  }
-  
-  enableDarkMode() {
-    document.documentElement.classList.add('dark');
-    localStorage.setItem('vibe-theme', 'dark');
-    this.isDarkMode = true;
-  }
-  
-  disableDarkMode() {
-    document.documentElement.classList.remove('dark');
-    localStorage.setItem('vibe-theme', 'light');
-    this.isDarkMode = false;
-  }
-  
-  updateSendButtonState() {
-    const hasContent = this.messageInput.value.trim().length > 0;
-    this.sendButton.disabled = !hasContent || this.isProcessing;
-    
-    if (hasContent && !this.isProcessing) {
-      this.sendButton.classList.add('send-button-enabled');
-    } else {
-      this.sendButton.classList.remove('send-button-enabled');
-    }
-  }
-
-  /**
-   * Handles sending a message
-   * @param {string} [customMessage] - Optional custom message to send
-   */
-  async sendMessage(customMessage) {
-    try {
-      const message = customMessage || this.messageInput.value.trim();
-      if (!message || this.isProcessing) return;
-      
-      // Add user message to chat
-      this.addMessage('user', message);
-      
-      // Clear input if this was from the input field
-      if (!customMessage) {
-        this.messageInput.value = '';
-        this.messageInput.style.height = 'auto'; // Reset input height
-      }
-      
-      // Hide welcome message
-      if (this.welcomeMessage) {
-        this.welcomeMessage.style.display = 'none';
-      }
-      
-      this.updateSendButtonState();
-      
-      // Set processing state
-      this.isProcessing = true;
-      this.showThinkingIndicator();
-      
-      // Send message to background script for processing
-      const response = await new Promise((resolve) => {
-        chrome.runtime.sendMessage({
-          type: 'USER_MESSAGE',
-          message: message,
-          timestamp: new Date().toISOString(),
-          context: 'home' // Identify this as coming from home page
-        }, resolve);
-      });
-      
-      // Handle response
-      if (response && response.success) {
-        // Response will come through background message handler
-        console.log("Message sent successfully");
-      } else {
-        this.addMessage('system', 'Error sending message. Please try again.');
-        this.isProcessing = false;
-        this.hideThinkingIndicator();
-        this.updateSendButtonState();
-      }
-      
-    } catch (error) {
-      console.error('Error sending message:', error);
-      this.addMessage('system', 'Error sending message. Please try again.');
-      this.isProcessing = false;
-      this.hideThinkingIndicator();
-      this.updateSendButtonState();
-    }
-  }
-  
-  /**
-   * Handles messages from the background script
-   */
-  handleBackgroundMessage(message, sender, sendResponse) {
-    console.log('[NEW-TAB] Received message:', message.type);
-    
-    switch (message.type) {
-      case 'AI_RESPONSE':
-        this.handleAIResponse(message);
-        return false;
-        
-      case 'AI_THINKING':
-        this.updateThinkingIndicator(message.tool, message.duration);
-        return false;
-        
-      case 'AI_ERROR':
-        this.handleAIError(message);
-        return false;
-        
-      default:
-        console.log('[NEW-TAB] Unknown message type:', message.type);
-        return false;
-    }
-  }
-  
-  handleAIResponse(message) {
-    this.hideThinkingIndicator();
-    this.addMessage('assistant', message.response);
-    this.isProcessing = false;
-    this.updateSendButtonState();
-    
-    // Save conversation
-    this.saveMessages();
-  }
-  
-  handleAIError(message) {
-    this.hideThinkingIndicator();
-    this.addMessage('system', `Error: ${message.error}`);
-    this.isProcessing = false;
-    this.updateSendButtonState();
-  }
-  
-  showThinkingIndicator() {
-    this.hideThinkingIndicator(); // Remove any existing indicator
-    
-    const template = this.thinkingTemplate.cloneNode(true);
-    const container = template.querySelector('.thinking-content');
-    
-    this.currentThinkingElement = template;
-    this.thinkingStartTime = Date.now();
-    
-    this.messagesContainer.appendChild(template);
-    this.scrollToBottom();
-    
-    // Update thinking duration every second
-    this.thinkingTimer = setInterval(() => {
-      this.updateThinkingDuration();
-    }, 1000);
-  }
-  
-  updateThinkingIndicator(tool, duration) {
-    if (!this.currentThinkingElement) return;
-    
-    const toolNameElement = this.currentThinkingElement.querySelector('.tool-name');
-    const durationElement = this.currentThinkingElement.querySelector('.thinking-duration');
-    
-    if (toolNameElement) {
-      toolNameElement.textContent = tool ? `Using ${tool}...` : 'Thinking...';
-    }
-    
-    if (durationElement && duration) {
-      durationElement.textContent = Math.floor(duration / 1000);
-    }
-  }
-  
-  updateThinkingDuration() {
-    if (!this.currentThinkingElement || !this.thinkingStartTime) return;
-    
-    const duration = Date.now() - this.thinkingStartTime;
-    const seconds = Math.floor(duration / 1000);
-    
-    const durationElement = this.currentThinkingElement.querySelector('.thinking-duration');
-    if (durationElement) {
-      durationElement.textContent = seconds;
-    }
-  }
-  
-  hideThinkingIndicator() {
-    if (this.currentThinkingElement) {
-      this.currentThinkingElement.remove();
-      this.currentThinkingElement = null;
-    }
-    
-    if (this.thinkingTimer) {
-      clearInterval(this.thinkingTimer);
-      this.thinkingTimer = null;
-    }
-    
-    this.thinkingStartTime = null;
-  }
-  
-  /**
-   * Adds a message to the chat
-   */
-  addMessage(type, content, metadata = {}) {
-    let template;
-    
-    switch (type) {
-      case 'user':
-        template = this.userMessageTemplate.cloneNode(true);
-        break;
-      case 'assistant':
-        template = this.assistantMessageTemplate.cloneNode(true);
-        break;
-      case 'system':
-        template = this.systemMessageTemplate.cloneNode(true);
-        break;
-      default:
-        console.error('Unknown message type:', type);
-        return;
-    }
-    
-    const messageContent = template.querySelector('.message-content');
-    if (messageContent) {
-      // Handle markdown-like formatting
-      const formattedContent = this.formatMessageContent(content);
-      messageContent.innerHTML = formattedContent;
-    }
-    
-    this.messagesContainer.appendChild(template);
-    this.scrollToBottom();
-    
-    // Store message in history
-    this.messageHistory.push({
-      type,
-      content,
-      timestamp: new Date().toISOString(),
-      metadata
-    });
-    
-    // Limit message history to prevent memory issues
-    if (this.messageHistory.length > 100) {
-      this.messageHistory = this.messageHistory.slice(-80);
-    }
-  }
-  
-  formatMessageContent(content) {
-    // Basic markdown-like formatting
-    return content
-      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
-      .replace(/\*(.*?)\*/g, '<em>$1</em>')
-      .replace(/`(.*?)`/g, '<code>$1</code>')
-      .replace(/\n/g, '<br>');
-  }
-  
-  scrollToBottom() {
-    const messages = document.getElementById('messages');
-    if (messages) {
-      messages.scrollTop = messages.scrollHeight;
-    }
-  }
-  
-  /**
-   * Load messages from storage
-   */
-  async loadMessages() {
-    try {
-      const result = await chrome.storage.local.get(['vibeMessages']);
-      if (result.vibeMessages && Array.isArray(result.vibeMessages)) {
-        this.messageHistory = result.vibeMessages;
-        
-        // Display recent messages
-        const recentMessages = this.messageHistory.slice(-10);
-        for (const msg of recentMessages) {
-          this.addMessageToDOM(msg.type, msg.content, msg.metadata);
-        }
-        
-        if (recentMessages.length > 0) {
-          this.welcomeMessage.style.display = 'none';
-        }
-      }
-    } catch (error) {
-      console.error('Error loading messages:', error);
-    }
-  }
-  
-  /**
-   * Save messages to storage
-   */
-  async saveMessages() {
-    try {
-      await chrome.storage.local.set({
-        vibeMessages: this.messageHistory
-      });
-    } catch (error) {
-      console.error('Error saving messages:', error);
-    }
-  }
-  
-  addMessageToDOM(type, content, metadata = {}) {
-    let template;
-    
-    switch (type) {
-      case 'user':
-        template = this.userMessageTemplate.cloneNode(true);
-        break;
-      case 'assistant':
-        template = this.assistantMessageTemplate.cloneNode(true);
-        break;
-      case 'system':
-        template = this.systemMessageTemplate.cloneNode(true);
-        break;
-      default:
-        return;
-    }
-    
-    const messageContent = template.querySelector('.message-content');
-    if (messageContent) {
-      const formattedContent = this.formatMessageContent(content);
-      messageContent.innerHTML = formattedContent;
-    }
-    
-    this.messagesContainer.appendChild(template);
-  }
-}
-
-// Initialize when DOM is loaded
-document.addEventListener('DOMContentLoaded', () => {
-  window.vibeHomePage = new VibeAIHomePage();
-});
-
-// Also initialize if DOM is already loaded
-if (document.readyState === 'loading') {
-  document.addEventListener('DOMContentLoaded', () => {
-    window.vibeHomePage = new VibeAIHomePage();
-  });
-} else {
-  window.vibeHomePage = new VibeAIHomePage();
-}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/manifest.json b/chrome/browser/resources/vibe/manifest.json
index 9d20d1600e..12c2d9cd1a 100644
--- a/chrome/browser/resources/vibe/manifest.json
+++ b/chrome/browser/resources/vibe/manifest.json
@@ -1,9 +1,9 @@
 {
+  "key": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAirTOr5bvPssqICmaCllgXaCJyeRQe1Ct5w0BqJGK6ydOeac9y/yOhWoT7aN7lqmpeHhxyoUn5IPnezhnTRWfkr5z1RKW0BvfvjhHzrSMsBtiAf6TT1xkCZafAlDJNfQ3fRMWF7Iy2lQSC3Rr0gfLkb1+LALg7cPVICdTk/mLlhh1FYWb/eAOTGv/iS/pZF6FpKoSJabRBkzEJdrk3gy+xEG0oQJGit0IbxOiQrnWWN2WAENx2yMMyO4IK0My0cTP3DLuoFHfVHleANVJlMr6X2BY9FdQ2EBBj0Z+YZrnlaDneAw8SeEfQQQsNmok1Bmmp2YXP4IZitv/A+v2IHWEHQIDAQAB",
   "manifest_version": 3,
   "name": "Vibe AI Agent",
   "version": "1.0.0",
   "description": "AI-powered browser automation and natural language processing",
-  "key": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0C0AakL+XOcj+PMf24WqoKHA/hhypDQZUUd9sJr/c7cx3nLJS+kaJaB+cz8V3RhPZq01BFeByofLg6Hg6ZNVvBVn3wtGLcNPmuCwMmDiHetTV0oJsFOWs2VznP9py1ww5FFhU+Wmw1CWyLJqnwsIsLLCQyUXAZpVEOLJlOqX1wIDAQAB",
   "permissions": [
     "activeTab",
     "storage",
@@ -35,10 +35,10 @@
     "default_title": "Vibe AI Agent"
   },
   "side_panel": {
-    "default_path": "sidepanel.html"
+    "default_path": "chat.html"
   },
   "chrome_url_overrides": {
-    "newtab": "home.html"
+    "newtab": "chat.html"
   },
   "content_scripts": [
     {
diff --git a/chrome/browser/resources/vibe/package.json b/chrome/browser/resources/vibe/package.json
index 97270a4ed4..ce98b2ea34 100644
--- a/chrome/browser/resources/vibe/package.json
+++ b/chrome/browser/resources/vibe/package.json
@@ -4,10 +4,7 @@
   "type": "module",
   "scripts": {
     "test": "jest --config jest.config.js",
-    "test:watch": "jest --config jest.config.js --watch",
-    "test:agent": "jest --config jest.config.js --testPathPattern='ai_agent.test'",
     "test:agent:verbose": "jest --config jest.config.js --testPathPattern='ai_agent.test' --verbose",
-    "build": "node esbuild.js",
     "lint": "eslint *.js"
   },
   "keywords": [],
diff --git a/chrome/browser/resources/vibe/test_agent.js b/chrome/browser/resources/vibe/test_agent.js
new file mode 100644
index 0000000000..611e476c74
--- /dev/null
+++ b/chrome/browser/resources/vibe/test_agent.js
@@ -0,0 +1,69 @@
+#!/usr/bin/env node
+
+// Simple test script to check agent.html for console errors
+import { execSync } from 'child_process';
+import path from 'path';
+import fs from 'fs';
+import { fileURLToPath } from 'url';
+
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = path.dirname(__filename);
+
+const agentHtmlPath = path.resolve(__dirname, 'dist/agent.html');
+
+console.log('🔧 Testing agent.html for console errors...');
+console.log('📁 File path:', agentHtmlPath);
+
+try {
+  // Use node to check if the HTML file is valid
+  const htmlContent = fs.readFileSync(agentHtmlPath, 'utf8');
+  
+  console.log('✅ HTML file exists and is readable');
+  console.log('📊 File size:', (htmlContent.length / 1024).toFixed(1) + 'KB');
+  
+  // Basic HTML validation
+  if (htmlContent.includes('<!DOCTYPE html>')) {
+    console.log('✅ Valid HTML5 DOCTYPE found');
+  }
+  
+  if (htmlContent.includes('<script src="./agent.js">')) {
+    console.log('✅ agent.js script reference found');
+  }
+  
+  if (htmlContent.includes('<div id="__next">')) {
+    console.log('✅ React mount point found');
+  }
+  
+  if (htmlContent.includes('@font-face')) {
+    console.log('✅ Font definitions found in CSS');
+  }
+  
+  // Check for potential issues
+  const issues = [];
+  
+  if (htmlContent.includes('src="/_next/')) {
+    issues.push('❌ Found absolute paths that should be relative');
+  }
+  
+  if (htmlContent.includes('href="/_next/')) {
+    issues.push('❌ Found absolute href paths that should be relative');
+  }
+  
+  if (!htmlContent.includes('url(./media/')) {
+    issues.push('⚠️  Font paths might not be relative');
+  }
+  
+  if (issues.length === 0) {
+    console.log('✅ No obvious path issues found');
+  } else {
+    issues.forEach(issue => console.log(issue));
+  }
+  
+  console.log('\n🌐 To test in browser, run:');
+  console.log(`open -a "Google Chrome" "${agentHtmlPath}"`);
+  console.log('\n📋 Check browser console for JavaScript errors');
+  
+} catch (error) {
+  console.error('❌ Error testing agent.html:', error.message);
+  process.exit(1);
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/tsconfig.json b/chrome/browser/resources/vibe/tsconfig.json
index 0ab8cff45d..828092a81c 100644
--- a/chrome/browser/resources/vibe/tsconfig.json
+++ b/chrome/browser/resources/vibe/tsconfig.json
@@ -12,6 +12,6 @@
     "outDir": "./dist-ts",
     "rootDir": "."
   },
-  "include": ["**/*.ts", "**/*.js"],
+  "include": ["**/*.ts"],
   "exclude": ["node_modules", "dist"]
 }
diff --git a/doc/extension.md b/doc/extension.md
index 072f1197cd..44aaa4f189 100644
--- a/doc/extension.md
+++ b/doc/extension.md
@@ -1,7 +1,50 @@
 - The extension source code is located at chrome/browser/resources/vibe
 - The extension is registered as component extension by calling void ComponentLoader::AddDefaultComponentExtensionsWithBackgroundPages()
 - The extension is whitelisted at bool IsComponentExtensionAllowlisted(int manifest_resource_id)
-- The extension is loaded 
+
+Vibe Extension Manifest: chrome/browser/resources/vibe/manifest.json
+Extension main parts: 
+  Worker: 
+- chrome/browser/resources/vibe/background.js
+- chrome/browser/resources/vibe/ai_agent.js
+- chrome/browser/resources/vibe/ai_tools.extension.js
+  Content injected script:
+chrome/browser/resources/vibe/content.js
+  Sidepanel and Homepage
+- chrome/browser/resources/vibe/apps/chat2/
+
+Component extension resources/files are declared there: `chrome/browser/resources/component_extension_resources.grd`
+
+Extension build script that is called from ninja: chrome/browser/resources/vibe/build.py
+
+
+How the extension is built:
+1. ninja calls `node build.js` that bundles scripts into 3 scripts: content.js, background.js, sidepanel.js
+2. chromium build system builds the component extensions from files declared at chrome/browser/resources/component_extension_resources.grd, for example 
+```xml
+
+  <include name="IDR_VIBE_MANIFEST" file="${root_gen_dir}/chrome/browser/resources/vibe/manifest.json" use_base_dir="false" resource_path="vibe/manifest.json" type="BINDATA" />
+...
+```
+
+Files a packed onto component_extension_resources.pak
+3. When chromium starts, it loads the component extension from manifest, that is registered at chrome/browser/extensions/component_loader.cc:
+```c++
+
+  Add(IDR_VIBE_MANIFEST,
+      base::FilePath(FILE_PATH_LITERAL("vibe")));
+```
+
+4. We use AI agent chat page as a home and sidepanel pages.
+
+```
+  "side_panel": {
+    "default_path": "chat.html"
+  },
+  "chrome_url_overrides": {
+    "newtab": "chat.html"
+  },
+```
 
 ## Settings Integration
 
@@ -27,48 +70,6 @@ The extension accesses configuration through Chrome's browser preferences system
 3. **Preference Key Filtering**: Filters for keys starting with `vibe_ai.`
 4. **No WebUI Messaging**: Does NOT use `chrome.runtime.sendMessage()` to communicate with WebUI pages
 
-#### Implementation in background.js
-
-```javascript
-async function getBrowserSettingsViaMessage() {
-  try {
-    if (chrome.settingsPrivate) {
-      console.log('🔧 [CONFIG] Reading settings from browser preferences...');
-      
-      // Read Vibe AI preferences directly
-      const preferences = await new Promise((resolve) => {
-        chrome.settingsPrivate.getAllPrefs((prefs) => {
-          resolve(prefs || []);
-        });
-      });
-      
-      // Extract Vibe AI settings from preferences
-      const vibePrefs = {};
-      for (const pref of preferences) {
-        if (pref.key && pref.key.startsWith('vibe_ai.')) {
-          vibePrefs[pref.key] = pref.value;
-        }
-      }
-      
-      return {
-        provider: vibePrefs['vibe_ai.provider'] || 'openai',
-        model: vibePrefs['vibe_ai.model'] || 'gpt-4o-mini',
-        temperature: vibePrefs['vibe_ai.temperature'] || 0.1,
-        maxTokens: vibePrefs['vibe_ai.max_tokens'] || 1000,
-        agentTimeout: vibePrefs['vibe_ai.agent_timeout'] || 30000,
-        openaiApiKey: vibePrefs['vibe_ai.openai_api_key'] || null,
-        geminiApiKey: vibePrefs['vibe_ai.gemini_api_key'] || null,
-        openaiConfigured: !!(vibePrefs['vibe_ai.openai_api_key']),
-        geminiConfigured: !!(vibePrefs['vibe_ai.gemini_api_key'])
-      };
-    }
-  } catch (error) {
-    console.log('⚠️ [CONFIG] Failed to read browser settings:', error.message);
-    return {};
-  }
-}
-```
-
 #### Browser Settings Storage
 
 User settings are stored in Chromium preferences defined in `vibe_ai_prefs.h/cc`:
diff --git a/test_console_trigger.js b/test_console_trigger.js
new file mode 100644
index 0000000000..1e2324ffc9
--- /dev/null
+++ b/test_console_trigger.js
@@ -0,0 +1,26 @@
+// Test script to trigger the Vibe agent from browser console
+console.log('🧠 Testing Vibe Agent Trigger Methods...');
+
+// Method 1: Open side panel directly
+chrome.sidePanel.open({}).then(() => {
+    console.log('✅ Side panel opened successfully');
+    
+    // Method 2: Send a query to the agent  
+    setTimeout(() => {
+        chrome.runtime.sendMessage({
+            type: 'USER_QUERY',
+            message: 'book flight from SFO to JFK August 1 one way'
+        }).then(response => {
+            console.log('✅ Query sent to agent:', response);
+        }).catch(error => {
+            console.log('❌ Failed to send query:', error);
+        });
+    }, 2000);
+    
+}).catch(error => {
+    console.log('❌ Failed to open side panel:', error);
+});
+
+// Method 3: Check if extension is loaded
+console.log('🔍 Extension ID check:', chrome.runtime.id);
+console.log('🔍 Available chrome APIs:', Object.keys(chrome));
\ No newline at end of file
diff --git a/test_vibe.js b/test_vibe.js
index bf61a286d4..58de1d6024 100755
--- a/test_vibe.js
+++ b/test_vibe.js
@@ -160,7 +160,7 @@ class ComprehensiveVibeTest {
           userDataDir: this.userDataDir,
           startingUrl: 'about:blank',
           chromeFlags: [
-            '--load-extension=' + path.resolve('./out/Debug/gen/chrome/browser/resources/vibe'),
+            // Component extensions are built into Chrome, no need to load separately
             '--disable-features=RendererCodeIntegrity',
             '--remote-allow-origins=*',
             `--window-size=${this.config.windowSize}`,
@@ -173,7 +173,15 @@ class ComprehensiveVibeTest {
             '--disable-features=TranslateUI',
             '--disable-ipc-flooding-protection',
             '--disable-web-security',
-            '--disable-features=VizDisplayCompositor'
+            '--disable-features=VizDisplayCompositor',
+            '--enable-logging',
+            '--v=1',
+            // Remove test-type flag to allow component extensions with background pages
+            // The test-type flag disables component extensions with service workers
+            '--simulate-outdated-no-au=outdated',  // Alternative to test-type for testing
+            '--ignore-certificate-errors-spki-list',
+            '--ignore-certificate-errors',
+            '--ignore-ssl-errors'
           ],
           logLevel: 'info'
         });
@@ -752,22 +760,18 @@ class ComprehensiveVibeTest {
       };
       
       try {
-        // 1. Activate browser and open side panel
-        console.log('1/7 Activating browser and opening Vibe side panel...');
+        // 1. Activate browser and prepare for Vibe interaction
+        console.log('1/7 Activating browser and preparing for Vibe interaction...');
         
         // Activate browser window via CDP
         await this.activateBrowserWindow();
         await this.wait(1000);
         
-        // Open Vibe side panel by clicking toolbar icon
-        console.log('   Opening Vibe side panel via toolbar icon...');
-        const panelOpened = await this.openVibeSidePanelCDP();
-        if (!panelOpened) {
-          throw new Error('Failed to open Vibe side panel');
-        }
+        // For component extensions, we'll open the side panel through omnibox instead
+        console.log('   Component extension detected, side panel will open via omnibox interaction...');
         
         checkTimeout();
-        this.takeScreenshotSystem('1_sidepanel_opened');
+        this.takeScreenshotSystem('1_browser_ready');
         
         // 2. Use Vibe's natural language interface via omnibox/address bar
         console.log('2/7 Using Vibe natural language interface...');
@@ -776,25 +780,55 @@ class ComprehensiveVibeTest {
         console.log('   Focusing address bar for Vibe query...');
         await this.sendKeyboardShortcut('L', { cmd: true }); // Cmd+L to focus address bar
         await this.wait(500);
+        // Take system screenshot to see actual browser window
+        try {
+          execSync(`screencapture -x "/Users/engineer/workspace/vibebrowser/src/.test/screenshots/2a_system_screenshot_${Date.now()}.png"`);
+          console.log('   System screenshot taken');
+        } catch (e) {
+          console.log('   System screenshot failed:', e.message);
+        }
+        this.takeScreenshotSystem('2a_address_bar_focused');
         await this.sendKeyboardShortcut('A', { cmd: true }); // Cmd+A to select all
         await this.wait(500);
+        this.takeScreenshotSystem('2b_address_bar_selected');
         checkTimeout();
         
-        // 3. Input the flight booking command via Vibe
+        // 3. Input the flight booking command via Vibe omnibox
         console.log('3/7 Entering flight booking command via Vibe...');
         
-        const flightCommand = 'vibe book flight for me SFO JFK Aug 1 one way';
-        console.log(`   Typing Vibe command: "${flightCommand}"`);
+        // First type "vibe" to activate the omnibox
+        console.log('   Typing "vibe" to activate omnibox...');
+        const vibeKeyword = 'vibe';
+        const keywordSuccess = await this.typeText(vibeKeyword);
+        if (!keywordSuccess) {
+          throw new Error('Failed to type vibe keyword');
+        }
+        await this.wait(500);
+        this.takeScreenshotSystem('3a_vibe_keyword_typed');
+        
+        // Press Tab to activate the omnibox
+        console.log('   Pressing Tab to activate Vibe omnibox...');
+        const tabSuccess = await this.sendKeyboardShortcut('Tab');
+        if (!tabSuccess) {
+          throw new Error('Failed to press Tab to activate omnibox');
+        }
+        
+        // Wait for omnibox activation and take screenshot
+        await this.wait(1000);
+        this.takeScreenshotSystem('3b_omnibox_activated');
+        
+        // Now type the actual command
+        const flightCommand = 'book flight for me SFO JFK Aug 1 one way';
+        console.log(`   Typing flight command: "${flightCommand}"`);
         
-        // Type the command using CDP
-        const typingSuccess = await this.typeText(flightCommand);
-        if (!typingSuccess) {
+        const commandSuccess = await this.typeText(flightCommand);
+        if (!commandSuccess) {
           throw new Error('Failed to type flight command');
         }
         
         await this.wait(1500); // Wait for any autocomplete or Vibe recognition
         checkTimeout();
-        this.takeScreenshotSystem('3_flight_command_entered');
+        this.takeScreenshotSystem('3c_full_command_entered');
         
         // 4. Submit the command to trigger Vibe processing
         console.log('4/7 Submitting flight booking command to Vibe...');
@@ -804,10 +838,85 @@ class ComprehensiveVibeTest {
         if (!submitSuccess) {
           throw new Error('Failed to submit flight command');
         }
-        await this.wait(5000); // Wait longer for Vibe to start processing
+        
+        // Wait and monitor for Vibe extension activity
+        console.log('   Monitoring for Vibe extension activity...');
+        await this.wait(3000); // Wait for initial processing
         checkTimeout();
         this.takeScreenshotSystem('4_vibe_command_submitted');
         
+        // Check if browser navigated away from about:blank (indicating Vibe activity)
+        if (this.cdpClient) {
+          try {
+            const { Runtime, Target } = this.cdpClient;
+            
+            // First check the current URL
+            const currentUrl = await Runtime.evaluate({
+              expression: 'window.location.href'
+            });
+            const url = currentUrl.result.value;
+            console.log(`   Current URL after omnibox: ${url}`);
+            
+            // Also check what extensions are loaded
+            console.log('   Checking loaded extensions...');
+            const { targetInfos } = await Target.getTargets();
+            const extensionTargets = targetInfos.filter(t => t.type === 'background_page' || t.type === 'service_worker');
+            console.log(`   Found ${extensionTargets.length} extension targets:`);
+            extensionTargets.forEach(target => {
+              console.log(`     - ${target.type}: ${target.title} (${target.url})`);
+            });
+            
+            // Check if chrome.omnibox is available in main page (expected: false)
+            const omniboxCheck = await Runtime.evaluate({
+              expression: 'typeof chrome !== "undefined" && typeof chrome.omnibox !== "undefined"'
+            });
+            console.log(`   Chrome omnibox API available in main page: ${omniboxCheck.result.value}`);
+            
+            // Try to connect to extension background script to test omnibox
+            if (extensionTargets.length > 0) {
+              const vibeExtension = extensionTargets[0]; // Assume first one is Vibe
+              console.log(`   Attempting to test extension background script...`);
+              
+              try {
+                // Create a new CDP client for the extension
+                const extensionClient = await CDP({ 
+                  port: this.debuggingPort,
+                  target: vibeExtension.id 
+                });
+                
+                const { Runtime: ExtRuntime } = extensionClient;
+                await ExtRuntime.enable();
+                
+                // Check if omnibox API is available in extension context
+                const extensionOmniboxCheck = await ExtRuntime.evaluate({
+                  expression: 'typeof chrome !== "undefined" && typeof chrome.omnibox !== "undefined"'
+                });
+                console.log(`   Chrome omnibox API available in extension: ${extensionOmniboxCheck.result.value}`);
+                
+                // Check if the omnibox listener is set up
+                const listenerCheck = await ExtRuntime.evaluate({
+                  expression: 'chrome.omnibox && chrome.omnibox.onInputEntered && chrome.omnibox.onInputEntered.hasListeners && chrome.omnibox.onInputEntered.hasListeners()'
+                });
+                console.log(`   Omnibox onInputEntered listener active: ${listenerCheck.result.value}`);
+                
+                await extensionClient.close();
+              } catch (extensionError) {
+                console.log(`   Extension background script test failed: ${extensionError.message}`);
+              }
+            }
+            
+            if (url === 'about:blank') {
+              console.log('⚠️ Browser still on about:blank - Vibe may not have processed the command');
+            } else {
+              console.log('✅ Browser navigated - Vibe extension is working!');
+            }
+            
+            // Continue with test to gather more information
+          } catch (error) {
+            console.log('⚠️ Could not check URL:', error.message);
+          }
+        }
+        
         // 5. Monitor AI agent progress through multiple phases
         console.log('5/7 Monitoring AI agent flight booking progress...');
         
@@ -996,7 +1105,8 @@ class ComprehensiveVibeTest {
         'L': 76,
         'A': 65,
         'Return': 13,
-        'Enter': 13
+        'Enter': 13,
+        'Tab': 9
       };
       
       const keyCode = keyMap[key] || key.charCodeAt(0);
diff --git a/test_vibe_pyautogui.py b/test_vibe_pyautogui.py
new file mode 100755
index 0000000000..fa5e246181
--- /dev/null
+++ b/test_vibe_pyautogui.py
@@ -0,0 +1,591 @@
+#!/usr/bin/env python3
+"""
+Vibe Browser Extension Test using PyAutoGUI and Chrome DevTools Protocol
+Supports two modes:
+1. UI Mode: Tests omnibox, user interface, and visual interactions
+2. Agent Mode: Tests AI agent intelligence directly via code injection and logs
+"""
+
+import pyautogui
+import subprocess
+import time
+import os
+import sys
+import json
+import asyncio
+import websockets
+import urllib.request
+from datetime import datetime
+
+class VibeExtensionTest:
+    def __init__(self, mode="ui"):
+        self.mode = mode  # "ui" or "agent"
+        self.chromium_path = "out/Debug/Chromium.app/Contents/MacOS/Chromium"
+        self.screenshot_dir = f".test/screenshots_{mode}_mode"
+        self.user_data_dir = f".test/vibe_test_{mode}_{int(time.time())}"
+        self.chrome_process = None
+        self.cdp_ws_url = None
+        self.app_name = os.path.basename(self.chromium_path)
+
+        os.makedirs(self.screenshot_dir, exist_ok=True)
+        if mode == "ui":
+            pyautogui.FAILSAFE = True
+            pyautogui.PAUSE = 0.5
+        
+        print(f"🎯 Test mode: {'UI/UX Testing' if mode == 'ui' else 'Agent Intelligence Testing'}")
+
+    def run_applescript(self, script):
+        """Runs an AppleScript command and returns the output."""
+        try:
+            return subprocess.check_output(['osascript', '-e', script]).decode('utf-8').strip()
+        except subprocess.CalledProcessError as e:
+            print(f"❌ AppleScript failed: {e}")
+            return None
+
+    def update_window_bounds(self):
+        """Update Chromium window bounds using AppleScript."""
+        # Try multiple approaches to find the window
+        app_name = "Chromium"
+        
+        # Method 1: Try to get window bounds from System Events
+        bounds_script = f'''
+        try
+            tell application "System Events" to tell process "{app_name}"
+                if (count of windows) > 0 then
+                    return get {{position, size}} of front window
+                end if
+            end tell
+        end try
+        return ""
+        '''
+        
+        bounds_str = self.run_applescript(bounds_script)
+        
+        if bounds_str and bounds_str != "":
+            try:
+                parts = bounds_str.replace("{", "").replace("}", "").split(", ")
+                x, y, w, h = [int(v) for v in parts]
+                self.chromium_window_bounds = (x, y, w, h)
+                print(f"✅ Updated window bounds: x={x}, y={y}, w={w}, h={h}")
+                return True
+            except (ValueError, IndexError) as e:
+                print(f"❌ Failed to parse window bounds: {bounds_str}, error: {e}")
+        
+        # Method 2: Try to activate the app first, then get bounds
+        activate_script = f'''
+        try
+            tell application "{app_name}" to activate
+            delay 0.5
+            tell application "System Events" to tell process "{app_name}"
+                if (count of windows) > 0 then
+                    return get {{position, size}} of front window
+                end if
+            end tell
+        end try
+        return ""
+        '''
+        
+        bounds_str = self.run_applescript(activate_script)
+        
+        if bounds_str and bounds_str != "":
+            try:
+                parts = bounds_str.replace("{", "").replace("}", "").split(", ")
+                x, y, w, h = [int(v) for v in parts]
+                self.chromium_window_bounds = (x, y, w, h)
+                print(f"✅ Updated window bounds after activation: x={x}, y={y}, w={w}, h={h}")
+                return True
+            except (ValueError, IndexError) as e:
+                print(f"❌ Failed to parse window bounds after activation: {bounds_str}, error: {e}")
+        
+        print("❌ Could not get Chromium window bounds")
+        self.chromium_window_bounds = None
+        return False
+
+    def activate_chromium_window(self):
+        """Activate and bring Chromium window to front."""
+        app_name = "Chromium"
+        
+        # First try to activate the application
+        activate_script = f'''
+        try
+            tell application "{app_name}" to activate
+            delay 1
+            tell application "System Events" to tell process "{app_name}"
+                if (count of windows) > 0 then
+                    set frontmost to true
+                    click (first window)
+                    return "activated"
+                end if
+            end tell
+        end try
+        return "failed"
+        '''
+        
+        result = self.run_applescript(activate_script)
+        success = result == "activated"
+        print(f"{'✅' if success else '❌'} Window activation: {result}")
+        
+        # Update window bounds after activation
+        if success:
+            self.update_window_bounds()
+        
+        return success
+
+    def take_screenshot(self, name):
+        """Take a screenshot of the Chromium window with a timestamp."""
+        timestamp = int(time.time() * 1000)
+        filename = f"{name}_{timestamp}.png"
+        filepath = os.path.join(self.screenshot_dir, filename)
+        
+        # Try to get current window bounds in case they changed
+        if not hasattr(self, 'chromium_window_bounds') or not self.chromium_window_bounds:
+            self.update_window_bounds()
+        
+        if not self.chromium_window_bounds:
+            print("⚠️ Cannot take screenshot, Chromium window bounds not found.")
+            # As a fallback, take a full screenshot
+            try:
+                pyautogui.screenshot(os.path.join(self.screenshot_dir, f"{name}_fullscreen_fallback.png"))
+                print(f"📸 Full screen fallback screenshot saved: {name}_fullscreen_fallback.png")
+            except Exception as e:
+                print(f"❌ Full screen screenshot failed: {e}")
+            return None
+        
+        try:
+            x, y, width, height = self.chromium_window_bounds
+            print(f"📸 Taking screenshot with bounds: x={x}, y={y}, w={width}, h={height}")
+            screenshot = pyautogui.screenshot(region=(x, y, width, height))
+            screenshot.save(filepath)
+            print(f"📸 Screenshot saved: {filename}")
+            return filepath
+        except Exception as e:
+            print(f"❌ Screenshot failed: {e}")
+            # Fallback to full screenshot
+            try:
+                pyautogui.screenshot(os.path.join(self.screenshot_dir, f"{name}_fullscreen_fallback.png"))
+                print(f"📸 Full screen fallback screenshot saved after error: {name}_fullscreen_fallback.png")
+            except Exception as fe:
+                print(f"❌ Full screen fallback screenshot also failed: {fe}")
+            return None
+
+    def launch_chrome(self):
+        """Launch Chrome with Vibe extension."""
+        print("\n🔧 Launching Chrome with Vibe extension...")
+        try:
+            cmd = [
+                self.chromium_path,
+                f"--user-data-dir={self.user_data_dir}",
+                "--no-first-run",
+                "--no-default-browser-check",
+                "--disable-features=RendererCodeIntegrity",
+                "--remote-debugging-port=9222",
+                "--disable-web-security",
+                "--window-size=1280,800",
+                "about:blank"
+            ]
+            
+            self.chrome_process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
+            print("   Waiting for Chrome to start...")
+            time.sleep(5) # Initial wait for process to start
+
+            # Use improved window detection method
+            max_attempts = 20
+            for attempt in range(max_attempts):
+                print(f"   Attempt {attempt + 1}/{max_attempts} to detect window...")
+                if self.update_window_bounds():
+                    break
+                time.sleep(1)
+            else:
+                raise Exception(f"Could not get Chromium window bounds within {max_attempts} seconds.")
+
+            self.take_screenshot("1_chrome_launched")
+            print("✅ Chrome launched successfully")
+            return True
+        except Exception as e:
+            print(f"❌ Failed to launch Chrome: {e}")
+            return False
+
+    def connect_to_cdp(self):
+        """Connect to Chrome DevTools Protocol using HTTP endpoint."""
+        print("\n📡 Connecting to Chrome DevTools Protocol...")
+        retries = 10
+        for i in range(retries):
+            try:
+                print(f"   Attempt {i+1}/{retries}: Checking for CDP endpoint...")
+                with urllib.request.urlopen("http://127.0.0.1:9222/json/list", timeout=5) as response:
+                    targets = json.loads(response.read().decode())
+                
+                print(f"   Found {len(targets)} targets")
+                page_target = next((t for t in targets if t['type'] == 'page' and 'webSocketDebuggerUrl' in t), None)
+                
+                if page_target and page_target.get('webSocketDebuggerUrl'):
+                    self.cdp_ws_url = page_target['webSocketDebuggerUrl']
+                    print(f"✅ Found CDP WebSocket URL: {self.cdp_ws_url}")
+                    return True
+                else:
+                    print(f"   No debuggable page target found in {len(targets)} targets")
+                    if targets:
+                        print(f"   Available targets: {[t.get('type', 'unknown') for t in targets]}")
+                    
+            except Exception as e:
+                print(f"   ... attempt {i+1}/{retries} failed: {e}")
+                if i < retries - 1:  # Don't sleep on last attempt
+                    time.sleep(3)
+        
+        print(f"❌ CDP connection failed after {retries} attempts.")
+        return False
+
+    async def wait_for_log_message(self, websocket, message_substring, timeout=180):
+        """Wait for a specific message in the browser console logs."""
+        start_time = time.time()
+        print(f"🔍 Waiting for log message containing: '{message_substring}'")
+        
+        while time.time() - start_time < timeout:
+            try:
+                message = await asyncio.wait_for(websocket.recv(), timeout=1.0)
+                log_entry = json.loads(message)
+                
+                # Handle different types of log messages
+                if "method" in log_entry:
+                    if log_entry["method"] == "Runtime.consoleAPICalled":
+                        # Handle console.log messages
+                        if "params" in log_entry and "args" in log_entry["params"]:
+                            args = log_entry["params"]["args"]
+                            if args and len(args) > 0:
+                                # Extract log message from various formats
+                                log_message = ""
+                                if "value" in args[0]:
+                                    log_message = str(args[0]["value"])
+                                elif "description" in args[0]:
+                                    log_message = str(args[0]["description"])
+                                else:
+                                    log_message = str(args[0])
+                                
+                                print(f"   📄 CONSOLE: {log_message}")
+                                if message_substring in log_message:
+                                    print(f"✅ Found target log message: '{message_substring}'")
+                                    return True
+                    
+                    elif log_entry["method"] == "Log.entryAdded":
+                        # Handle browser log entries
+                        if "params" in log_entry and "entry" in log_entry["params"]:
+                            entry = log_entry["params"]["entry"]
+                            if "text" in entry:
+                                log_message = entry["text"]
+                                print(f"   📄 BROWSER LOG: {log_message}")
+                                if message_substring in log_message:
+                                    print(f"✅ Found target log message in browser log: '{message_substring}'")
+                                    return True
+                    
+                    elif log_entry["method"] == "Runtime.bindingCalled":
+                        # Handle runtime binding calls (sometimes used for logging)
+                        if "params" in log_entry:
+                            print(f"   📄 BINDING: {log_entry['params']}")
+                    
+                    else:
+                        # Print other methods for debugging
+                        if "Console" in log_entry["method"] or "Log" in log_entry["method"]:
+                            print(f"   📄 OTHER LOG METHOD: {log_entry['method']}")
+                
+            except asyncio.TimeoutError:
+                # Check if Chrome process is still running
+                if self.chrome_process.poll() is not None:
+                    print("❌ Chromium process crashed.")
+                    return False
+                # Continue waiting
+                continue
+            except json.JSONDecodeError as e:
+                print(f"   ⚠️  Failed to parse JSON message: {e}")
+                continue
+            except websockets.exceptions.ConnectionClosed as e:
+                print(f"   ⚠️  WebSocket connection closed: {e}")
+                return False
+            except websockets.exceptions.WebSocketException as e:
+                # Ignore common WebSocket noise but log serious issues
+                if "close frame" not in str(e).lower():
+                    print(f"   ⚠️  WebSocket error: {e}")
+                continue
+            except Exception as e:
+                # Only log non-WebSocket errors to reduce noise
+                error_str = str(e).lower()
+                if "close frame" not in error_str and "websocket" not in error_str:
+                    print(f"   ⚠️  Error while parsing log message: {e}")
+                continue
+        
+        print(f"❌ Timed out waiting for log message: '{message_substring}' after {timeout} seconds")
+        return False
+
+    async def inject_agent_trigger(self, ws, query):
+        """Inject code to trigger the AI agent directly"""
+        print(f"🔧 Injecting agent trigger for query: {query}")
+        
+        # Method 1: Try to open side panel and send message
+        injection_code = f"""
+        (async function() {{
+            console.log('🧠 [TEST] Starting agent trigger injection...');
+            
+            try {{
+                // Method 1: Open side panel
+                console.log('🎯 [TEST] Opening side panel...');
+                await chrome.sidePanel.open({{}});
+                console.log('✅ [TEST] Side panel opened');
+                
+                // Wait a bit for side panel to load
+                await new Promise(resolve => setTimeout(resolve, 2000));
+                
+                // Method 2: Send query via runtime message
+                console.log('📨 [TEST] Sending query to agent...');
+                const response = await chrome.runtime.sendMessage({{
+                    type: 'USER_QUERY',
+                    message: '{query}'
+                }});
+                console.log('✅ [TEST] Query sent to agent:', response);
+                
+                return {{ success: true, response: response }};
+                
+            }} catch (error) {{
+                console.log('❌ [TEST] Agent trigger failed:', error);
+                
+                // Fallback: Direct message to background script
+                try {{
+                    console.log('🔄 [TEST] Trying direct background message...');
+                    const fallbackResponse = await chrome.runtime.sendMessage({{
+                        type: 'sidePanelCommand',
+                        command: 'processQuery',
+                        query: '{query}'
+                    }});
+                    console.log('✅ [TEST] Fallback message sent:', fallbackResponse);
+                    return {{ success: true, fallback: true, response: fallbackResponse }};
+                }} catch (fallbackError) {{
+                    console.log('❌ [TEST] All methods failed:', fallbackError);
+                    return {{ success: false, error: fallbackError.message }};
+                }}
+            }}
+        }})();
+        """
+        
+        await ws.send(json.dumps({
+            "id": 100,
+            "method": "Runtime.evaluate",
+            "params": {
+                "expression": injection_code,
+                "awaitPromise": True,
+                "returnByValue": True
+            }
+        }))
+        
+        result = await ws.recv()
+        result_data = json.loads(result)
+        
+        if "result" in result_data and "value" in result_data["result"]:
+            injection_result = result_data["result"]["value"]
+            print(f"✅ Agent injection result: {injection_result}")
+            return injection_result.get("success", False)
+        else:
+            print(f"❌ Agent injection failed: {result_data}")
+            return False
+
+    async def test_vibe_agent(self):
+        """Run the main test for the Vibe AI agent."""
+        if not self.cdp_ws_url:
+            return False
+
+        async with websockets.connect(
+            self.cdp_ws_url,
+            ping_interval=20,
+            ping_timeout=10,
+            close_timeout=5
+        ) as ws:
+            # Enable Runtime and Console domains for comprehensive logging
+            await ws.send(json.dumps({"id": 1, "method": "Runtime.enable"}))
+            await ws.recv() # Consume the result of Runtime.enable
+            
+            await ws.send(json.dumps({"id": 2, "method": "Log.enable"}))
+            await ws.recv() # Consume the result of Log.enable
+
+            query = "book flight for me SFO JFK Aug 1 one way"
+            
+            if self.mode == "ui":
+                print("\n🎯 Testing omnibox interaction (UI Mode)...")
+                
+                # Ensure Chromium window is active and focused
+                print("   Activating Chromium window...")
+                if not self.activate_chromium_window():
+                    print("⚠️ Failed to activate window, continuing anyway...")
+                
+                time.sleep(1)  # Allow window activation to complete
+
+                if hasattr(self, 'chromium_window_bounds') and self.chromium_window_bounds:
+                    x, y, w, h = self.chromium_window_bounds
+                    address_bar_x = x + w // 2
+                    address_bar_y = y + 60  # Approximate address bar position
+                    print(f"   Clicking on address bar at ({address_bar_x}, {address_bar_y})")
+                    pyautogui.click(address_bar_x, address_bar_y)
+                    time.sleep(0.5)
+
+                # Navigate to a proper URL that should trigger natural language detection
+                # Create a proper Google search URL that will trigger natural language detection
+                search_url = f"https://www.google.com/search?q={query.replace(' ', '+')}"
+                print(f"   Typing search URL: {search_url}")
+                
+                # Type the search URL with reasonable speed
+                pyautogui.typewrite(search_url, interval=0.01)
+                time.sleep(1)
+                self.take_screenshot("2_query_typed")
+                
+                # Press enter to navigate
+                print("   Pressing Enter to navigate...")
+                pyautogui.press('enter')
+                time.sleep(3)  # Allow time for navigation to complete
+                self.take_screenshot("3_after_navigation")
+                
+            else:  # agent mode
+                print("\n🧠 Testing agent intelligence (Agent Mode)...")
+                
+                # Navigate to Google Flights to set context
+                print("   Setting up context: navigating to Google Flights...")
+                await ws.send(json.dumps({
+                    "id": 50,
+                    "method": "Page.navigate", 
+                    "params": {"url": "https://flights.google.com"}
+                }))
+                await ws.recv()
+                time.sleep(2)
+                self.take_screenshot("2_context_setup")
+                
+                # Inject agent trigger
+                print("   Triggering AI agent via code injection...")
+                agent_triggered = await self.inject_agent_trigger(ws, query)
+                
+                if agent_triggered:
+                    print("✅ Agent trigger successful")
+                    self.take_screenshot("3_agent_triggered")
+                else:
+                    print("❌ Agent trigger failed")
+                    self.take_screenshot("3_agent_trigger_failed")
+
+            print("\n⏳ Waiting for side panel to initialize...")
+            # Try multiple indicators of sidepanel working
+            sidepanel_ready = False
+            
+            # Try the exact log message first (short timeout)
+            try:
+                if await self.wait_for_log_message(ws, "Vibe AI Side Panel initialized", timeout=30):
+                    sidepanel_ready = True
+            except:
+                pass
+            
+            # If not found, look for other indicators of AI activity
+            if not sidepanel_ready:
+                print("   Exact log not found, checking for AI activity indicators...")
+                indicators = [
+                    "Content Extractor loaded",
+                    "Processing:",
+                    "fillInput called", 
+                    "SelectAutocomplete called",
+                    "Filled input",
+                    "Generated.*selectors",
+                    # Intelligence-specific indicators
+                    "🧠 Performing intelligent content extraction",
+                    "CORE INTELLIGENCE PRINCIPLES",
+                    "CLICKABLE",
+                    "DROPDOWN OPTION", 
+                    "AIRPORT RELATED",
+                    "NEW - JUST APPEARED",
+                    "🎯 [TEST] Starting agent trigger injection",
+                    "✅ [TEST] Side panel opened",
+                    "📨 [TEST] Sending query to agent",
+                    "✅ [TEST] Query sent to agent"
+                ]
+                
+                for indicator in indicators:
+                    try:
+                        if await self.wait_for_log_message(ws, indicator, timeout=20):
+                            print(f"✅ Found AI activity indicator: '{indicator}'")
+                            sidepanel_ready = True
+                            break
+                    except:
+                        continue
+            
+            if not sidepanel_ready:
+                print("⚠️ No sidepanel indicators found, but continuing (sidepanel may be working silently)")
+                self.take_screenshot("warning_no_sidepanel_logs")
+            
+            self.take_screenshot("4_side_panel_state")
+
+            print("\n🤖 Monitoring AI agent progress...")
+            if not await self.wait_for_log_message(ws, "Query processing completed", timeout=180):
+                self.take_screenshot("error_agent_not_completed")
+                return False
+            
+            self.take_screenshot("5_agent_completed")
+            print("✅ AI agent completed the task.")
+            return True
+
+    def cleanup(self):
+        """Clean up Chrome process and temporary files."""
+        print("\n🧹 Cleaning up...")
+        if self.chrome_process:
+            self.chrome_process.terminate()
+            try:
+                self.chrome_process.wait(timeout=5)
+                print("✅ Chrome process terminated gracefully.")
+            except subprocess.TimeoutExpired:
+                print("⚠️ Chrome process did not terminate, killing.")
+                self.chrome_process.kill()
+        
+        if os.path.exists(self.user_data_dir):
+            subprocess.run(['rm', '-rf', self.user_data_dir], check=False)
+            print("✅ User data directory cleaned up.")
+
+    async def run_complete_test(self):
+        """Run the complete test suite."""
+        start_time = datetime.now()
+        print(f"🕐 Test started at: {start_time}")
+        
+        try:
+            if not self.launch_chrome():
+                return False
+            if not self.connect_to_cdp():
+                return False
+            if not await self.test_vibe_agent():
+                return False
+
+            end_time = datetime.now()
+            duration = end_time - start_time
+            print(f"\n🎉 Test completed successfully!")
+            print(f"⏱️ Total duration: {duration}")
+            print(f"📁 Screenshots saved in: {self.screenshot_dir}")
+            return True
+        except Exception as e:
+            print(f"\n❌ Test failed with error: {e}")
+            self.take_screenshot("error_unexpected")
+            return False
+        finally:
+            self.cleanup()
+
+async def main():
+    """Main entry point"""
+    if sys.platform != 'darwin':
+        print("⚠️ This test is designed for macOS")
+        sys.exit(1)
+    
+    # Parse command line arguments
+    mode = "ui"  # default mode
+    if len(sys.argv) > 1:
+        if sys.argv[1] == "--agent" or sys.argv[1] == "agent":
+            mode = "agent"
+        elif sys.argv[1] == "--ui" or sys.argv[1] == "ui":
+            mode = "ui"
+        else:
+            print("Usage: python3 test_vibe_pyautogui.py [ui|agent]")
+            print("  ui    - Test UI/UX elements, omnibox interaction")
+            print("  agent - Test AI agent intelligence via code injection")
+            sys.exit(1)
+    
+    test = VibeExtensionTest(mode=mode)
+    success = await test.run_complete_test()
+    sys.exit(0 if success else 1)
+
+if __name__ == "__main__":
+    asyncio.run(main())
\ No newline at end of file
-- 
2.50.0


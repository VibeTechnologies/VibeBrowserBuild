From 02da3ef93a29f8c9fcbbaefb52c8d2a10042d5d7 Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Sun, 27 Jul 2025 10:02:11 +0300
Subject: [PATCH 052/107] Simplify test_vibe_pyautogui.py to use only PyAutoGUI
 for typing and add 3-minute wait for AI agent

---
 test_vibe_pyautogui.py | 422 +++++++++++------------------------------
 1 file changed, 110 insertions(+), 312 deletions(-)

diff --git a/test_vibe_pyautogui.py b/test_vibe_pyautogui.py
index 928a97ea5b..244cf265ae 100755
--- a/test_vibe_pyautogui.py
+++ b/test_vibe_pyautogui.py
@@ -1,9 +1,6 @@
 #!/usr/bin/env python3
 """
 Vibe Browser Extension Test using PyAutoGUI and Chrome DevTools Protocol
-Supports two modes:
-1. UI Mode: Tests omnibox, user interface, and visual interactions
-2. Agent Mode: Tests AI agent intelligence directly via code injection and logs
 """
 
 import pyautogui
@@ -17,24 +14,19 @@ import glob
 import websockets
 import urllib.request
 from datetime import datetime
+import threading
 
 class VibeExtensionTest:
-    def __init__(self, mode="ui"):
-        self.mode = mode  # "ui" or "agent"
+    def __init__(self):
         self.chromium_path = "/Users/engineer/workspace/vibebrowser/src/out/Debug/Chromium.app/Contents/MacOS/Chromium"
-        self.screenshot_dir = f".test/screenshots_{mode}_mode"
-        self.user_data_dir = f".test/vibe_test_{mode}_{int(time.time())}"
+        self.screenshot_dir = ".test/screenshots"
+        self.user_data_dir = f".test/vibe_test_{int(time.time())}"
         self.chrome_process = None
         self.cdp_ws_url = None
         self.app_name = os.path.basename(self.chromium_path)
 
         os.makedirs(self.screenshot_dir, exist_ok=True)
-        # Disable pyautogui setup to avoid hanging
-        # if mode == "ui":
-        #     pyautogui.FAILSAFE = True
-        #     pyautogui.PAUSE = 0.5
-        
-        print(f"üéØ Test mode: {'UI/UX Testing' if mode == 'ui' else 'Agent Intelligence Testing'}")
+        print("üéØ Starting Vibe Browser test")
 
     def run_applescript(self, script):
         """Runs an AppleScript command and returns the output."""
@@ -170,6 +162,13 @@ class VibeExtensionTest:
                 print(f"‚ùå Full screen fallback screenshot also failed: {fe}")
             return None
 
+    def _read_stderr(self, stderr):
+        """Read and print stderr in a background thread."""
+        for line in iter(stderr.readline, ''):
+            if line.strip():
+                print(f"[CHROME] {line.strip()}")
+        stderr.close()
+
     def launch_chrome(self):
         """Launch Chrome with Vibe extension."""
         print("\nüîß Launching Chrome with Vibe extension...")
@@ -182,13 +181,30 @@ class VibeExtensionTest:
                 "--disable-features=RendererCodeIntegrity",
                 "--remote-debugging-port=9222",
                 "--disable-web-security",
-                "--window-size=1280,800"
-                # No URL specified - let the extension handle new tab
+                "--window-size=1280x800",
+                "--enable-logging=stderr",
+                "--v=1"
             ]
             
-            self.chrome_process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
+            self.chrome_process = subprocess.Popen(
+                cmd,
+                stdout=subprocess.PIPE,
+                stderr=subprocess.PIPE,
+                text=True,
+                bufsize=1,  # Line buffered
+                universal_newlines=True
+            )
+            
+            # Start stderr reader thread
+            self.stderr_thread = threading.Thread(
+                target=self._read_stderr,
+                args=(self.chrome_process.stderr,),
+                daemon=True  # Thread will be killed when main thread exits
+            )
+            self.stderr_thread.start()
+            
             print("   Waiting for Chrome to start...")
-            time.sleep(3) # Initial wait for process to start
+            time.sleep(3)  # Initial wait for process to start
 
             # Use improved window detection method
             max_attempts = 10
@@ -239,8 +255,8 @@ class VibeExtensionTest:
 
     async def wait_for_log_message(self, websocket, message_substring, timeout=180):
         """Wait for a specific message in the browser console logs."""
+        print(f"‚åõ Waiting for log message containing: '{message_substring}'...")
         start_time = time.time()
-        print(f"üîç Waiting for log message containing: '{message_substring}'")
         
         while time.time() - start_time < timeout:
             try:
@@ -292,267 +308,15 @@ class VibeExtensionTest:
                                 if message_substring in log_message:
                                     print(f"‚úÖ Found target log message in browser log: '{message_substring}'")
                                     return True
-                    
-                    elif log_entry["method"] == "Runtime.bindingCalled":
-                        # Handle runtime binding calls (sometimes used for logging)
-                        if "params" in log_entry:
-                            print(f"   üìÑ BINDING: {log_entry['params']}")
-                    
-                    else:
-                        # Print other methods for debugging
-                        if "Console" in log_entry["method"] or "Log" in log_entry["method"]:
-                            print(f"   üìÑ OTHER LOG METHOD: {log_entry['method']}")
-                
-            except asyncio.TimeoutError:
-                # Check if Chrome process is still running
-                if self.chrome_process.poll() is not None:
-                    print("‚ùå Chromium process crashed.")
-                    return False
-                # Continue waiting
-                continue
-            except json.JSONDecodeError as e:
-                print(f"   ‚ö†Ô∏è  Failed to parse JSON message: {e}")
-                continue
-            except websockets.exceptions.ConnectionClosed as e:
-                print(f"   ‚ö†Ô∏è  WebSocket connection closed: {e}")
-                return False
-            except websockets.exceptions.WebSocketException as e:
-                # Ignore common WebSocket noise but log serious issues
-                if "close frame" not in str(e).lower():
-                    print(f"   ‚ö†Ô∏è  WebSocket error: {e}")
-                continue
             except Exception as e:
                 # Only log non-WebSocket errors to reduce noise
                 error_str = str(e).lower()
                 if "close frame" not in error_str and "websocket" not in error_str:
                     print(f"   ‚ö†Ô∏è  Error while parsing log message: {e}")
-                continue
-        
+                
         print(f"‚ùå Timed out waiting for log message: '{message_substring}' after {timeout} seconds")
         return False
 
-    async def inject_agent_trigger(self, ws, query):
-        """Inject code to trigger the AI agent directly"""
-        print(f"üîß Injecting agent trigger for query: {query}")
-        
-        # Method 1: Try to open side panel and send message
-        injection_code = f"""
-        (async function() {{
-            console.log('üß† [TEST] Starting agent trigger injection...');
-            
-            try {{
-                // Method 1: Open side panel
-                console.log('üéØ [TEST] Opening side panel...');
-                await chrome.sidePanel.open({{}});
-                console.log('‚úÖ [TEST] Side panel opened');
-                
-                // Wait a bit for side panel to load
-                await new Promise(resolve => setTimeout(resolve, 2000));
-                
-                // Method 2: Send query via runtime message
-                console.log('üì® [TEST] Sending query to agent...');
-                const response = await chrome.runtime.sendMessage({{
-                    type: 'USER_QUERY',
-                    message: '{query}'
-                }});
-                console.log('‚úÖ [TEST] Query sent to agent:', response);
-                
-                return {{ success: true, response: response }};
-                
-            }} catch (error) {{
-                console.log('‚ùå [TEST] Agent trigger failed:', error);
-                
-                // Fallback: Direct message to background script
-                try {{
-                    console.log('üîÑ [TEST] Trying direct background message...');
-                    const fallbackResponse = await chrome.runtime.sendMessage({{
-                        type: 'sidePanelCommand',
-                        command: 'processQuery',
-                        query: '{query}'
-                    }});
-                    console.log('‚úÖ [TEST] Fallback message sent:', fallbackResponse);
-                    return {{ success: true, fallback: true, response: fallbackResponse }};
-                }} catch (fallbackError) {{
-                    console.log('‚ùå [TEST] All methods failed:', fallbackError);
-                    return {{ success: false, error: fallbackError.message }};
-                }}
-            }}
-        }})();
-        """
-        
-        await ws.send(json.dumps({
-            "id": 100,
-            "method": "Runtime.evaluate",
-            "params": {
-                "expression": injection_code,
-                "awaitPromise": True,
-                "returnByValue": True
-            }
-        }))
-        
-        result = await ws.recv()
-        result_data = json.loads(result)
-        
-        if "result" in result_data and "value" in result_data["result"]:
-            injection_result = result_data["result"]["value"]
-            print(f"‚úÖ Agent injection result: {injection_result}")
-            return injection_result.get("success", False)
-        else:
-            print(f"‚ùå Agent injection failed: {result_data}")
-            return False
-
-    async def test_vibe_agent(self):
-        """Run the main test for the Vibe AI agent."""
-        if not self.cdp_ws_url:
-            return False
-
-        async with websockets.connect(
-            self.cdp_ws_url,
-            ping_interval=20,
-            ping_timeout=10,
-            close_timeout=5
-        ) as ws:
-            # Enable Runtime and Console domains for comprehensive logging
-            await ws.send(json.dumps({"id": 1, "method": "Runtime.enable"}))
-            await ws.recv() # Consume the result of Runtime.enable
-            
-            await ws.send(json.dumps({"id": 2, "method": "Log.enable"}))
-            await ws.recv() # Consume the result of Log.enable
-
-            query = "book flight for me SFO JFK Aug 1 one way"
-            
-            if self.mode == "ui":
-                print("\nüéØ Testing omnibox interaction (UI Mode)...")
-                
-                # Ensure Chromium window is active and focused
-                print("   Activating Chromium window...")
-                if not self.activate_chromium_window():
-                    print("‚ö†Ô∏è Failed to activate window, continuing anyway...")
-                
-                time.sleep(1)  # Allow window activation to complete
-
-                # Click and select all text in the omnibox more reliably
-                if hasattr(self, 'chromium_window_bounds') and self.chromium_window_bounds:
-                    x, y, w, h = self.chromium_window_bounds
-                    address_bar_x = x + w // 2
-                    address_bar_y = y + 60  # Approximate address bar position
-                    
-                    print(f"   Clicking on address bar at ({address_bar_x}, {address_bar_y})")
-                    pyautogui.click(address_bar_x, address_bar_y)
-                    time.sleep(0.3)
-                    
-                    # Triple-click to select all text in the address bar
-                    print("   Triple-clicking to select all text...")
-                    pyautogui.click(address_bar_x, address_bar_y, clicks=3, interval=0.1)
-                    time.sleep(0.3)
-                    
-                    # Type just the query (not a URL) to trigger natural language detection
-                    print(f"   Typing search query: {query}")
-                    pyautogui.typewrite(query, interval=0.02)
-                    time.sleep(0.5)
-                self.take_screenshot("2_query_typed")
-                
-                # Press enter to navigate
-                print("   Pressing Enter to navigate...")
-                pyautogui.press('enter')
-                time.sleep(3)  # Allow time for navigation to complete
-                self.take_screenshot("3_after_navigation")
-                
-            else:  # agent mode
-                print("\nüß† Testing agent intelligence (Agent Mode)...")
-                
-                # Just trigger via omnibox URL simulation instead of complex injection
-                print("   Triggering AI agent via omnibox simulation...")
-                try:
-                    await ws.send(json.dumps({
-                        "id": 50,
-                        "method": "Runtime.evaluate", 
-                        "params": {
-                            "expression": f"window.location.href = 'https://www.google.com/search?q={query.replace(' ', '+')}'",
-                            "awaitPromise": True
-                        }
-                    }))
-                    result = await ws.recv()
-                    print(f"‚úÖ Navigation triggered: {result}")
-                    time.sleep(3)  # Give time for agent to process
-                    self.take_screenshot("2_navigation_triggered")
-                except Exception as e:
-                    print(f"‚ö†Ô∏è Navigation error: {e}")
-                    self.take_screenshot("2_navigation_error")
-
-            print("\n‚è≥ Waiting for side panel to initialize...")
-            # Try multiple indicators of sidepanel working with shorter timeouts
-            sidepanel_ready = False
-            
-            # Try the exact log message first (short timeout)
-            try:
-                if await self.wait_for_log_message(ws, "Vibe AI Side Panel initialized", timeout=10):
-                    sidepanel_ready = True
-            except:
-                pass
-            
-            # If not found, look for other indicators of AI activity (shorter timeouts)
-            if not sidepanel_ready:
-                print("   Exact log not found, checking for AI activity indicators...")
-                indicators = [
-                    "Content Extractor loaded",
-                    "Tool execution failed",  # Look for our error!
-                    "Cannot read properties of undefined",  # The specific error
-                    "Processing:",
-                    "fillInput called", 
-                    "‚úÖ [TEST] Starting agent trigger injection",
-                    "‚úÖ [TEST] Side panel opened"
-                ]
-                
-                for indicator in indicators:
-                    try:
-                        if await self.wait_for_log_message(ws, indicator, timeout=5):
-                            print(f"‚úÖ Found AI activity indicator: '{indicator}'")
-                            sidepanel_ready = True
-                            break
-                    except:
-                        continue
-            
-            if not sidepanel_ready:
-                print("‚ö†Ô∏è No sidepanel indicators found, but continuing (sidepanel may be working silently)")
-                self.take_screenshot("warning_no_sidepanel_logs")
-            
-            self.take_screenshot("4_side_panel_state")
-
-            print("\nü§ñ Monitoring AI agent progress...")
-            # Look for any AI agent activity or errors with shorter timeout
-            activity_found = False
-            agent_indicators = [
-                "Query processing completed",
-                "Tool execution failed",  # Our target error
-                "Cannot read properties of undefined",  # The specific error
-                "reading 'length'",  # Part of our specific error
-                "‚ùå [AI_AGENT] Tool execution failed",  # Enhanced error logging
-                "‚ùå [AI_AGENT] Error in iteration",  # Enhanced error logging
-                "Processing completed",
-                "Agent completed",
-                "TypeError",  # General errors
-                "Error:"  # General error indicator
-            ]
-            
-            for indicator in agent_indicators:
-                try:
-                    if await self.wait_for_log_message(ws, indicator, timeout=10):
-                        print(f"‚úÖ Found agent activity: '{indicator}'")
-                        activity_found = True
-                        break
-                except:
-                    continue
-            
-            if not activity_found:
-                print("‚ö†Ô∏è No agent completion found in 10 seconds, but test captured logs")
-                self.take_screenshot("error_agent_not_completed")
-            else:
-                self.take_screenshot("5_agent_completed")
-                print("‚úÖ AI agent activity detected.")
-            
-            return True  # Return True regardless to capture logs
-
     def cleanup(self):
         """Clean up Chrome process and temporary files."""
         print("\nüßπ Cleaning up...")
@@ -605,38 +369,95 @@ class VibeExtensionTest:
         except:
             pass
 
+    async def type_query(self, query="book a flight from SFO to JFK"):
+        """Type a query in the omnibox using PyAutoGUI."""
+        print(f"\nüìã Step 3: Typing query: '{query}'...")
+        
+        # First make sure Chrome has fully loaded
+        print("   Waiting for Chrome to stabilize (3 seconds)...")
+        time.sleep(3)
+        
+        # First activate the window to ensure it's in focus
+        if not self.activate_chromium_window():
+            print("‚ö†Ô∏è Failed to activate Chromium window, but continuing...")
+        
+        # Take a screenshot before typing
+        self.take_screenshot("3_before_typing_query")
+        
+        try:
+            # Make sure window is active
+            self.activate_chromium_window()
+            time.sleep(1)
+            
+            # Focus on address bar
+            print("   Focusing on address bar with Cmd+L...")
+            pyautogui.hotkey('command', 'l')
+            time.sleep(1)
+            
+            # Clear any existing text
+            print("   Clearing any existing text...")
+            pyautogui.hotkey('command', 'a')
+            time.sleep(0.5)
+            
+            # Type the query
+            print(f"   Typing query: '{query}'...")
+            pyautogui.write(query)
+            time.sleep(1)
+            
+            # Press Enter
+            print("   Pressing Enter...")
+            pyautogui.press('enter')
+            time.sleep(1)
+            
+            print("‚úÖ Query typing completed successfully")
+            self.take_screenshot("3_after_typing_query")
+            
+            # Wait for 3 minutes to let the AI agent work
+            print("\n‚è≥ Waiting for 3 minutes to let the AI agent work...")
+            wait_time = 180  # 3 minutes in seconds
+            for i in range(wait_time):
+                if i % 30 == 0:  # Print status every 30 seconds
+                    print(f"   Still waiting... {wait_time - i} seconds remaining")
+                time.sleep(1)
+                
+            print("‚úÖ Wait completed, taking final screenshot")
+            self.take_screenshot("4_after_waiting")
+            return True
+        except Exception as e:
+            print(f"‚ùå Typing failed: {e}")
+            return False
+
     async def run_complete_test(self):
         """Run the complete test suite."""
-        start_time = datetime.now()
-        print(f"üïê Test started at: {start_time}")
+        start_time = time.time()
+        print(f"üïê Test started at: {datetime.now()}")
         
         try:
             print("üìã Step 1: Launching Chrome...")
             if not self.launch_chrome():
                 print("‚ùå Chrome launch failed")
                 return False
-            print("‚úÖ Chrome launched successfully")
-            
+                
             print("üìã Step 2: Connecting to CDP...")
             if not self.connect_to_cdp():
                 print("‚ùå CDP connection failed")
                 return False
-            print("‚úÖ CDP connected successfully")
             
-            print("üìã Step 3: Running Vibe agent test...")
-            if not await self.test_vibe_agent():
-                print("‚ùå Vibe agent test failed")
-                return False
-            print("‚úÖ Vibe agent test completed")
-
-            end_time = datetime.now()
-            duration = end_time - start_time
-            print(f"\nüéâ Test completed successfully!")
-            print(f"‚è±Ô∏è Total duration: {duration}")
-            print(f"üìÅ Screenshots saved in: {self.screenshot_dir}")
+            print("üìã Step 3: Typing query...")
+            query_result = await self.type_query("book flight SFO NYC Dec 1 one way")
+            time.sleep(10)
+            self.take_screenshot("4_after_query_processing")
+            
+            # Take another screenshot after a bit more time
+            print("   Taking final screenshot after 5 more seconds...")
+            time.sleep(5)
+            self.take_screenshot("5_final_state")
+                
+            print("\nüéâ All tests completed successfully!")
             return True
+            
         except Exception as e:
-            print(f"\n‚ùå Test failed with error: {e}")
+            print(f"‚ùå Test failed with error: {str(e)}")
             import traceback
             traceback.print_exc()
             self.take_screenshot("error_unexpected")
@@ -644,34 +465,11 @@ class VibeExtensionTest:
         finally:
             print("üìã Step 4: Cleanup...")
             self.cleanup()
-            print("‚úÖ Cleanup completed")
 
 async def main():
     """Main entry point"""
-    print("üöÄ Starting main function...")
-    if sys.platform != 'darwin':
-        print("‚ö†Ô∏è This test is designed for macOS")
-        sys.exit(1)
-    print("‚úÖ Platform check passed")
-    
-    # Parse command line arguments
-    mode = "ui"  # default mode
-    if len(sys.argv) > 1:
-        if sys.argv[1] == "--agent" or sys.argv[1] == "agent":
-            mode = "agent"
-        elif sys.argv[1] == "--ui" or sys.argv[1] == "ui":
-            mode = "ui"
-        else:
-            print("Usage: python3 test_vibe_pyautogui.py [ui|agent]")
-            print("  ui    - Test UI/UX elements, omnibox interaction")
-            print("  agent - Test AI agent intelligence via code injection")
-            sys.exit(1)
-    
-    print(f"üéØ Creating test instance in {mode} mode...")
-    test = VibeExtensionTest(mode=mode)
-    print("üéØ Running complete test...")
+    test = VibeExtensionTest()
     success = await test.run_complete_test()
-    print(f"üéØ Test finished with success={success}")
     sys.exit(0 if success else 1)
 
 if __name__ == "__main__":
-- 
2.50.0


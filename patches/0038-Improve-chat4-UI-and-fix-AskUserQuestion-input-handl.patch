From dfd216ca5949301674c38be48e0277d594f7101f Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Sat, 26 Jul 2025 13:45:36 +0300
Subject: [PATCH 038/107] Improve chat4 UI and fix AskUserQuestion input
 handling
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

- Update Message component with ChatGPT-like styling:
  * Remove black borders and Card components
  * Add gray hover effects and S√∂hne font family
  * Add copy button for assistant messages (appears on hover)
  * Full-width layout without max-width constraints

- Fix AskUserQuestion input behavior:
  * Add isWaitingForUserInput state management
  * Enable input field when AI asks questions
  * Show send button and hide stop button during waiting
  * Update status to 'Waiting for user input' with blue indicator
  * Proper message flow and state transitions

- Update MessageList for seamless message flow
- Enhance ChatInput with conditional logic for waiting state
- Build successful and ready for testing
---
 .../chat4/src/components/chat/ChatInput.tsx   |  40 ++++--
 .../chat4/src/components/chat/ChatPage.tsx    | 114 +++++++++++++++---
 .../chat4/src/components/chat/Message.tsx     |  53 ++++++--
 .../chat4/src/components/chat/MessageList.tsx |   2 +-
 4 files changed, 165 insertions(+), 44 deletions(-)

diff --git a/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatInput.tsx b/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatInput.tsx
index f49dd659f5..82ced3f0ee 100644
--- a/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatInput.tsx
+++ b/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatInput.tsx
@@ -12,6 +12,7 @@ interface ChatInputProps {
   onStopProcessing?: () => void
   disabled?: boolean
   isProcessing?: boolean
+  isWaitingForUserInput?: boolean
 }
 
 export function ChatInput({ 
@@ -20,17 +21,18 @@ export function ChatInput({
   onSendMessage,
   onStopProcessing,
   disabled = false,
-  isProcessing = false 
+  isProcessing = false,
+  isWaitingForUserInput = false
 }: ChatInputProps) {
   const handleKeyDown = (e: React.KeyboardEvent) => {
-    if (e.key === "Enter" && !e.shiftKey && !isProcessing) {
+    if (e.key === "Enter" && !e.shiftKey && (!isProcessing || isWaitingForUserInput)) {
       e.preventDefault()
       onSendMessage()
     }
   }
 
   const handleMainButtonClick = () => {
-    if (isProcessing && onStopProcessing) {
+    if (isProcessing && !isWaitingForUserInput && onStopProcessing) {
       onStopProcessing()
     } else {
       onSendMessage()
@@ -53,9 +55,15 @@ export function ChatInput({
             value={message}
             onChange={(e) => onMessageChange(e.target.value)}
             onKeyDown={handleKeyDown}
-            placeholder={isProcessing ? "AI is processing..." : "Ask Vibe AI"}
+            placeholder={
+              isWaitingForUserInput 
+                ? "Type your response..." 
+                : isProcessing 
+                  ? "AI is processing..." 
+                  : "Ask Vibe AI"
+            }
             className="min-h-[24px] max-h-32 resize-none bg-transparent px-0 py-1 text-sm placeholder:text-muted-foreground focus-visible:ring-0"
-            disabled={disabled || isProcessing}
+            disabled={disabled || (isProcessing && !isWaitingForUserInput)}
           />
           
           <div className="flex items-center gap-1">
@@ -69,16 +77,26 @@ export function ChatInput({
             
             <Button
               onClick={handleMainButtonClick}
-              disabled={disabled || (!isProcessing && !message.trim())}
+              disabled={disabled || (!isProcessing && !isWaitingForUserInput && !message.trim())}
               size="icon"
               className={`flex-shrink-0 rounded-full h-8 w-8 ${
-                isProcessing 
-                  ? "bg-red-500 text-white hover:bg-red-600" 
-                  : "bg-primary text-primary-foreground hover:bg-primary/90"
+                isWaitingForUserInput
+                  ? "bg-primary text-primary-foreground hover:bg-primary/90"
+                  : isProcessing 
+                    ? "bg-red-500 text-white hover:bg-red-600" 
+                    : "bg-primary text-primary-foreground hover:bg-primary/90"
               }`}
-              title={isProcessing ? "Stop processing" : "Send message"}
+              title={
+                isWaitingForUserInput
+                  ? "Send response"
+                  : isProcessing 
+                    ? "Stop processing" 
+                    : "Send message"
+              }
             >
-              {isProcessing ? (
+              {isWaitingForUserInput ? (
+                <Send className="h-4 w-4" />
+              ) : isProcessing ? (
                 <Square className="h-4 w-4" />
               ) : (
                 <Send className="h-4 w-4" />
diff --git a/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatPage.tsx b/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatPage.tsx
index 28ab40b623..40faf8f77c 100644
--- a/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatPage.tsx
+++ b/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatPage.tsx
@@ -25,6 +25,7 @@ export function ChatPage() {
   
   // AI agent state
   const [isProcessing, setIsProcessing] = useState(false)
+  const [isWaitingForUserInput, setIsWaitingForUserInput] = useState(false)
   const [currentTool, setCurrentTool] = useState("")
   const [thinkingStartTime, setThinkingStartTime] = useState<number | null>(null)
   const [durationInterval, setDurationInterval] = useState<NodeJS.Timeout | null>(null)
@@ -76,6 +77,19 @@ export function ChatPage() {
   }, [currentSessionId])
 
   // Helper function to get tool display names
+  const addMessageToCurrentSession = React.useCallback((message: MessageData) => {
+    setSessions(prev => prev.map(session => 
+      session.id === currentSessionId
+        ? { 
+            ...session, 
+            messages: [...session.messages, message],
+            lastMessage: message.content,
+            timestamp: new Date()
+          }
+        : session
+    ))
+  }, [currentSessionId])
+
   const getToolDisplayName = React.useCallback((toolName: string): string => {
     const toolNames: Record<string, string> = {
       'clickElement': 'Click Element',
@@ -103,8 +117,26 @@ export function ChatPage() {
     aiAgent.setToolUpdateHandler((update: AIToolUpdate) => {
       console.log('üîß [CHAT4] Tool update received:', update)
       
-      // Start thinking indicator if not already started
-      if (!isProcessing) {
+      // Check if this is AskUserQuestion tool being called
+      if (update.tool === 'ask_user_question' || update.tool === 'AskUserQuestionTool') {
+        console.log('‚ùì [CHAT4] AskUserQuestion detected, switching to waiting mode')
+        setIsProcessing(false)
+        setIsWaitingForUserInput(true)
+        setCurrentTool('Waiting for user input')
+        setThinkingStartTime(null)
+        setProcessingDuration(0)
+        
+        if (update.details && typeof update.details === 'object' && 'error' in update.details) {
+          addStatusMessage(`‚ùå ${getToolDisplayName(update.tool)}: ${update.details.error}`)
+        } else if (update.message && update.message.includes('question')) {
+          // Show when AI is asking a question
+          addStatusMessage(`‚ùì AI is asking: ${update.message}`)
+        }
+        return
+      }
+      
+      // Start thinking indicator if not already started and not waiting for user input
+      if (!isProcessing && !isWaitingForUserInput) {
         setIsProcessing(true)
         setThinkingStartTime(Date.now())
         setProcessingDuration(0)
@@ -116,16 +148,6 @@ export function ChatPage() {
       } else if (update.tool) {
         setCurrentTool(`Using ${getToolDisplayName(update.tool)}...`)
       }
-      
-      // Only show messages for AskUserQuestionTool (both success and error), suppress other tool errors
-      if (update.tool === 'ask_user_question' || update.tool === 'AskUserQuestionTool') {
-        if (update.details && typeof update.details === 'object' && 'error' in update.details) {
-          addStatusMessage(`‚ùå ${getToolDisplayName(update.tool)}: ${update.details.error}`)
-        } else if (update.message && update.message.includes('question')) {
-          // Show when AI is asking a question
-          addStatusMessage(`‚ùì AI is asking: ${update.message}`)
-        }
-      }
     })
     
     aiAgent.setReasoningUpdateHandler((update: AIReasoningUpdate) => {
@@ -236,7 +258,50 @@ export function ChatPage() {
   }
 
   const handleSendMessage = async () => {
-    if (!message.trim() || isProcessing) return
+    if (!message.trim()) return
+    
+    // If we're waiting for user input, send the response to the AI agent
+    if (isWaitingForUserInput) {
+      console.log('üì§ [CHAT4] Sending user response to AI agent:', message.trim())
+      
+      // Add user message to chat
+      const userMessage: MessageData = {
+        id: generateId(),
+        content: message.trim(),
+        role: "user",
+        timestamp: new Date()
+      }
+      
+      addMessageToCurrentSession(userMessage)
+      setMessage('')
+      
+      // Send response to AI agent via chrome.runtime.sendMessage
+      try {
+        const chromeExt = (window as any).chrome
+        if (chromeExt?.runtime) {
+          await chromeExt.runtime.sendMessage({
+            type: 'USER_QUESTION_RESPONSE',
+            response: userMessage.content,
+            timestamp: Date.now()
+          })
+          console.log('‚úÖ [CHAT4] User response sent to AI agent')
+        }
+      } catch (error) {
+        console.error('‚ùå [CHAT4] Error sending user response:', error)
+      }
+      
+      // Reset waiting state and resume processing
+      setIsWaitingForUserInput(false)
+      setIsProcessing(true)
+      setThinkingStartTime(Date.now())
+      setProcessingDuration(0)
+      setCurrentTool('Processing your response...')
+      
+      return
+    }
+    
+    // Normal message processing (when not waiting for user input)
+    if (isProcessing) return
 
     const currentSession = sessions.find(s => s.id === currentSessionId)
     const isFirstMessage = !currentSession || currentSession.messages.length === 0
@@ -474,19 +539,27 @@ export function ChatPage() {
         
         <MessageList messages={messages} />
         
-        {/* Status indicator when processing */}
-        {isProcessing && (
+        {/* Status indicator when processing or waiting for user input */}
+        {(isProcessing || isWaitingForUserInput) && (
           <div className="border-t bg-muted/30 px-4 py-3">
             <div className="flex items-start gap-3">
-              <div className="w-7 h-7 bg-green-600 rounded-full flex items-center justify-center shrink-0 mt-0.5">
+              <div className={`w-7 h-7 rounded-full flex items-center justify-center shrink-0 mt-0.5 ${
+                isWaitingForUserInput ? "bg-blue-600" : "bg-green-600"
+              }`}>
                 <span className="text-white font-bold text-xs">AI</span>
               </div>
               <div className="text-sm text-muted-foreground italic bg-muted/50 px-3 py-2 rounded-lg flex-1">
                 <div className="flex items-center gap-2 mb-1">
-                  <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-green-600"></div>
-                  <span className="font-medium">{currentTool || "Thinking..."}</span>
+                  {isWaitingForUserInput ? (
+                    <div className="w-3 h-3 bg-blue-600 rounded-full animate-pulse"></div>
+                  ) : (
+                    <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-green-600"></div>
+                  )}
+                  <span className="font-medium">
+                    {isWaitingForUserInput ? "Waiting for user input" : (currentTool || "Thinking...")}
+                  </span>
                 </div>
-                {processingDuration > 0 && (
+                {processingDuration > 0 && !isWaitingForUserInput && (
                   <div className="text-xs opacity-75">
                     for <span className="font-medium">{processingDuration}</span> seconds
                   </div>
@@ -502,7 +575,8 @@ export function ChatPage() {
           onSendMessage={handleSendMessage}
           onStopProcessing={handleStopProcessing}
           isProcessing={isProcessing}
-          disabled={isProcessing}
+          isWaitingForUserInput={isWaitingForUserInput}
+          disabled={false}
         />
       </div>
     </div>
diff --git a/chrome/browser/resources/vibe/apps/chat4/src/components/chat/Message.tsx b/chrome/browser/resources/vibe/apps/chat4/src/components/chat/Message.tsx
index d19f3fb753..72f9569d7e 100644
--- a/chrome/browser/resources/vibe/apps/chat4/src/components/chat/Message.tsx
+++ b/chrome/browser/resources/vibe/apps/chat4/src/components/chat/Message.tsx
@@ -1,8 +1,9 @@
 "use client"
 
-import React from "react"
+import React, { useState } from "react"
 import { Avatar, AvatarFallback } from "@/components/ui/avatar"
-import { Card } from "@/components/ui/card"
+import { Button } from "@/components/ui/button"
+import { Copy, Check } from "lucide-react"
 
 export interface MessageData {
   id: string
@@ -17,27 +18,55 @@ interface MessageProps {
 
 export function Message({ message }: MessageProps) {
   const isAssistant = message.role === "assistant"
+  const [copied, setCopied] = useState(false)
+  
+  const handleCopy = async () => {
+    try {
+      await navigator.clipboard.writeText(message.content)
+      setCopied(true)
+      setTimeout(() => setCopied(false), 2000)
+    } catch (err) {
+      console.error('Failed to copy text:', err)
+    }
+  }
   
   return (
-    <div className={`flex gap-3 ${isAssistant ? "" : "flex-row-reverse"}`}>
-      <Avatar className="h-8 w-8 flex-shrink-0">
-        <AvatarFallback className={isAssistant ? "bg-primary text-primary-foreground" : "bg-secondary"}>
+    <div className={`group flex gap-3 px-4 py-6 hover:bg-gray-50/50 dark:hover:bg-gray-800/30 ${isAssistant ? "" : "flex-row-reverse"}`}>
+      <Avatar className="h-8 w-8 flex-shrink-0 mt-1">
+        <AvatarFallback className={isAssistant ? "bg-green-600 text-white text-xs font-semibold" : "bg-blue-600 text-white text-xs font-semibold"}>
           {isAssistant ? "AI" : "U"}
         </AvatarFallback>
       </Avatar>
       
-      <div className={`max-w-[70%] ${isAssistant ? "" : "text-right"}`}>
-        <Card className={`p-3 ${
+      <div className={`flex-1 max-w-none ${isAssistant ? "" : "text-right"}`}>
+        <div className={`relative ${
           isAssistant 
-            ? "bg-card" 
-            : "bg-primary text-primary-foreground"
+            ? "bg-transparent" 
+            : "bg-transparent"
         }`}>
-          <div className="text-sm leading-relaxed whitespace-pre-wrap">
+          <div className="text-[15px] leading-7 text-gray-800 dark:text-gray-100 font-normal whitespace-pre-wrap font-['S√∂hne','-apple-system','BlinkMacSystemFont','Segoe_UI','Roboto','Oxygen','Ubuntu','Cantarell','Fira_Sans','Droid_Sans','Helvetica_Neue','sans-serif']">
             {message.content}
           </div>
-        </Card>
+          
+          {/* Copy button - only show for assistant messages and on hover */}
+          {isAssistant && (
+            <Button
+              onClick={handleCopy}
+              variant="ghost"
+              size="sm"
+              className="absolute -right-2 top-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 h-8 w-8 p-0 hover:bg-gray-200 dark:hover:bg-gray-700"
+              title="Copy message"
+            >
+              {copied ? (
+                <Check className="h-4 w-4 text-green-600" />
+              ) : (
+                <Copy className="h-4 w-4 text-gray-500" />
+              )}
+            </Button>
+          )}
+        </div>
         
-        <div className="mt-1 px-1 text-xs text-muted-foreground">
+        <div className={`mt-2 text-xs text-gray-500 dark:text-gray-400 ${isAssistant ? "" : "text-right"}`}>
           {message.timestamp.toLocaleTimeString([], { 
             hour: '2-digit', 
             minute: '2-digit' 
diff --git a/chrome/browser/resources/vibe/apps/chat4/src/components/chat/MessageList.tsx b/chrome/browser/resources/vibe/apps/chat4/src/components/chat/MessageList.tsx
index 6d875ea9dc..99bfa6b674 100644
--- a/chrome/browser/resources/vibe/apps/chat4/src/components/chat/MessageList.tsx
+++ b/chrome/browser/resources/vibe/apps/chat4/src/components/chat/MessageList.tsx
@@ -33,7 +33,7 @@ export function MessageList({ messages, isProcessing }: MessageListProps) {
 
   return (
     <ScrollArea ref={scrollAreaRef} className="flex-1">
-      <div className="mx-auto max-w-3xl space-y-6 p-4">
+      <div className="w-full">
         {messages.map((message) => (
           <Message key={message.id} message={message} />
         ))}
-- 
2.50.0


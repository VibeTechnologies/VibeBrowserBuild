From 426eff18af90f51b72816b4c69a384ced0fbe9a0 Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Sun, 27 Jul 2025 16:06:08 +0300
Subject: [PATCH 58/91] Fix missing thinking/observations in Chat4 UI
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

- Add back missing UI update methods: #sendToolUpdate, #sendReasoningUpdate, #getToolDisplayName
- Add TOOL_UPDATE and REASONING_UPDATE message forwarding in background.js
- Include 'thought' and 'observation' tools in display name mapping
- Messages now properly flow: AI Agent → Background → Chat4 UI

This fixes the issue where thinking steps and tool observations
weren't showing up in the Chat4 interface during ReAct execution.
---
 chrome/browser/resources/vibe/ai_agent.js     | 238 +++---------------
 .../resources/vibe/ai_tools.extension.js      |   6 +-
 chrome/browser/resources/vibe/background.js   | 185 +++-----------
 test_vibe.sh                                  |   0
 test_vibe_pyautogui.py                        |  55 +---
 5 files changed, 80 insertions(+), 404 deletions(-)
 mode change 100644 => 100755 test_vibe.sh

diff --git a/chrome/browser/resources/vibe/ai_agent.js b/chrome/browser/resources/vibe/ai_agent.js
index 286691c593..0391adafdb 100644
--- a/chrome/browser/resources/vibe/ai_agent.js
+++ b/chrome/browser/resources/vibe/ai_agent.js
@@ -27,38 +27,28 @@ import { LLMProviderManager } from "./tools/LLMProviderManager.js";
 export class VibeLangchainAgent {
   constructor() {
     this.tools = extensionBrowserTools;
-    this.memory = null; // Will be initialized when model is available
-    this.conversationHistory = []; // Persistent conversation history
-    this.memoryInitialized = false; // Track if memory has been set up
     
+    this.memory = new ConversationSummaryBufferMemory({
+        llm: llm, // Use same model for intelligent summarization
+        maxTokenLimit: 4000, // Token threshold for summarization
+        returnMessages: true,
+        memoryKey: "chat_history"
+    });
     // Provider management for world-class tool call handling
     this.provider = null;
     this.providerConfig = null;
+    this.messages = [];
   }
 
-  /**
-   * Process a user request with the AI agent
-   * @param {Object} params
-   * @param {string} params.user_request
-   * @param {string} params.tabId
-   * @param {AgentConfig} [params.config]
-   * @param {Array<any>} [params.agent_scratchpad]
-   * @returns {Promise<any>}
-   */
-  // Track content extraction failures to trigger screenshot fallback
-  #contentExtractionFailures = 0;
-  #lastScreenshotTime = 0;
-  #MAX_CONTENT_FAILURES_BEFORE_SCREENSHOT = 2;
-  #MIN_SCREENSHOT_INTERVAL_MS = 5000; // 5 seconds between screenshots
 
-  /**
-   * Try to get page content with automatic fallback to screenshot if needed
-   * @private
-   */
-  /**
-   * Validates that a string is a safe data URL for screenshots
-   * @private
-   */
+  getHistory() {
+    return this.messages;
+  }
+
+  clearHistory() {
+    return this.messages;
+  }
+
   #isValidScreenshotDataUrl(url) {
     return typeof url === 'string' && 
            url.startsWith('data:image/jpeg;base64,') && 
@@ -84,16 +74,6 @@ export class VibeLangchainAgent {
     };
   }
 
-
-  /**
-   * Process a user request with the AI agent
-   * @param {Object} params
-   * @param {string} params.user_request
-   * @param {string} params.tabId
-   * @param {AgentConfig} [params.config]
-   * @param {Array<any>} [params.agent_scratchpad]
-   * @returns {Promise<any>}
-   */
   /**
    * Create and initialize a LLM model based on configuration
    * @param {Object} config - Configuration object with provider, model, and API keys
@@ -126,7 +106,7 @@ export class VibeLangchainAgent {
         modelName = `google-genai:${geminiModel}`;
       } else if (provider === 'anthropic') {
         // Resolve Anthropic model name
-        const anthropicModel = config.model === 'auto' ? 'claude-3-sonnet-20240229' : config.model;
+        const anthropicModel = config.model === 'auto' ? 'claude-3.7-sonnet' : config.model;
         modelName = `anthropic:${anthropicModel}`;
       }
     }
@@ -194,7 +174,7 @@ export class VibeLangchainAgent {
     this.provider = LLMProviderManager.detectProvider(llm);
     this.providerConfig = LLMProviderManager.getProviderConfig(this.provider);
     
-    console.log(`🔧 [AI_AGENT] Hybrid ReAct pattern configured:`, JSON.stringify({
+    console.log(`🔧 [AI_AGENT] Config:`, JSON.stringify({
       provider: this.provider,
       toolCallType: this.providerConfig.toolCallType,
       supportsParallel: this.providerConfig.supportsParallel,
@@ -204,29 +184,7 @@ export class VibeLangchainAgent {
       pattern: "Thought (text) → Action (function call) → Observation (result)"
     }, null, 2));
 
-    // Initialize or update LangChain memory with intelligent summarization
-    if (!this.memory || !this.memoryInitialized) {
-      this.memory = new ConversationSummaryBufferMemory({
-        llm: llm, // Use same model for intelligent summarization
-        maxTokenLimit: 4000, // Token threshold for summarization
-        returnMessages: true,
-        memoryKey: "chat_history"
-      });
-      
-      // Restore conversation history if we have any
-      if (this.conversationHistory.length > 0) {
-        console.log(`🧠 [AI_AGENT] Restoring ${this.conversationHistory.length} messages from persistent history`);
-        await this.#restoreConversationHistory();
-      }
-      
-      this.memoryInitialized = true;
-      console.log(`🧠 [AI_AGENT] Initialized LangChain memory with ${this.memory.maxTokenLimit} token limit`);
-    } else {
-      // Update the LLM reference in existing memory for summarization
-      this.memory.llm = llm;
-      console.log(`🧠 [AI_AGENT] Updated LLM reference in existing memory`);
-    }
-    
+    this.memory.llm = llm;
     return { llm, llmWithTools };
   }
 
@@ -309,44 +267,21 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
 **Available Tools:** ${langchainTools.map(t => t.name).join(', ')}
 
 `;
-
-  // Initialize messages: [System prompt, User query]
-  const messages = [
-    new SystemMessage(systemPrompt),
-    new HumanMessage(user_request)
-  ];
+  this.messages.push(new SystemMessage(systemPrompt));
+  this.messages.push(new HumanMessage(user_request));
   
   const maxIterations = config.maxIterations || 32;
   const toolResults = [];
   let consecutiveFailures = 0;
   
-  // Add initial user message to persistent history
-  this.#addToPersistentHistory('human', user_request);
-  
   // Main ReAct loop
   for (let iteration = 1; iteration <= maxIterations; iteration++) {
     try {
       // Send thinking update to UI
-      this.#sendToolUpdate(tabId, 'thinking', `Processing (iteration ${iteration}/${maxIterations})...`);
-      
-      // Debug: Log message structure for debugging
-      console.log(`🔍 [AI_AGENT] Iteration ${iteration} - Message structure:`, 
-        messages.map(m => ({ 
-          type: m.constructor.name, 
-          hasToolCalls: !!m.tool_calls?.length,
-          role: m._getType?.() || 'unknown',
-          toolCallTypes: m.tool_calls?.map(tc => tc.type) || []
-        }))
-      );
-      
+      this.#sendToolUpdate(tabId, 'thinking', `Processing (iteration ${iteration}/${maxIterations})...`);      
       // Query LLM
       const result = await llmWithTools.invoke(messages);
       
-      // Debug: Log tool_calls structure
-      if (result.tool_calls && result.tool_calls.length > 0) {
-        console.log(`🔧 [AI_AGENT] LLM returned tool_calls:`, JSON.stringify(result.tool_calls, null, 2));
-      }
-      
       // Send reasoning update if AI provided text response
       if (result.content && result.content.trim()) {
         this.#sendReasoningUpdate(tabId, result.content, iteration);
@@ -358,8 +293,7 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
         const finishCall = result.tool_calls.find(t => t.name === 'finish_task');
         if (finishCall) {
           console.log(`🏁 [AI_AGENT] Task finished after ${iteration} iterations.`);
-          this.#addToPersistentHistory('ai', finishCall.args.final_answer);
-          
+
           return {
             output: finishCall.args.final_answer,
             reasoning: finishCall.args.final_answer,
@@ -369,7 +303,6 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
           };
         }
         
-        // World-class tool call normalization for provider compatibility
         const normalizedToolCalls = ToolCallNormalizer.normalizeToolCalls(
           result.tool_calls, 
           this.provider
@@ -386,24 +319,17 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
             normalized: normalizedToolCalls[0]?.type
           } : null
         }, null, 2));
-        messages.push(new AIMessage(result.content, { tool_calls: normalizedToolCalls }));
-        
-        // Save AI response to memory and persistent history
-        await this.memory.saveContext(
-          { input: user_request },
-          { output: result.content }
-        );
-        this.#addToPersistentHistory('ai', result.content);
         
+        this.messages.push(new AIMessage(result.content, { tool_calls: normalizedToolCalls }));
         // Call required tools in the response
         for (const toolCall of result.tool_calls) {
-          this.#sendToolUpdate(tabId, toolCall.name, `Using ${this.#getToolDisplayName(toolCall.name)}...`, toolCall.args);
+          this.#sendToolUpdate(tabId, toolCall.name, `Using ${toolCall.name}...`, toolCall.args);
           
           // Find and execute the tool
           const tool = tools.find(t => t.name === toolCall.name);
           if (!tool) {
             const errorMsg = `Tool not found: ${toolCall.name}`;
-            messages.push(new ToolMessage(errorMsg, toolCall.id, toolCall.name));
+            this.messages.push(new ToolMessage(errorMsg, toolCall.id, toolCall.name));
             this.#sendToolUpdate(tabId, toolCall.name, `Error: Tool not found`, { error: errorMsg });
             continue;
           }
@@ -413,7 +339,7 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
             const toolResult = await tool.call(toolCall.args, tabId);
             
             // Push to messages
-            messages.push(new ToolMessage(JSON.stringify(toolResult), toolCall.id, toolCall.name));
+            this.messages.push(new ToolMessage(JSON.stringify(toolResult), toolCall.id, toolCall.name));
             
             // Store for reporting
             toolResults.push({
@@ -422,19 +348,17 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
               result: toolResult
             });
             
-            this.#sendToolUpdate(tabId, toolCall.name, `Completed ${this.#getToolDisplayName(toolCall.name)}`, { success: true });
+            this.#sendToolUpdate(tabId, toolCall.name, `Completed ${toolCall.name}`, { success: true });
             
           } catch (error) {
             const errorMsg = `Tool execution failed: ${error.message}`;
-            messages.push(new ToolMessage(errorMsg, toolCall.id, toolCall.name));
+            this.messages.push(new ToolMessage(errorMsg, toolCall.id, toolCall.name));
             this.#sendToolUpdate(tabId, toolCall.name, `Error: ${error.message}`, { error: errorMsg });
             console.error(`❌ [AI_AGENT] Tool ${toolCall.name} failed:`, error);
           }
         }
       } else {
-        // No tool calls, just add AI response to messages
-        messages.push(new AIMessage(result.content));
-        this.#addToPersistentHistory('ai', result.content);
+        this.messages.push(new AIMessage(result.content));``
       }
       
       // Reset consecutive failures on successful iteration
@@ -444,7 +368,7 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
       console.error(`❌ [AI_AGENT] Iteration ${iteration} failed:`, JSON.stringify(error, null, 2));
       // Add error to conversation and continue
       const errorMsg = `Error in iteration ${iteration}: ${error.message}`;
-      messages.push(new AIMessage(errorMsg));
+      this.messages.push(new AIMessage(errorMsg));
       
       // If too many consecutive failures, break
       if (++consecutiveFailures >= 3) {
@@ -493,8 +417,6 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
       console.log('ℹ️ [AI_AGENT] Failed to send tool update:', error.message);
     }
   }
-
-
   /**
    * Send reasoning update to UI
    * @private
@@ -514,104 +436,4 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
       console.log('ℹ️ [AI_AGENT] Failed to send reasoning update:', error.message);
     }
   }
-
-  /**
-   * Get display name for tools
-   * @private
-   */
-  #getToolDisplayName(toolName) {
-    const toolNames = {
-      'clickElement': 'Click Element',
-      'fillInput': 'Fill Input',
-      'getPageContent': 'Get Page Content',
-      'scrollPage': 'Scroll Page',
-      'navigateToUrl': 'Navigate to URL',
-      'takeScreenshot': 'Take Screenshot',
-      'reasoning': 'Reasoning',
-      'webSearch': 'Web Search',
-      'readFile': 'Read File',
-      'writeFile': 'Write File',
-      'get_page_content': 'Get Page Content',
-      'click_element': 'Click Element',
-      'fill_input': 'Fill Input',
-      'scroll_page': 'Scroll Page',
-      'navigate_to_url': 'Navigate to URL',
-      'take_screenshot': 'Take Screenshot'
-    };
-    return toolNames[toolName] || toolName;
-  }
-
-  /**
-   * Add message to persistent conversation history
-   * @private
-   */
-  #addToPersistentHistory(role, content) {
-    if (!content || content.trim() === '') return;
-    
-    const message = {
-      role: role, // 'human' or 'ai'
-      content: content,
-      timestamp: Date.now()
-    };
-    
-    this.conversationHistory.push(message);
-    
-    // Keep history manageable - limit to last 50 messages
-    if (this.conversationHistory.length > 50) {
-      this.conversationHistory = this.conversationHistory.slice(-50);
-    }
-    
-    console.log(`💾 [AI_AGENT] Added ${role} message to persistent history (${this.conversationHistory.length} total)`);
-  }
-
-  /**
-   * Restore conversation history from persistent storage to LangChain memory
-   * @private
-   */
-  async #restoreConversationHistory() {
-    try {
-      for (const msg of this.conversationHistory) {
-        if (msg.role === 'human') {
-          // For human messages, we need to save them as input with a dummy AI response
-          // We'll save the actual AI response when we encounter it next
-          continue;
-        } else if (msg.role === 'ai') {
-          // Find the corresponding human message
-          const humanMsgIndex = this.conversationHistory.indexOf(msg) - 1;
-          if (humanMsgIndex >= 0 && this.conversationHistory[humanMsgIndex].role === 'human') {
-            const humanMsg = this.conversationHistory[humanMsgIndex];
-            await this.memory.saveContext(
-              { input: humanMsg.content },
-              { output: msg.content }
-            );
-          }
-        }
-      }
-      console.log(`✅ [AI_AGENT] Successfully restored conversation history to LangChain memory`);
-    } catch (error) {
-      console.error(`❌ [AI_AGENT] Failed to restore conversation history:`, error);
-    }
-  }
-
-  /**
-   * Clear conversation history (useful for testing or explicit reset)
-   */
-  clearConversationHistory() {
-    this.conversationHistory = [];
-    this.memory = null;
-    this.memoryInitialized = false;
-    console.log(`🗑️ [AI_AGENT] Cleared conversation history and reset memory`);
-  }
-
-  /**
-   * Get conversation history summary for debugging
-   */
-  getConversationSummary() {
-    return {
-      messageCount: this.conversationHistory.length,
-      memoryInitialized: this.memoryInitialized,
-      lastMessage: this.conversationHistory.length > 0 ? 
-        this.conversationHistory[this.conversationHistory.length - 1] : null
-    };
-  }
 }
diff --git a/chrome/browser/resources/vibe/ai_tools.extension.js b/chrome/browser/resources/vibe/ai_tools.extension.js
index 2b0849c266..1f679e3a6e 100644
--- a/chrome/browser/resources/vibe/ai_tools.extension.js
+++ b/chrome/browser/resources/vibe/ai_tools.extension.js
@@ -1855,7 +1855,8 @@ export const browserTools = [
   // ReAct Pattern Tools (3-step cycle)
   new ThoughtTool(),      // Step 1: Think before acting
   new ObservationTool(),  // Step 3: Analyze results after actions
-  
+  new ReportTool(),       // Step 4: Finish, report results
+
   // Tab management
   new GetActiveTabTool(),
   new CreateNewTabTool(),
@@ -1897,6 +1898,5 @@ export const browserTools = [
   
   // New JavaScript-based Enhancement Tools
   new InjectJSTool(),
-  new WebSearchTool(),
-  new ReportTool()
+  new WebSearchTool()
 ];
diff --git a/chrome/browser/resources/vibe/background.js b/chrome/browser/resources/vibe/background.js
index d6b105f1cf..11c95e423c 100644
--- a/chrome/browser/resources/vibe/background.js
+++ b/chrome/browser/resources/vibe/background.js
@@ -1,76 +1,9 @@
 // @ts-nocheck
 // background.js - Chrome Extension Service Worker
-console.log('🚀 [BACKGROUND] Vibe AI Agent background script starting...');
-
-// Import the real LangChain agent implementation
 import { VibeLangchainAgent } from "./ai_agent.js";
-
-// Global variables
 let currentOperations = new Map();
-let aiAgent = null;
-let chatHistory = []; // Persistent chat history
+const aiAgent = new VibeLangchainAgent();
 
-// Initialize AI agent instance
-aiAgent = new VibeLangchainAgent();
-
-// Simple natural language query detection
-function isNaturalLanguageQuery(url) {
-  // Check if URL matches natural language patterns
-  const decodedUrl = decodeURIComponent(url);
-  
-  // Patterns that suggest natural language
-  const naturalLanguagePatterns = [
-    /how\s+/i,
-    /what\s+/i,
-    /where\s+/i,
-    /when\s+/i,
-    /why\s+/i,
-    /who\s+/i,
-    /can\s+you\s+/i,
-    /please\s+/i,
-    /help\s+me\s+/i,
-    /search\s+for\s+/i,
-    /find\s+/i,
-    /show\s+me\s+/i,
-    /tell\s+me\s+/i,
-    /explain\s+/i,
-    /navigate\s+to\s+/i,
-    /go\s+to\s+/i,
-    /open\s+/i,
-    /book\s+/i,
-    /plan\s+/i,
-    /create\s+/i,
-    /make\s+/i,
-    /get\s+/i,
-    /write\s+/i,
-    /build\s+/i,
-    /generate\s+/i,
-    /implement\s+/i,
-    /develop\s+/i,
-    /code\s+/i,
-    /calculate\s+/i,
-    /solve\s+/i,
-    /design\s+/i,
-    /analyze\s+/i,
-    /research\s+/i,
-    /review\s+/i,
-    /compare\s+/i,
-    /translate\s+/i,
-    /convert\s+/i,
-    /optimize\s+/i,
-    /fix\s+/i,
-    /debug\s+/i,
-    /test\s+/i,
-    /check\s+/i,
-    /validate\s+/i,
-    /summarize\s+/i,
-    /list\s+/i,
-    /recommend\s+/i,
-    /suggest\s+/i
-  ];
-  
-  return naturalLanguagePatterns.some(pattern => pattern.test(decodedUrl));
-}
 
 // Extract query from URL
 function extractQueryFromUrl(url) {
@@ -137,56 +70,24 @@ chrome.webNavigation.onBeforeNavigate.addListener(async (details) => {
   
   // Check both URL patterns and extracted queries
   const extractedQuery = extractQueryFromUrl(url);
-  const isNaturalQuery = isNaturalLanguageQuery(extractedQuery);
+  //TODO: replace by redirecting from chat4 home page
   const isAutoCompleteNavigation = isFromNaturalLanguageAutocomplete(url);
   
-  console.log('📝 [NAVIGATION] Extracted query:', extractedQuery);
-  console.log('🧠 [NAVIGATION] Natural language query result:', isNaturalQuery);
-  console.log('🤖 [NAVIGATION] Autocomplete navigation result:', isAutoCompleteNavigation);
-  
-  if (isNaturalQuery || isAutoCompleteNavigation) {
-    console.log('🎯 [NAVIGATION] Natural language query detected, intercepting navigation');
-    
+  if (isAutoCompleteNavigation) { 
     try {
       // Create a new tab for AI agent to work in
       const newTab = await chrome.tabs.create({
-        url: 'https://www.google.com', // Start with a useful page
+        url: 'chrome://newtab/', // Start with a useful page
         active: false // Don't switch to it immediately
       });
-      
-      // Redirect the original tab to a simple page
-      await chrome.tabs.update(details.tabId, { url: 'chrome://newtab/' });
-      
       // Open side panel on the original tab
       await openSidePanel(details.tabId);
-      
-      // Wait for side panel to fully load before sending messages
-      await new Promise(resolve => setTimeout(resolve, 2000));
-      
-      console.log(`🎯 [NAVIGATION] Created new working tab ${newTab.id} for AI agent, using original tab ${details.tabId} for side panel`);
-      
-      // Add user query to conversation
-      await sendStatusUpdate(details.tabId, {
-        type: 'USER_QUERY',
-        message: extractedQuery
-      });
-      
+    
       // Brief delay before processing message
       await new Promise(resolve => setTimeout(resolve, 500));
       
-      // Send processing status
-      await sendStatusUpdate(details.tabId, {
-        type: 'PROCESSING',
-        message: `Processing: "${extractedQuery}"`
-      });
-      
-      if (!aiAgent) {
-        throw new Error('AI agent not initialized');
-      }
-      
       // Get AI configuration for API key
       const config = await getAIConfiguration();
-      
       // Process the query with AI agent using the new working tab
       console.log('🤖 [AI] Processing query with AI agent:', extractedQuery);
       const result = await aiAgent.processUserRequest({
@@ -195,22 +96,6 @@ chrome.webNavigation.onBeforeNavigate.addListener(async (details) => {
         config: config
       });
       
-      console.log('✅ [AI] Query processing completed:', JSON.stringify(result, null, 2));
-      
-      // Adapt LangChain result format to expected format
-      const adaptedResult = {
-        success: true,
-        response: result.output || result.reasoning || 'Task completed',
-        toolResults: result.toolResults || [],
-        iterations: result.iterations || 1
-      };
-      
-      // Send result to side panel
-      await sendStatusUpdate(details.tabId, {
-        type: 'COMPLETED',
-        result: adaptedResult
-      });
-      
     } catch (error) {
       console.error('❌ [NAVIGATION] Error processing natural language query:', error);
       
@@ -518,6 +403,36 @@ chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
       }
       return true; // Keep the message channel open for async response
       
+    case 'TOOL_UPDATE':
+      // Forward tool updates to the Chat4 UI
+      console.log('🔧 [BACKGROUND] Forwarding tool update to Chat4:', message);
+      try {
+        // Find the side panel tab and forward the message
+        chrome.tabs.query({ url: chrome.runtime.getURL('chat.html') }, (tabs) => {
+          if (tabs.length > 0) {
+            chrome.tabs.sendMessage(tabs[0].id, message);
+          }
+        });
+      } catch (error) {
+        console.error('❌ [BACKGROUND] Error forwarding tool update:', error);
+      }
+      break;
+      
+    case 'REASONING_UPDATE':
+      // Forward reasoning updates to the Chat4 UI  
+      console.log('🧠 [BACKGROUND] Forwarding reasoning update to Chat4:', message);
+      try {
+        // Find the side panel tab and forward the message
+        chrome.tabs.query({ url: chrome.runtime.getURL('chat.html') }, (tabs) => {
+          if (tabs.length > 0) {
+            chrome.tabs.sendMessage(tabs[0].id, message);
+          }
+        });
+      } catch (error) {
+        console.error('❌ [BACKGROUND] Error forwarding reasoning update:', error);
+      }
+      break;
+      
     case 'USER_QUESTION':
       // Forward user question to sidepanel
       forwardMessageToSidepanel(message, sendResponse);
@@ -657,7 +572,7 @@ async function handleSidePanelCommand(message, sendResponse) {
     currentOperations.set(operationId, { command, source, timestamp: Date.now(), stopped: false });
   }
   
-  try {    
+  try {    aut
     // Check if operation was stopped before processing
     if (operationId && currentOperations.has(operationId) && currentOperations.get(operationId).stopped) {
       console.log(`🛑 [SIDE-PANEL] Operation ${operationId} was stopped before processing`);
@@ -870,40 +785,18 @@ async function handleChat4Message(message, sendResponse) {
   }
 }
 
-// Chat History Management Functions
-function addMessageToHistory(type, content, metadata = {}) {
-  const message = {
-    id: Date.now() + Math.random(),
-    type: type, // 'user', 'agent', 'system'
-    content: content,
-    timestamp: Date.now(),
-    ...metadata
-  };
-  
-  chatHistory.push(message);
-  console.log(`💬 [BACKGROUND] Added ${type} message to history:`, content.substring(0, 100));
-  
-  // Keep only last 100 messages to prevent memory issues
-  if (chatHistory.length > 100) {
-    chatHistory = chatHistory.slice(-100);
-  }
-  
-  return message;
-}
 
 function getChatHistory() {
-  console.log(`📚 [BACKGROUND] Returning chat history with ${chatHistory.length} messages`);
-  return chatHistory;
+  return aiAgent.getHistory();
 }
 
 function clearChatHistory() {
-  chatHistory = [];
-  console.log('🗑️ [BACKGROUND] Chat history cleared');
+  aiAgent.clearHistory();
 }
 
 // Handle chat history requests
 function handleChatHistoryRequest(message, sendResponse) {
-  console.log('📖 [BACKGROUND] Chat history requested');
+  console.log(JSON.stringify(message, null, 2));
   sendResponse({
     success: true,
     chatHistory: getChatHistory()
diff --git a/test_vibe.sh b/test_vibe.sh
old mode 100644
new mode 100755
diff --git a/test_vibe_pyautogui.py b/test_vibe_pyautogui.py
index 48d4ebe4b9..9c75814f69 100755
--- a/test_vibe_pyautogui.py
+++ b/test_vibe_pyautogui.py
@@ -23,33 +23,23 @@ import urllib.request
 from datetime import datetime
 from typing import Optional
 
-def main():
-    parser = argparse.ArgumentParser(description='Vibe Browser Extension Test')
-    parser.add_argument('--timeout', type=int, default=10, help='Timeout in seconds')
-    args = parser.parse_args()
 
-    test = VibeExtensionTest()
-    test.run_test(args.timeout)
+TEST_WORKSPACE = ".test"
 
 class VibeExtensionTest:
     def __init__(self):
         self.chromium_path = "/Users/engineer/workspace/vibebrowser/src/out/Debug/Chromium.app/Contents/MacOS/Chromium"
-        self.screenshot_dir = ".test/screenshots"
-        self.user_data_dir = f".test/vibe_test_{int(time.time())}"
+        self.screenshot_dir = os.path.join(TEST_WORKSPACE, "screenshots")
+        self.user_data_dir = os.path.join(TEST_WORKSPACE, "user_data_" + str(int(time.time())))
         self.chrome_process = None
         self.cdp_ws_url = None
         self.app_name = os.path.basename(self.chromium_path)
 
         os.makedirs(self.screenshot_dir, exist_ok=True)
-        print("🎯 Starting Vibe Browser test")
 
     def run_applescript(self, script):
         """Runs an AppleScript command and returns the output."""
-        try:
-            return subprocess.check_output(['osascript', '-e', script]).decode('utf-8').strip()
-        except subprocess.CalledProcessError as e:
-            print(f"❌ AppleScript failed: {e}")
-            return None
+        return subprocess.check_output(['osascript', '-e', script]).decode('utf-8').strip()
 
     def update_window_bounds(self):
         """Update Chromium window bounds using AppleScript."""
@@ -217,10 +207,6 @@ class VibeExtensionTest:
                 daemon=True  # Thread will be killed when main thread exits
             )
             self.stderr_thread.start()
-            
-            print("   Waiting for Chrome to start...")
-            time.sleep(3)  # Initial wait for process to start
-
             # Use improved window detection method
             max_attempts = 10
             for attempt in range(max_attempts):
@@ -300,14 +286,9 @@ class VibeExtensionTest:
                                 
                                 # Check for our specific error patterns
                                 if any(error_pattern in log_message for error_pattern in [
-                                    "Cannot read properties of undefined",
-                                    "reading 'length'", 
-                                    "TypeError",
-                                    "❌ [AI_AGENT]",
-                                    "Tool execution failed"
+                                    "❌",
                                 ]):
                                     print(f"🚨 ERROR DETECTED: {log_message}")
-                                    print(f"🚨 Level: {level}, Full args: {args}")
                                 
                                 if message_substring in log_message:
                                     print(f"✅ Found target log message: '{message_substring}'")
@@ -360,29 +341,9 @@ class VibeExtensionTest:
         time.sleep(1)
         
         # Clean up user data directory with retry
-        if os.path.exists(self.user_data_dir):
-            for attempt in range(3):
-                try:
-                    subprocess.run(['rm', '-rf', self.user_data_dir], check=True)
-                    print("✅ User data directory cleaned up.")
-                    break
-                except subprocess.CalledProcessError:
-                    if attempt < 2:
-                        print(f"⚠️ Cleanup attempt {attempt + 1} failed, retrying...")
-                        time.sleep(2)
-                    else:
-                        print(f"❌ Failed to clean up user data directory: {self.user_data_dir}")
-        
-        # Also clean up any leftover test directories
-        try:
-            leftover_dirs = glob.glob(".test/vibe_test_*")
-            for dir_path in leftover_dirs:
-                if os.path.exists(dir_path):
-                    subprocess.run(['rm', '-rf', dir_path], check=False)
-            if leftover_dirs:
-                print(f"✅ Cleaned up {len(leftover_dirs)} leftover test directories.")
-        except:
-            pass
+        if os.path.exists(TEST_WORKSPACE):
+            shutil.rmtree(TEST_WORKSPACE, ignore_errors=False)
+
 
     async def type_query(self, query="book a flight from SFO to JFK", timeout=120):
         """Type a query in the omnibox using PyAutoGUI.
-- 
2.50.0


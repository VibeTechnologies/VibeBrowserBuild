From f83bd0a39583cca38c58a57f33fbf289fafdce2f Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Sat, 26 Jul 2025 14:28:08 +0300
Subject: [PATCH 39/91] Fix get_page_content blocking and add reasoning tool
 integration
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

- Fix get_page_content tool blocking JS event loop by making it async with timeouts
- Replace querySelectorAllDeep with regular querySelectorAll for performance
- Add requestIdleCallback to prevent main thread blocking
- Update system prompt to require LLM to use reasoning tool for transparency
- Enhance AI agent to send REASONING_UPDATE messages when reasoning tool is used
- Update ChatPage to display reasoning updates as chat messages
- Show agent thinking process as "üß† Thinking (Step X): [thoughts]"

This resolves browser hanging issues and makes the AI agent's decision-making process visible to users.
---
 chrome/browser/resources/vibe/ai_agent.js     |  54 +++++-
 .../chat4/src/components/chat/ChatPage.tsx    |  20 ++-
 chrome/browser/resources/vibe/content.js      | 161 ++++++++++++++----
 3 files changed, 195 insertions(+), 40 deletions(-)

diff --git a/chrome/browser/resources/vibe/ai_agent.js b/chrome/browser/resources/vibe/ai_agent.js
index d9a9f4560b..3e7531e5fb 100644
--- a/chrome/browser/resources/vibe/ai_agent.js
+++ b/chrome/browser/resources/vibe/ai_agent.js
@@ -316,23 +316,45 @@ export class VibeLangchainAgent {
     // Intelligent system prompt that teaches understanding rather than rigid following
     const systemPrompt = `You are an intelligent browser automation agent that understands web interactions like a human.
 
+**CRITICAL: USE REASONING TOOL TO THINK AND PLAN**
+
+For EVERY task, you MUST use the 'reasoning' tool to:
+1. Express your thoughts about what you're seeing
+2. Evaluate your progress
+3. Plan your next steps
+4. Show your thinking process to the user
+
+**CRITICAL: ALWAYS DISCOVER BEFORE ACTING**
+
+Before attempting ANY action on a page (click, fill, etc.), you MUST:
+1. Use 'reasoning' tool to express what you plan to do
+2. Call get_page_content to understand what's on the page
+3. Use 'reasoning' tool again to analyze what you found
+4. Only THEN attempt to interact with the discovered elements
+
 **CORE INTELLIGENCE PRINCIPLES:**
 
-1. **Contextual Awareness**: 
+1. **Discovery First**: 
+   - NEVER assume selectors - always discover them using get_page_content
+   - Look for elements marked [CLICKABLE], [INPUT], [BUTTON], etc.
+   - Pay attention to aria-labels, placeholders, and text content
+   - Example workflow: get_page_content ‚Üí analyze elements ‚Üí fill_form_field with discovered selector
+
+2. **Contextual Awareness**: 
    - When you fill an airport field, EXPECT suggestions to appear
    - After typing in search boxes, look for dropdown options
    - Form interactions often create new clickable elements
 
-2. **Observation and Decision Making:**
+3. **Observation and Decision Making:**
    - After each action, call get_page_content with includeChanges=true to see what's new
    - LOOK for interactive elements marked as [CLICKABLE] that just appeared  
    - If you see relevant options with [NEW - JUST APPEARED] or [DROPDOWN OPTION], DECIDE to click them
    - Example: After typing "SFO", if you see "[CLICKABLE] San Francisco International (SFO) [DROPDOWN OPTION] [AIRPORT RELATED]", click it
 
-3. **Natural Interaction Flow:**
+4. **Natural Interaction Flow:**
 
 **THINK LIKE A HUMAN**: 
-"I typed SFO and now there are airport suggestions marked [DROPDOWN OPTION]. I should click the right one."
+"First, let me see what's on this page (get_page_content), then I'll find the right input field, fill it, and watch for any dropdowns or suggestions."
 
 If asked to find a flight: flights.google.com
 If asked to find a hotel, check a few sources booking.com, hotels.com, agoda.com 
@@ -506,6 +528,19 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
               if (toolCall.name === 'reasoning') {
                 try {
                   const reasoningData = JSON.parse(toolResult);
+                  
+                  // Send reasoning update to UI
+                  chrome.runtime.sendMessage({
+                    type: 'REASONING_UPDATE',
+                    tabId: tabId,
+                    reasoning: reasoningData.thinking || toolResult,
+                    evaluation: reasoningData.evaluation,
+                    next_goal: reasoningData.next_goal,
+                    confidence: reasoningData.confidence,
+                    iteration: iteration,
+                    timestamp: Date.now()
+                  });
+                  
                   if (reasoningData.task_completed === true) {
                     console.log(`üéØ [AI_AGENT] Task completed as indicated by reasoning tool after ${iteration} iterations`);
                     return {
@@ -520,8 +555,15 @@ If asked to find a product, check amazon.com, walmart.com, aliexpress.com, temu.
                     };
                   }
                 } catch (parseError) {
-                  // If reasoning result can't be parsed as JSON, continue normally
-                  console.log(`‚ö†Ô∏è [AI_AGENT] Could not parse reasoning result as JSON, continuing...`);
+                  // If reasoning result can't be parsed as JSON, send as plain text
+                  console.log(`‚ö†Ô∏è [AI_AGENT] Could not parse reasoning result as JSON, sending as text...`);
+                  chrome.runtime.sendMessage({
+                    type: 'REASONING_UPDATE',
+                    tabId: tabId,
+                    reasoning: toolResult,
+                    iteration: iteration,
+                    timestamp: Date.now()
+                  });
                 }
               }
               
diff --git a/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatPage.tsx b/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatPage.tsx
index 40faf8f77c..3286741ec1 100644
--- a/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatPage.tsx
+++ b/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatPage.tsx
@@ -160,10 +160,24 @@ export function ChatPage() {
         setProcessingDuration(0)
       }
       
-      // Add reasoning update as agent message (like legacy sidepanel)
+      // Add reasoning update as actual chat message
       if (update.reasoning && update.reasoning.trim()) {
-        const reasoningMessage = `üí≠ **Iteration ${update.iteration}**: ${update.reasoning}`
-        addStatusMessage(reasoningMessage)
+        const reasoningMessage: MessageData = {
+          id: generateId(),
+          content: `üß† **Thinking (Step ${update.iteration})**:\n\n${update.reasoning}`,
+          role: "assistant",
+          timestamp: new Date()
+        }
+        
+        setSessions(prev => prev.map(session => 
+          session.id === currentSessionId
+            ? { 
+                ...session, 
+                messages: [...session.messages, reasoningMessage],
+                timestamp: new Date()
+              }
+            : session
+        ))
       }
     })
     
diff --git a/chrome/browser/resources/vibe/content.js b/chrome/browser/resources/vibe/content.js
index 5aa6782a54..f17ecbc0af 100644
--- a/chrome/browser/resources/vibe/content.js
+++ b/chrome/browser/resources/vibe/content.js
@@ -229,7 +229,7 @@ chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
         break;
 
       case "getPageContent":
-        Promise.resolve(handleGetPageContent(message.data))
+        handleGetPageContent(message.data)
           .then(result => sendResponse({ success: true, action: "page_content_extracted", result }))
           .catch(error => sendResponse({ success: false, error: String(error) }));
         break;
@@ -1446,7 +1446,7 @@ function handlePageScroll(data) {
  * Enhanced page content extraction with intelligent interactive element highlighting
  * This gives the agent better "vision" to see and understand dynamic content
  */
-function handleGetPageContent(data = {}) {
+async function handleGetPageContent(data = {}) {
   console.log("üìÑ Extracting enhanced page content for intelligent agent...");
   
   const options = {
@@ -1458,15 +1458,15 @@ function handleGetPageContent(data = {}) {
   
   try {
     // Use enhanced intelligent extraction
-    return handleIntelligentPageContent(options);
+    return await handleIntelligentPageContent(options);
   } catch (error) {
     console.log(`‚ùå Error extracting page content: ${error.message}`);
     // Fallback to original method
     try {
       if (window.VibeAI && window.VibeAI.extractPageContentAsMarkdown) {
-        return handleGetPageContentWithExtractor();
+        return await handleGetPageContentWithExtractor();
       }
-      return handleGetPageContentFallback();
+      return await handleGetPageContentFallback();
     } catch (fallbackError) {
       console.log(`‚ùå Fallback extraction also failed: ${fallbackError.message}`);
       throw error;
@@ -1477,26 +1477,35 @@ function handleGetPageContent(data = {}) {
 /**
  * Intelligent page content extraction that helps agent see and understand interactive elements
  */
-function handleIntelligentPageContent(options) {
+async function handleIntelligentPageContent(options) {
   const startTime = Date.now();
   console.log("üß† Performing intelligent content extraction with options:", options);
   
-  // Get base content
+  // Get base content - but limit extraction to visible viewport first
   let baseContent = "";
+  
+  // Check if we have the enhanced extractor
   if (window.VibeAI && window.VibeAI.extractPageContentAsMarkdown) {
     const result = window.VibeAI.extractPageContentAsMarkdown();
     baseContent = result.success ? result.content : "";
   } else {
-    baseContent = convertToBasicMarkdown(document.body);
+    // For fallback, limit to viewport to prevent blocking
+    const viewportElement = document.querySelector('main') || 
+                          document.querySelector('[role="main"]') ||
+                          document.querySelector('.main-content') ||
+                          document.body;
+    
+    // Only extract visible content to prevent blocking
+    baseContent = await convertToBasicMarkdownAsync(viewportElement, 5000); // 5 second limit
   }
   
-  // Get intelligent interactive elements
-  const interactiveElements = extractIntelligentInteractiveElements(options);
+  // Get intelligent interactive elements - with timeout
+  const interactiveElements = await extractIntelligentInteractiveElementsAsync(options, 2000);
   
   // Get recent changes if requested
   let recentChanges = [];
   if (options.includeChanges) {
-    recentChanges = getIntelligentChangeSummary();
+    recentChanges = await getIntelligentChangeSummaryAsync(1000);
   }
   
   // Combine everything intelligently
@@ -1555,11 +1564,12 @@ function handleIntelligentPageContent(options) {
  */
 function extractIntelligentInteractiveElements(options) {
   const elements = [];
+  const processedElements = new Set(); // Track processed elements to avoid duplicates
   
   // Define comprehensive selectors for interactive elements
   const interactiveSelectors = [
-    '[role="option"]', '[role="button"]', '[role="menuitem"]', '[role="listbox"]',
     'button', 'a[href]', 'input', 'select', 'textarea',
+    '[role="button"]', '[role="option"]', '[role="menuitem"]', '[role="listbox"]',
     '.dropdown-item', '.suggestion', '.autocomplete-option', '.menu-item',
     '[onclick]', '[data-testid*="option"]', '[tabindex]:not([tabindex="-1"])',
     'li[data-value]', '[aria-expanded]', '[data-option]'
@@ -1570,21 +1580,30 @@ function extractIntelligentInteractiveElements(options) {
     document.querySelector(options.focusArea) || document : 
     document;
   
+  // Use regular querySelectorAll instead of deep traversal for performance
   interactiveSelectors.forEach(selector => {
-    const found = querySelectorAllDeep(searchRoot, selector);
-    found.forEach(element => {
-      if (isElementVisible(element) && isElementInteractable(element)) {
-        const elementInfo = analyzeIntelligentElement(element, options);
-        if (elementInfo) {
-          elements.push(elementInfo);
+    try {
+      // Use regular querySelectorAll which is much faster
+      const found = searchRoot.querySelectorAll(selector);
+      found.forEach(element => {
+        // Skip if already processed
+        if (processedElements.has(element)) return;
+        processedElements.add(element);
+        
+        if (isElementVisible(element) && isElementInteractable(element)) {
+          const elementInfo = analyzeIntelligentElement(element, options);
+          if (elementInfo) {
+            elements.push(elementInfo);
+          }
         }
-      }
-    });
+      });
+    } catch (e) {
+      console.warn(`Selector error for "${selector}":`, e.message);
+    }
   });
   
-  // Remove duplicates and sort by importance
-  const uniqueElements = removeDuplicateElements(elements);
-  return sortElementsByImportance(uniqueElements);
+  // Sort by importance without removing duplicates (already handled above)
+  return sortElementsByImportance(elements);
 }
 
 /**
@@ -1933,7 +1952,7 @@ function sleep(ms) {
 /**
  * Enhanced page content extraction using the content extractor
  */
-function handleGetPageContentWithExtractor() {
+async function handleGetPageContentWithExtractor() {
   // Extract markdown content
   const markdownResult = window.VibeAI.extractPageContentAsMarkdown();
 
@@ -1970,7 +1989,7 @@ function handleGetPageContentWithExtractor() {
 /**
  * Fallback content extraction without content extractor
  */
-function handleGetPageContentFallback() {
+async function handleGetPageContentFallback() {
   // Get all interactive elements with their full HTML
   const inputElements = [];
   const inputs = document.querySelectorAll('input, textarea, select, button[type="submit"], button:not([disabled])');
@@ -2268,6 +2287,77 @@ function getEnhancedInputHtml(input) {
   return clone.outerHTML;
 }
 
+/**
+ * Async version with timeout to prevent blocking
+ */
+async function convertToBasicMarkdownAsync(element, timeout = 5000) {
+  return new Promise((resolve) => {
+    const timeoutId = setTimeout(() => {
+      console.warn('‚è±Ô∏è Markdown conversion timed out, returning partial content');
+      resolve('[Content extraction timed out - page too complex]');
+    }, timeout);
+    
+    // Use requestIdleCallback to avoid blocking
+    requestIdleCallback(() => {
+      try {
+        const result = convertToBasicMarkdown(element);
+        clearTimeout(timeoutId);
+        resolve(result);
+      } catch (error) {
+        clearTimeout(timeoutId);
+        console.error('Error in markdown conversion:', error);
+        resolve('[Error extracting content]');
+      }
+    }, { timeout: timeout });
+  });
+}
+
+/**
+ * Async version of extractIntelligentInteractiveElements with timeout
+ */
+async function extractIntelligentInteractiveElementsAsync(options, timeout = 2000) {
+  return new Promise((resolve) => {
+    const timeoutId = setTimeout(() => {
+      console.warn('‚è±Ô∏è Interactive element extraction timed out');
+      resolve([]);
+    }, timeout);
+    
+    requestIdleCallback(() => {
+      try {
+        const elements = extractIntelligentInteractiveElements(options);
+        clearTimeout(timeoutId);
+        resolve(elements);
+      } catch (error) {
+        clearTimeout(timeoutId);
+        console.error('Error extracting interactive elements:', error);
+        resolve([]);
+      }
+    }, { timeout: timeout });
+  });
+}
+
+/**
+ * Async version of getIntelligentChangeSummary
+ */
+async function getIntelligentChangeSummaryAsync(timeout = 1000) {
+  return new Promise((resolve) => {
+    const timeoutId = setTimeout(() => {
+      resolve([]);
+    }, timeout);
+    
+    requestIdleCallback(() => {
+      try {
+        const changes = getIntelligentChangeSummary();
+        clearTimeout(timeoutId);
+        resolve(changes);
+      } catch (error) {
+        clearTimeout(timeoutId);
+        resolve([]);
+      }
+    }, { timeout: timeout });
+  });
+}
+
 /**
  * Convert HTML content to basic markdown
  */
@@ -2824,13 +2914,22 @@ function handleHighlightElements(data) {
     
     // Find all interactive elements
     const allElements = [];
+    const processedElements = new Set();
     elementTypes.forEach(selector => {
-      const elements = querySelectorAllDeep(document, selector);
-      elements.forEach(el => {
-        if (isElementVisible(el) && isElementInteractable(el)) {
-          allElements.push(el);
-        }
-      });
+      try {
+        const elements = document.querySelectorAll(selector);
+        elements.forEach(el => {
+          // Skip if already processed
+          if (processedElements.has(el)) return;
+          processedElements.add(el);
+          
+          if (isElementVisible(el) && isElementInteractable(el)) {
+            allElements.push(el);
+          }
+        });
+      } catch (e) {
+        console.warn(`Selector error in highlight: "${selector}":`, e.message);
+      }
     });
     
     // Remove duplicates
-- 
2.50.0


From 0bdda5f0e6338e35d2680198bebe256d413cdc5b Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Tue, 22 Jul 2025 20:29:27 +0300
Subject: [PATCH 017/107] Update fillInput

---
 chrome/browser/resources/vibe/content.js | 112 ++++++++++++++++++++---
 1 file changed, 98 insertions(+), 14 deletions(-)

diff --git a/chrome/browser/resources/vibe/content.js b/chrome/browser/resources/vibe/content.js
index ac1a278319..5d4cea939e 100644
--- a/chrome/browser/resources/vibe/content.js
+++ b/chrome/browser/resources/vibe/content.js
@@ -326,19 +326,31 @@ function fillFlightForm(data) {
 }
 
 /**
- * Fill input field
+ * Fill input field and return page diff
  */
 function fillInput(selector, value) {
-  // Use deep selector to pierce Shadow DOM
-  const element = querySelectorDeep(document, selector);
-  if (element) {
-    // Focus the element first to trigger any dynamic changes
-    element.focus();
-    
+  // Get the page state before the input
+  const beforeState = getPageStateSnapshot();
+  
+  // Use regular querySelector instead of querySelectorDeep
+  const element = document.querySelector(selector);
+  if (!element) {
+    const errorMessage = `Could not find element: ${selector}`;
+    console.log(`❌ ${errorMessage}`);
+    throw new Error(errorMessage);
+  }
+
+  // Focus the element first to trigger any dynamic changes
+  element.focus();
+  
+  // Store the current value to restore if needed
+  const originalValue = element.value;
+  
+  try {
     // Set the value
     element.value = value;
     
-    // Dispatch comprehensive events to trigger Google's JS
+    // Dispatch comprehensive events to trigger any JS handlers
     const events = [
       new Event("focus", { bubbles: true }),
       new KeyboardEvent("keydown", { bubbles: true, key: value }),
@@ -349,15 +361,87 @@ function fillInput(selector, value) {
     
     events.forEach(event => element.dispatchEvent(event));
     
-    console.log(`✅ Filled ${selector} with "${value}" (shadow-aware)`);
-    return { success: true, message: `Filled ${selector} with "${value}"` };
-  } else {
-    const errorMessage = `Could not find element: ${selector}`;
-    console.log(`❌ ${errorMessage}`);
-    throw new Error(errorMessage);
+    console.log(`✅ Filled ${selector} with "${value}"`);
+    
+    // Get the page state after the input
+    const afterState = getPageStateSnapshot();
+    
+    // Return success and the diff
+    return { 
+      success: true, 
+      message: `Filled ${selector} with "${value}"`,
+      diff: getStateDiff(beforeState, afterState)
+    };
+  } catch (error) {
+    // Restore original value on error
+    element.value = originalValue;
+    console.log(`❌ Error filling input: ${error.message}`);
+    throw error;
   }
 }
 
+/**
+ * Get a snapshot of the current page state for diffing
+ */
+function getPageStateSnapshot() {
+  return {
+    url: window.location.href,
+    title: document.title,
+    timestamp: Date.now(),
+    // Add any other relevant state information
+    formValues: Array.from(document.forms).map(form => ({
+      id: form.id,
+      action: form.action,
+      elements: Array.from(form.elements).map(el => ({
+        id: el.id,
+        name: el.name,
+        type: el.type,
+        value: el.value,
+        checked: el.checked,
+        selected: el.selected
+      }))
+    }))
+  };
+}
+
+/**
+ * Get the difference between two page states
+ */
+function getStateDiff(before, after) {
+  const diff = {
+    timestamp: Date.now(),
+    urlChanged: before.url !== after.url,
+    titleChanged: before.title !== after.title,
+    formChanges: []
+  };
+
+  // Compare form values
+  after.formValues.forEach((afterForm, i) => {
+    const beforeForm = before.formValues[i] || {};
+    const formDiff = {
+      formId: afterForm.id,
+      changedFields: []
+    };
+
+    afterForm.elements.forEach((afterEl, j) => {
+      const beforeEl = (beforeForm.elements && beforeForm.elements[j]) || {};
+      if (JSON.stringify(afterEl) !== JSON.stringify(beforeEl)) {
+        formDiff.changedFields.push({
+          element: afterEl.name || afterEl.id || `element[${j}]`,
+          before: beforeEl.value,
+          after: afterEl.value
+        });
+      }
+    });
+
+    if (formDiff.changedFields.length > 0) {
+      diff.formChanges.push(formDiff);
+    }
+  });
+
+  return diff;
+}
+
 /**
  * Handle AI-driven DOM analysis and action execution
  */
-- 
2.50.0


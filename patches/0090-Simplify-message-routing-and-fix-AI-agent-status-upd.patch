From a4c78b016169ab942f719cfcad20be012d0dc60f Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Wed, 30 Jul 2025 10:52:05 +0300
Subject: [PATCH 090/107] Simplify message routing and fix AI agent status
 updates

- Remove circular message routing between ai_agent.js and background.js
- Fix TOOL_UPDATE and THINKING_UPDATE message broadcasting:
  - ai_agent.js now broadcasts directly to all contexts (extension pages + content scripts)
  - Removed unnecessary handlers from background.js that were creating circular routing
- Fix USER_QUESTION_RESPONSE handler to properly forward responses to waiting AI tools
- Remove unused checkDarkMode handler from background.js
- Remove broken {tool_names} placeholder from AI agent prompt template

The message flow is now simplified:
- ai_agent.js broadcasts directly via chrome.runtime.sendMessage and chrome.tabs.sendMessage
- Chat4 receives messages directly without background.js forwarding
- No more circular routing issues
---
 chrome/browser/resources/vibe/ai_agent.js   | 104 +++++++------------
 chrome/browser/resources/vibe/background.js | 105 +++++++++-----------
 2 files changed, 82 insertions(+), 127 deletions(-)

diff --git a/chrome/browser/resources/vibe/ai_agent.js b/chrome/browser/resources/vibe/ai_agent.js
index 7b611bb466..33a8a3543f 100644
--- a/chrome/browser/resources/vibe/ai_agent.js
+++ b/chrome/browser/resources/vibe/ai_agent.js
@@ -368,8 +368,6 @@ IMPORTANT INSTRUCTIONS:
 - If a tool fails, explain the error and try alternative approaches
 - Always provide clear status updates about what you're doing
 
-Available tools: {tool_names}
-
 Current task: Help the user with their request: "{input}"
 
 Think step by step and use tools as needed to complete this task. Start by taking a screenshot to see the current state, then proceed methodically.`
@@ -719,42 +717,27 @@ Think step by step and use tools as needed to complete this task. Start by takin
         try {
           console.log(`üîß [AI_AGENT] Tool update delivery attempt ${attempt + 1}/${maxRetries}`);
           
-          // METHOD 1: Send to runtime (primary method for Chat4)
-          // This should reach the background script, which passes through to Chat4
+          // Broadcast to ALL contexts
           try {
-            if (chrome.runtime && chrome.runtime.sendMessage) {
-              // Use callback-based approach for better reliability
-              chrome.runtime.sendMessage(message, (response) => {
-                if (chrome.runtime.lastError) {
-                  console.log(`‚ö†Ô∏è [AI_AGENT] Runtime callback error: ${chrome.runtime.lastError.message}`);
-                } else {
-                  console.log(`‚úÖ [AI_AGENT] Runtime message delivered with response:`, response);
-                }
-              });
-              console.log(`‚úÖ [AI_AGENT] Tool update sent to runtime on attempt ${attempt + 1}`);
-              delivered = true;
-            } else {
-              console.log(`‚ö†Ô∏è [AI_AGENT] chrome.runtime.sendMessage not available`);
-            }
-          } catch (runtimeError) {
-            console.log(`‚ö†Ô∏è [AI_AGENT] Runtime message failed: ${runtimeError.message}`);
-          }
-          
-          // METHOD 2: Try direct tab messaging if tabId provided
-          if (tabId && !delivered) {
-            try {
-              chrome.tabs.sendMessage(tabId, message, (response) => {
-                if (chrome.runtime.lastError) {
-                  console.log(`‚ö†Ô∏è [AI_AGENT] Tab callback error: ${chrome.runtime.lastError.message}`);
-                } else {
-                  console.log(`‚úÖ [AI_AGENT] Tab message delivered with response:`, response);
+            // METHOD 1: Send to all extension pages (including Chat4 running as new tab)
+            // Use chrome.runtime.sendMessage but without expecting a response to avoid circular routing
+            chrome.runtime.sendMessage(message);
+            console.log(`‚úÖ [AI_AGENT] Tool update broadcast to extension contexts`);
+            
+            // METHOD 2: Send to all content scripts in regular web pages
+            chrome.tabs.query({}, (tabs) => {
+              tabs.forEach((tab) => {
+                if (tab.id && !tab.url?.startsWith('chrome-extension://')) {
+                  chrome.tabs.sendMessage(tab.id, message).catch(() => {
+                    // Ignore - normal for tabs without our content script
+                  });
                 }
               });
-              console.log(`‚úÖ [AI_AGENT] Tool update sent to tab ${tabId} on attempt ${attempt + 1}`);
-              delivered = true;
-            } catch (tabError) {
-              console.log(`‚ö†Ô∏è [AI_AGENT] Tab message failed: ${tabError.message}`);
-            }
+            });
+            console.log(`‚úÖ [AI_AGENT] Tool update broadcast to content scripts`);
+            delivered = true;
+          } catch (broadcastError) {
+            console.log(`‚ö†Ô∏è [AI_AGENT] Broadcast failed: ${broadcastError.message}`);
           }
           
           // Add a small delay to ensure message processing
@@ -820,42 +803,27 @@ Think step by step and use tools as needed to complete this task. Start by takin
         try {
           console.log(`üß† [AI_AGENT] Thinking update delivery attempt ${attempt + 1}/${maxRetries}`);
           
-          // METHOD 1: Send to runtime (primary method for Chat4)
-          // This should reach the background script, which passes through to Chat4
+          // Broadcast to ALL contexts
           try {
-            if (chrome.runtime && chrome.runtime.sendMessage) {
-              // Use callback-based approach for better reliability
-              chrome.runtime.sendMessage(message, (response) => {
-                if (chrome.runtime.lastError) {
-                  console.log(`‚ö†Ô∏è [AI_AGENT] Runtime callback error: ${chrome.runtime.lastError.message}`);
-                } else {
-                  console.log(`‚úÖ [AI_AGENT] Runtime thinking update delivered with response:`, response);
-                }
-              });
-              console.log(`‚úÖ [AI_AGENT] Thinking update sent to runtime on attempt ${attempt + 1}`);
-              delivered = true;
-            } else {
-              console.log(`‚ö†Ô∏è [AI_AGENT] chrome.runtime.sendMessage not available`);
-            }
-          } catch (runtimeError) {
-            console.log(`‚ö†Ô∏è [AI_AGENT] Runtime message failed: ${runtimeError.message}`);
-          }
-          
-          // METHOD 2: Try direct tab messaging if tabId provided
-          if (tabId && !delivered) {
-            try {
-              chrome.tabs.sendMessage(tabId, message, (response) => {
-                if (chrome.runtime.lastError) {
-                  console.log(`‚ö†Ô∏è [AI_AGENT] Tab callback error: ${chrome.runtime.lastError.message}`);
-                } else {
-                  console.log(`‚úÖ [AI_AGENT] Tab thinking update delivered with response:`, response);
+            // METHOD 1: Send to all extension pages (including Chat4 running as new tab)
+            // Use chrome.runtime.sendMessage but without expecting a response to avoid circular routing
+            chrome.runtime.sendMessage(message);
+            console.log(`‚úÖ [AI_AGENT] Thinking update broadcast to extension contexts`);
+            
+            // METHOD 2: Send to all content scripts in regular web pages
+            chrome.tabs.query({}, (tabs) => {
+              tabs.forEach((tab) => {
+                if (tab.id && !tab.url?.startsWith('chrome-extension://')) {
+                  chrome.tabs.sendMessage(tab.id, message).catch(() => {
+                    // Ignore - normal for tabs without our content script
+                  });
                 }
               });
-              console.log(`‚úÖ [AI_AGENT] Thinking update sent to tab ${tabId} on attempt ${attempt + 1}`);
-              delivered = true;
-            } catch (tabError) {
-              console.log(`‚ö†Ô∏è [AI_AGENT] Tab message failed: ${tabError.message}`);
-            }
+            });
+            console.log(`‚úÖ [AI_AGENT] Thinking update broadcast to content scripts`);
+            delivered = true;
+          } catch (broadcastError) {
+            console.log(`‚ö†Ô∏è [AI_AGENT] Broadcast failed: ${broadcastError.message}`);
           }
           
           // Add a small delay to ensure message processing
diff --git a/chrome/browser/resources/vibe/background.js b/chrome/browser/resources/vibe/background.js
index a4b45e648c..e1b6b79052 100644
--- a/chrome/browser/resources/vibe/background.js
+++ b/chrome/browser/resources/vibe/background.js
@@ -6,6 +6,7 @@ console.log('üöÄ [BACKGROUND] VIBE BACKGROUND SCRIPT LOADED WITH HARDCODED API
 
 let currentOperations = new Map();
 const aiAgent = new VibeLangchainAgent();
+let pendingUserQuestions = new Map(); // Track pending user questions with their requestIds
 
 
 // Extract query from URL
@@ -380,27 +381,57 @@ chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
       handleUpdateSuggestions(message, sendResponse);
       return true; // Keep the message channel open for async response
       
-    case 'checkDarkMode':
-      // Check if browser is in dark mode
-      try {
-        // Background scripts can't access window.matchMedia
-        // For now, return a default value and let the content script/sidepanel handle detection
-        console.log('üåô Dark mode check requested - deferring to content script');
-        sendResponse({ isDarkMode: false, useClientSideDetection: true });
-      } catch (e) {
-        console.error('‚ùå Error detecting dark mode:', e);
-        sendResponse({ isDarkMode: false, useClientSideDetection: true });
-      }
-      return true; // Keep the message channel open for async response
-      
     case 'USER_QUESTION':
+      // Store the requestId for later when we get the response
+      if (message.requestId) {
+        pendingUserQuestions.set('current', message.requestId);
+        console.log('üìù [BACKGROUND] Stored USER_QUESTION requestId:', message.requestId);
+      }
       // Forward user question to sidepanel
       forwardMessageToSidepanel(message, sendResponse);
       return true; // Keep the message channel open for async response
       
     case 'USER_QUESTION_RESPONSE':
-      // Forward user response back to the asking component
-      console.log('üìù User question response received:', message.response);
+      // Forward user response back to the asking AI tool
+      console.log('üìù [BACKGROUND] User question response received:', message.response);
+      
+      // Get the stored requestId
+      const requestId = pendingUserQuestions.get('current');
+      if (requestId) {
+        // Broadcast the response with the original requestId so the waiting tool can receive it
+        const responseMessage = {
+          type: 'USER_QUESTION_RESPONSE',
+          requestId: requestId,
+          response: message.response,
+          timestamp: message.timestamp || Date.now()
+        };
+        
+        console.log('üì§ [BACKGROUND] Broadcasting USER_QUESTION_RESPONSE with requestId:', requestId);
+        
+        // Broadcast to all contexts including content scripts where the AI tool is waiting
+        chrome.runtime.sendMessage(responseMessage).then(() => {
+          console.log('‚úÖ [BACKGROUND] USER_QUESTION_RESPONSE broadcast successfully');
+        }).catch(error => {
+          console.log('‚ö†Ô∏è [BACKGROUND] Error broadcasting USER_QUESTION_RESPONSE:', error.message);
+        });
+        
+        // Also send to all tabs to ensure content scripts receive it
+        chrome.tabs.query({}, (tabs) => {
+          tabs.forEach((tab) => {
+            if (tab.id) {
+              chrome.tabs.sendMessage(tab.id, responseMessage).catch(() => {
+                // Ignore errors for tabs that don't have our content script
+              });
+            }
+          });
+        });
+        
+        // Clear the pending question
+        pendingUserQuestions.delete('current');
+      } else {
+        console.warn('‚ö†Ô∏è [BACKGROUND] No requestId found for USER_QUESTION_RESPONSE');
+      }
+      
       sendResponse({ success: true });
       return true; // Keep the message channel open for async response
       
@@ -419,50 +450,6 @@ chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
       handleChatHistoryRequest(message, sendResponse);
       return true; // Keep the message channel open for async response
       
-    case 'TOOL_UPDATE':
-      // Forward tool updates to both sidepanel and Chat4 for complete status visibility
-      console.log('üîß [BACKGROUND] Tool update received - forwarding to Chat4 and sidepanel:', message.tool, message.message);
-      console.log('üß™ [BACKGROUND] DIAGNOSTIC: TOOL_UPDATE message details:', JSON.stringify(message));
-      
-      // Send response immediately to prevent hanging
-      sendResponse({ success: true, forwarded: true });
-      
-      // Ensure Chat4 receives the tool update even when processing via sidepanel
-      try {
-        // Use setTimeout to avoid blocking and ensure message gets sent
-        setTimeout(() => {
-          chrome.runtime.sendMessage(message).catch(error => {
-            console.log('‚ÑπÔ∏è [BACKGROUND] Tool update broadcast - some contexts may not be listening:', error.message);
-          });
-        }, 0);
-      } catch (error) {
-        console.log('‚ö†Ô∏è [BACKGROUND] Error broadcasting tool update:', error.message);
-      }
-      
-      return true; // Message handled successfully
-      
-    case 'THINKING_UPDATE':
-      // Forward thinking updates to both sidepanel and Chat4 for complete status visibility
-      console.log('üß† [BACKGROUND] Thinking update received - forwarding to Chat4 and sidepanel:', message.data?.type);
-      console.log('üß™ [BACKGROUND] DIAGNOSTIC: THINKING_UPDATE message details:', JSON.stringify(message));
-      
-      // Send response immediately to prevent hanging
-      sendResponse({ success: true, forwarded: true });
-      
-      // Ensure Chat4 receives the thinking update even when processing via sidepanel
-      try {
-        // Use setTimeout to avoid blocking and ensure message gets sent
-        setTimeout(() => {
-          chrome.runtime.sendMessage(message).catch(error => {
-            console.log('‚ÑπÔ∏è [BACKGROUND] Thinking update broadcast - some contexts may not be listening:', error.message);
-          });
-        }, 0);
-      } catch (error) {
-        console.log('‚ö†Ô∏è [BACKGROUND] Error broadcasting thinking update:', error.message);
-      }
-      
-      return true; // Message handled successfully
-      
     default:
       console.log('‚ùì Unknown message type:', message.type);
       sendResponse({ success: false, error: 'Unknown message type' });
-- 
2.50.0


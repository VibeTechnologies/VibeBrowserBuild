From 2653d79569655a085e684e5e93bdd0d0dfa75a19 Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Tue, 22 Jul 2025 23:05:33 +0300
Subject: [PATCH 18/91] chagpt style sideapnel chat

---
 .../browser/resources/vibe/package-lock.json  | 1120 ++++++++++++++-
 chrome/browser/resources/vibe/package.json    |    5 +
 .../browser/resources/vibe/postcss.config.js  |   12 +
 chrome/browser/resources/vibe/sidepanel.css   |   46 +
 chrome/browser/resources/vibe/sidepanel.html  |  412 +-----
 chrome/browser/resources/vibe/sidepanel.js    | 1209 +++++++++++------
 .../browser/resources/vibe/tailwind.config.js |   61 +
 7 files changed, 2083 insertions(+), 782 deletions(-)
 create mode 100644 chrome/browser/resources/vibe/postcss.config.js
 create mode 100644 chrome/browser/resources/vibe/sidepanel.css
 create mode 100644 chrome/browser/resources/vibe/tailwind.config.js

diff --git a/chrome/browser/resources/vibe/package-lock.json b/chrome/browser/resources/vibe/package-lock.json
index d94c403c9b..caf5d01b4f 100644
--- a/chrome/browser/resources/vibe/package-lock.json
+++ b/chrome/browser/resources/vibe/package-lock.json
@@ -19,13 +19,18 @@
         "zod": "^3.22.4"
       },
       "devDependencies": {
+        "@tailwindcss/typography": "^0.5.16",
         "@types/jest": "^30.0.0",
+        "autoprefixer": "^10.4.21",
         "babel-jest": "^29.7.0",
         "dotenv": "^17.2.0",
         "esbuild": "^0.25.7",
         "jest": "^29.7.0",
         "minimist": "^1.2.8",
+        "postcss": "^8.5.6",
+        "postcss-import": "^16.1.1",
         "puppeteer": "^24.12.1",
+        "tailwindcss": "^3.4.17",
         "ts-jest": "^29.4.0",
         "ts-loader": "^9.5.2",
         "typescript": "^5.8.3",
@@ -33,6 +38,19 @@
         "webpack-cli": "^6.0.1"
       }
     },
+    "node_modules/@alloc/quick-lru": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
+      "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/@ampproject/remapping": {
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
@@ -1220,6 +1238,109 @@
         "url": "https://github.com/sponsors/nzakas"
       }
     },
+    "node_modules/@isaacs/cliui": {
+      "version": "8.0.2",
+      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
+      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "string-width": "^5.1.2",
+        "string-width-cjs": "npm:string-width@^4.2.0",
+        "strip-ansi": "^7.0.1",
+        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
+        "wrap-ansi": "^8.1.0",
+        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@isaacs/cliui/node_modules/ansi-regex": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
+      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
+      }
+    },
+    "node_modules/@isaacs/cliui/node_modules/ansi-styles": {
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
+      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/@isaacs/cliui/node_modules/emoji-regex": {
+      "version": "9.2.2",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
+      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@isaacs/cliui/node_modules/string-width": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
+      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "eastasianwidth": "^0.2.0",
+        "emoji-regex": "^9.2.2",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@isaacs/cliui/node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
+      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
+      }
+    },
+    "node_modules/@isaacs/cliui/node_modules/wrap-ansi": {
+      "version": "8.1.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
+      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^6.1.0",
+        "string-width": "^5.0.1",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
     "node_modules/@istanbuljs/load-nyc-config": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
@@ -2130,6 +2251,55 @@
       "integrity": "sha512-Y28PR25bHXUg88kCV7nivXrP2Nj2RueZ3/l/jdx6J9f8J4nsEGcgX0Qe6lt7Pa+J79+kPiJU3LguR6O/6zrLOw==",
       "license": "BSD-2-Clause"
     },
+    "node_modules/@nodelib/fs.scandir": {
+      "version": "2.1.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
+      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.stat": "2.0.5",
+        "run-parallel": "^1.1.9"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@nodelib/fs.stat": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
+      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@nodelib/fs.walk": {
+      "version": "1.2.8",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
+      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.scandir": "2.1.5",
+        "fastq": "^1.6.0"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@pkgjs/parseargs": {
+      "version": "0.11.0",
+      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
+      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "engines": {
+        "node": ">=14"
+      }
+    },
     "node_modules/@puppeteer/browsers": {
       "version": "2.10.6",
       "resolved": "https://registry.npmjs.org/@puppeteer/browsers/-/browsers-2.10.6.tgz",
@@ -2192,6 +2362,22 @@
         "@sinonjs/commons": "^3.0.0"
       }
     },
+    "node_modules/@tailwindcss/typography": {
+      "version": "0.5.16",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/typography/-/typography-0.5.16.tgz",
+      "integrity": "sha512-0wDLwCVF5V3x3b1SGXPCDcdsbDHMBe+lkFzBRaHeLvNi+nrrnZ1lA18u+OTWO8iSWU2GxUOCvlXtDuqftc1oiA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "lodash.castarray": "^4.4.0",
+        "lodash.isplainobject": "^4.0.6",
+        "lodash.merge": "^4.6.2",
+        "postcss-selector-parser": "6.0.10"
+      },
+      "peerDependencies": {
+        "tailwindcss": ">=3.0.0 || insiders || >=4.0.0-alpha.20 || >=4.0.0-beta.1"
+      }
+    },
     "node_modules/@tootallnate/quickjs-emscripten": {
       "version": "0.23.0",
       "resolved": "https://registry.npmjs.org/@tootallnate/quickjs-emscripten/-/quickjs-emscripten-0.23.0.tgz",
@@ -2745,6 +2931,13 @@
         "url": "https://github.com/chalk/ansi-styles?sponsor=1"
       }
     },
+    "node_modules/any-promise": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
+      "integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/anymatch": {
       "version": "3.1.3",
       "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
@@ -2759,6 +2952,13 @@
         "node": ">= 8"
       }
     },
+    "node_modules/arg": {
+      "version": "5.0.2",
+      "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
+      "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/argparse": {
       "version": "1.0.10",
       "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
@@ -2789,6 +2989,44 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/autoprefixer": {
+      "version": "10.4.21",
+      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.21.tgz",
+      "integrity": "sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "browserslist": "^4.24.4",
+        "caniuse-lite": "^1.0.30001702",
+        "fraction.js": "^4.3.7",
+        "normalize-range": "^0.1.2",
+        "picocolors": "^1.1.1",
+        "postcss-value-parser": "^4.2.0"
+      },
+      "bin": {
+        "autoprefixer": "bin/autoprefixer"
+      },
+      "engines": {
+        "node": "^10 || ^12 || >=14"
+      },
+      "peerDependencies": {
+        "postcss": "^8.1.0"
+      }
+    },
     "node_modules/b4a": {
       "version": "1.6.7",
       "resolved": "https://registry.npmjs.org/b4a/-/b4a-1.6.7.tgz",
@@ -3008,6 +3246,19 @@
         "node": ">=10.0.0"
       }
     },
+    "node_modules/binary-extensions": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
+      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/brace-expansion": {
       "version": "1.1.12",
       "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
@@ -3125,6 +3376,16 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/camelcase-css": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
+      "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
     "node_modules/caniuse-lite": {
       "version": "1.0.30001727",
       "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001727.tgz",
@@ -3187,6 +3448,44 @@
         "node": ">=10"
       }
     },
+    "node_modules/chokidar": {
+      "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
+      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "anymatch": "~3.1.2",
+        "braces": "~3.0.2",
+        "glob-parent": "~5.1.2",
+        "is-binary-path": "~2.1.0",
+        "is-glob": "~4.0.1",
+        "normalize-path": "~3.0.0",
+        "readdirp": "~3.6.0"
+      },
+      "engines": {
+        "node": ">= 8.10.0"
+      },
+      "funding": {
+        "url": "https://paulmillr.com/funding/"
+      },
+      "optionalDependencies": {
+        "fsevents": "~2.3.2"
+      }
+    },
+    "node_modules/chokidar/node_modules/glob-parent": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
     "node_modules/chrome-trace-event": {
       "version": "1.0.4",
       "resolved": "https://registry.npmjs.org/chrome-trace-event/-/chrome-trace-event-1.0.4.tgz",
@@ -3419,6 +3718,19 @@
         "node": ">= 8"
       }
     },
+    "node_modules/cssesc": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
+      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "cssesc": "bin/cssesc"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
     "node_modules/data-uri-to-buffer": {
       "version": "6.0.2",
       "resolved": "https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-6.0.2.tgz",
@@ -3518,6 +3830,13 @@
       "dev": true,
       "license": "BSD-3-Clause"
     },
+    "node_modules/didyoumean": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
+      "integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
+      "dev": true,
+      "license": "Apache-2.0"
+    },
     "node_modules/diff-sequences": {
       "version": "29.6.3",
       "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.6.3.tgz",
@@ -3528,6 +3847,13 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
+    "node_modules/dlv": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
+      "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/dotenv": {
       "version": "17.2.0",
       "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-17.2.0.tgz",
@@ -3541,6 +3867,13 @@
         "url": "https://dotenvx.com"
       }
     },
+    "node_modules/eastasianwidth": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
+      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/ejs": {
       "version": "3.1.10",
       "resolved": "https://registry.npmjs.org/ejs/-/ejs-3.1.10.tgz",
@@ -4144,6 +4477,36 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/fast-glob": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
+      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.stat": "^2.0.2",
+        "@nodelib/fs.walk": "^1.2.3",
+        "glob-parent": "^5.1.2",
+        "merge2": "^1.3.0",
+        "micromatch": "^4.0.8"
+      },
+      "engines": {
+        "node": ">=8.6.0"
+      }
+    },
+    "node_modules/fast-glob/node_modules/glob-parent": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
     "node_modules/fast-json-stable-stringify": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
@@ -4183,6 +4546,16 @@
         "node": ">= 4.9.1"
       }
     },
+    "node_modules/fastq": {
+      "version": "1.19.1",
+      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
+      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "reusify": "^1.0.4"
+      }
+    },
     "node_modules/fb-watchman": {
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
@@ -4304,6 +4677,50 @@
       "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
       "license": "ISC"
     },
+    "node_modules/foreground-child": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
+      "integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "cross-spawn": "^7.0.6",
+        "signal-exit": "^4.0.1"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/foreground-child/node_modules/signal-exit": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
+      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
+      "dev": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/fraction.js": {
+      "version": "4.3.7",
+      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
+      "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "type": "patreon",
+        "url": "https://github.com/sponsors/rawify"
+      }
+    },
     "node_modules/fs.realpath": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
@@ -4641,14 +5058,27 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/is-core-module": {
-      "version": "2.16.1",
-      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
-      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
+    "node_modules/is-binary-path": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
+      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "hasown": "^2.0.2"
+        "binary-extensions": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/is-core-module": {
+      "version": "2.16.1",
+      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
+      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "hasown": "^2.0.2"
       },
       "engines": {
         "node": ">= 0.4"
@@ -4821,6 +5251,22 @@
         "node": ">=8"
       }
     },
+    "node_modules/jackspeak": {
+      "version": "3.4.3",
+      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
+      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
+      "dev": true,
+      "license": "BlueOak-1.0.0",
+      "dependencies": {
+        "@isaacs/cliui": "^8.0.2"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      },
+      "optionalDependencies": {
+        "@pkgjs/parseargs": "^0.11.0"
+      }
+    },
     "node_modules/jake": {
       "version": "10.9.2",
       "resolved": "https://registry.npmjs.org/jake/-/jake-10.9.2.tgz",
@@ -5876,6 +6322,16 @@
         "url": "https://github.com/chalk/supports-color?sponsor=1"
       }
     },
+    "node_modules/jiti": {
+      "version": "1.21.7",
+      "resolved": "https://registry.npmjs.org/jiti/-/jiti-1.21.7.tgz",
+      "integrity": "sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==",
+      "devOptional": true,
+      "license": "MIT",
+      "bin": {
+        "jiti": "bin/jiti.js"
+      }
+    },
     "node_modules/js-tiktoken": {
       "version": "1.0.20",
       "resolved": "https://registry.npmjs.org/js-tiktoken/-/js-tiktoken-1.0.20.tgz",
@@ -6185,6 +6641,19 @@
         "node": ">= 0.8.0"
       }
     },
+    "node_modules/lilconfig": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.3.tgz",
+      "integrity": "sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/antonk52"
+      }
+    },
     "node_modules/lines-and-columns": {
       "version": "1.2.4",
       "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
@@ -6215,6 +6684,20 @@
         "node": ">=8"
       }
     },
+    "node_modules/lodash.castarray": {
+      "version": "4.4.0",
+      "resolved": "https://registry.npmjs.org/lodash.castarray/-/lodash.castarray-4.4.0.tgz",
+      "integrity": "sha512-aVx8ztPv7/2ULbArGJ2Y42bG1mEQ5mGjpdvrbJcJFU3TbYybe+QlLS4pst9zV52ymy2in1KpFPiZnAOATxD4+Q==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/lodash.isplainobject": {
+      "version": "4.0.6",
+      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
+      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/lodash.memoize": {
       "version": "4.1.2",
       "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
@@ -6291,6 +6774,16 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/merge2": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
+      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 8"
+      }
+    },
     "node_modules/micromatch": {
       "version": "4.0.8",
       "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
@@ -6360,6 +6853,16 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/minipass": {
+      "version": "7.1.2",
+      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
+      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
+      "dev": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
     "node_modules/mitt": {
       "version": "3.0.1",
       "resolved": "https://registry.npmjs.org/mitt/-/mitt-3.0.1.tgz",
@@ -6382,6 +6885,37 @@
         "mustache": "bin/mustache"
       }
     },
+    "node_modules/mz": {
+      "version": "2.7.0",
+      "resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
+      "integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "any-promise": "^1.0.0",
+        "object-assign": "^4.0.1",
+        "thenify-all": "^1.0.0"
+      }
+    },
+    "node_modules/nanoid": {
+      "version": "3.3.11",
+      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
+      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "bin": {
+        "nanoid": "bin/nanoid.cjs"
+      },
+      "engines": {
+        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
+      }
+    },
     "node_modules/natural-compare": {
       "version": "1.4.0",
       "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
@@ -6429,6 +6963,16 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/normalize-range": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
+      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
     "node_modules/npm-run-path": {
       "version": "4.0.1",
       "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
@@ -6442,6 +6986,26 @@
         "node": ">=8"
       }
     },
+    "node_modules/object-assign": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
+      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/object-hash": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
+      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
     "node_modules/once": {
       "version": "1.4.0",
       "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
@@ -6650,6 +7214,13 @@
         "node": ">= 14"
       }
     },
+    "node_modules/package-json-from-dist": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
+      "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
+      "dev": true,
+      "license": "BlueOak-1.0.0"
+    },
     "node_modules/parent-module": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
@@ -6716,6 +7287,30 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/path-scurry": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
+      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
+      "dev": true,
+      "license": "BlueOak-1.0.0",
+      "dependencies": {
+        "lru-cache": "^10.2.0",
+        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/path-scurry/node_modules/lru-cache": {
+      "version": "10.4.3",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
+      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
+      "dev": true,
+      "license": "ISC"
+    },
     "node_modules/pend": {
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/pend/-/pend-1.2.0.tgz",
@@ -6743,6 +7338,16 @@
         "url": "https://github.com/sponsors/jonschlinkert"
       }
     },
+    "node_modules/pify": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
+      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
     "node_modules/pirates": {
       "version": "4.0.7",
       "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.7.tgz",
@@ -6766,6 +7371,170 @@
         "node": ">=8"
       }
     },
+    "node_modules/postcss": {
+      "version": "8.5.6",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
+      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/postcss"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "nanoid": "^3.3.11",
+        "picocolors": "^1.1.1",
+        "source-map-js": "^1.2.1"
+      },
+      "engines": {
+        "node": "^10 || ^12 || >=14"
+      }
+    },
+    "node_modules/postcss-import": {
+      "version": "16.1.1",
+      "resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-16.1.1.tgz",
+      "integrity": "sha512-2xVS1NCZAfjtVdvXiyegxzJ447GyqCeEI5V7ApgQVOWnros1p5lGNovJNapwPpMombyFBfqDwt7AD3n2l0KOfQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "postcss-value-parser": "^4.0.0",
+        "read-cache": "^1.0.0",
+        "resolve": "^1.1.7"
+      },
+      "engines": {
+        "node": ">=18.0.0"
+      },
+      "peerDependencies": {
+        "postcss": "^8.0.0"
+      }
+    },
+    "node_modules/postcss-js": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.1.tgz",
+      "integrity": "sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "camelcase-css": "^2.0.1"
+      },
+      "engines": {
+        "node": "^12 || ^14 || >= 16"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/postcss/"
+      },
+      "peerDependencies": {
+        "postcss": "^8.4.21"
+      }
+    },
+    "node_modules/postcss-load-config": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-4.0.2.tgz",
+      "integrity": "sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "lilconfig": "^3.0.0",
+        "yaml": "^2.3.4"
+      },
+      "engines": {
+        "node": ">= 14"
+      },
+      "peerDependencies": {
+        "postcss": ">=8.0.9",
+        "ts-node": ">=9.0.0"
+      },
+      "peerDependenciesMeta": {
+        "postcss": {
+          "optional": true
+        },
+        "ts-node": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/postcss-nested": {
+      "version": "6.2.0",
+      "resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-6.2.0.tgz",
+      "integrity": "sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "postcss-selector-parser": "^6.1.1"
+      },
+      "engines": {
+        "node": ">=12.0"
+      },
+      "peerDependencies": {
+        "postcss": "^8.2.14"
+      }
+    },
+    "node_modules/postcss-nested/node_modules/postcss-selector-parser": {
+      "version": "6.1.2",
+      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
+      "integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "cssesc": "^3.0.0",
+        "util-deprecate": "^1.0.2"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/postcss-selector-parser": {
+      "version": "6.0.10",
+      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.0.10.tgz",
+      "integrity": "sha512-IQ7TZdoaqbT+LCpShg46jnZVlhWD2w6iQYAcYXfHARZ7X1t/UGhhceQDs5X0cGqKvYlHNOuv7Oa1xmb0oQuA3w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "cssesc": "^3.0.0",
+        "util-deprecate": "^1.0.2"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/postcss-value-parser": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
+      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/prelude-ls": {
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
@@ -6948,6 +7717,27 @@
       ],
       "license": "MIT"
     },
+    "node_modules/queue-microtask": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
+      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT"
+    },
     "node_modules/randombytes": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz",
@@ -6965,6 +7755,29 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/read-cache": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
+      "integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "pify": "^2.3.0"
+      }
+    },
+    "node_modules/readdirp": {
+      "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
+      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "picomatch": "^2.2.1"
+      },
+      "engines": {
+        "node": ">=8.10.0"
+      }
+    },
     "node_modules/rechoir": {
       "version": "0.8.0",
       "resolved": "https://registry.npmjs.org/rechoir/-/rechoir-0.8.0.tgz",
@@ -7061,6 +7874,41 @@
         "node": ">= 4"
       }
     },
+    "node_modules/reusify": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
+      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "iojs": ">=1.0.0",
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/run-parallel": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
+      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "queue-microtask": "^1.2.2"
+      }
+    },
     "node_modules/safe-buffer": {
       "version": "5.2.1",
       "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
@@ -7274,6 +8122,16 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/source-map-js": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
+      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
     "node_modules/source-map-support": {
       "version": "0.5.13",
       "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
@@ -7358,6 +8216,22 @@
         "node": ">=8"
       }
     },
+    "node_modules/string-width-cjs": {
+      "name": "string-width",
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
+      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/strip-ansi": {
       "version": "6.0.1",
       "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
@@ -7371,6 +8245,20 @@
         "node": ">=8"
       }
     },
+    "node_modules/strip-ansi-cjs": {
+      "name": "strip-ansi",
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/strip-bom": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
@@ -7403,6 +8291,86 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/sucrase": {
+      "version": "3.35.0",
+      "resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
+      "integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/gen-mapping": "^0.3.2",
+        "commander": "^4.0.0",
+        "glob": "^10.3.10",
+        "lines-and-columns": "^1.1.6",
+        "mz": "^2.7.0",
+        "pirates": "^4.0.1",
+        "ts-interface-checker": "^0.1.9"
+      },
+      "bin": {
+        "sucrase": "bin/sucrase",
+        "sucrase-node": "bin/sucrase-node"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
+    "node_modules/sucrase/node_modules/brace-expansion": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
+      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0"
+      }
+    },
+    "node_modules/sucrase/node_modules/commander": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
+      "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/sucrase/node_modules/glob": {
+      "version": "10.4.5",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
+      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "foreground-child": "^3.1.0",
+        "jackspeak": "^3.1.2",
+        "minimatch": "^9.0.4",
+        "minipass": "^7.1.2",
+        "package-json-from-dist": "^1.0.0",
+        "path-scurry": "^1.11.1"
+      },
+      "bin": {
+        "glob": "dist/esm/bin.mjs"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/sucrase/node_modules/minimatch": {
+      "version": "9.0.5",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
+      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
     "node_modules/supports-color": {
       "version": "7.2.0",
       "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
@@ -7428,6 +8396,76 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/tailwindcss": {
+      "version": "3.4.17",
+      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.4.17.tgz",
+      "integrity": "sha512-w33E2aCvSDP0tW9RZuNXadXlkHXqFzSkQew/aIa2i/Sj8fThxwovwlXHSPXTbAHwEIhBFXAedUhP2tueAKP8Og==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@alloc/quick-lru": "^5.2.0",
+        "arg": "^5.0.2",
+        "chokidar": "^3.6.0",
+        "didyoumean": "^1.2.2",
+        "dlv": "^1.1.3",
+        "fast-glob": "^3.3.2",
+        "glob-parent": "^6.0.2",
+        "is-glob": "^4.0.3",
+        "jiti": "^1.21.6",
+        "lilconfig": "^3.1.3",
+        "micromatch": "^4.0.8",
+        "normalize-path": "^3.0.0",
+        "object-hash": "^3.0.0",
+        "picocolors": "^1.1.1",
+        "postcss": "^8.4.47",
+        "postcss-import": "^15.1.0",
+        "postcss-js": "^4.0.1",
+        "postcss-load-config": "^4.0.2",
+        "postcss-nested": "^6.2.0",
+        "postcss-selector-parser": "^6.1.2",
+        "resolve": "^1.22.8",
+        "sucrase": "^3.35.0"
+      },
+      "bin": {
+        "tailwind": "lib/cli.js",
+        "tailwindcss": "lib/cli.js"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
+    "node_modules/tailwindcss/node_modules/postcss-import": {
+      "version": "15.1.0",
+      "resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-15.1.0.tgz",
+      "integrity": "sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "postcss-value-parser": "^4.0.0",
+        "read-cache": "^1.0.0",
+        "resolve": "^1.1.7"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      },
+      "peerDependencies": {
+        "postcss": "^8.0.0"
+      }
+    },
+    "node_modules/tailwindcss/node_modules/postcss-selector-parser": {
+      "version": "6.1.2",
+      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
+      "integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "cssesc": "^3.0.0",
+        "util-deprecate": "^1.0.2"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
     "node_modules/tapable": {
       "version": "2.2.2",
       "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.2.tgz",
@@ -7586,6 +8624,29 @@
         "b4a": "^1.6.4"
       }
     },
+    "node_modules/thenify": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
+      "integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "any-promise": "^1.0.0"
+      }
+    },
+    "node_modules/thenify-all": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
+      "integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "thenify": ">= 3.1.0 < 4"
+      },
+      "engines": {
+        "node": ">=0.8"
+      }
+    },
     "node_modules/tmpl": {
       "version": "1.0.5",
       "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
@@ -7606,6 +8667,13 @@
         "node": ">=8.0"
       }
     },
+    "node_modules/ts-interface-checker": {
+      "version": "0.1.13",
+      "resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
+      "integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==",
+      "dev": true,
+      "license": "Apache-2.0"
+    },
     "node_modules/ts-jest": {
       "version": "29.4.0",
       "resolved": "https://registry.npmjs.org/ts-jest/-/ts-jest-29.4.0.tgz",
@@ -7848,6 +8916,13 @@
         "punycode": "^2.1.0"
       }
     },
+    "node_modules/util-deprecate": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
+      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/uuid": {
       "version": "10.0.0",
       "resolved": "https://registry.npmjs.org/uuid/-/uuid-10.0.0.tgz",
@@ -8100,6 +9175,41 @@
         "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
       }
     },
+    "node_modules/wrap-ansi-cjs": {
+      "name": "wrap-ansi",
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
+      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
     "node_modules/wrap-ansi/node_modules/ansi-styles": {
       "version": "4.3.0",
       "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
diff --git a/chrome/browser/resources/vibe/package.json b/chrome/browser/resources/vibe/package.json
index 28e6c2d6f7..4e1303d862 100644
--- a/chrome/browser/resources/vibe/package.json
+++ b/chrome/browser/resources/vibe/package.json
@@ -25,13 +25,18 @@
     "zod": "^3.22.4"
   },
   "devDependencies": {
+    "@tailwindcss/typography": "^0.5.16",
     "@types/jest": "^30.0.0",
+    "autoprefixer": "^10.4.21",
     "babel-jest": "^29.7.0",
     "dotenv": "^17.2.0",
     "esbuild": "^0.25.7",
     "jest": "^29.7.0",
     "minimist": "^1.2.8",
+    "postcss": "^8.5.6",
+    "postcss-import": "^16.1.1",
     "puppeteer": "^24.12.1",
+    "tailwindcss": "^3.4.17",
     "ts-jest": "^29.4.0",
     "ts-loader": "^9.5.2",
     "typescript": "^5.8.3",
diff --git a/chrome/browser/resources/vibe/postcss.config.js b/chrome/browser/resources/vibe/postcss.config.js
new file mode 100644
index 0000000000..95434b1a24
--- /dev/null
+++ b/chrome/browser/resources/vibe/postcss.config.js
@@ -0,0 +1,12 @@
+
+import tailwindcss from '@tailwindcss/postcss';
+import autoprefixer from 'autoprefixer';
+import postcssImport from 'postcss-import';
+
+export default {
+  plugins: [
+    postcssImport(),
+    tailwindcss(),
+    autoprefixer(),
+  ],
+};
diff --git a/chrome/browser/resources/vibe/sidepanel.css b/chrome/browser/resources/vibe/sidepanel.css
new file mode 100644
index 0000000000..5232e6305b
--- /dev/null
+++ b/chrome/browser/resources/vibe/sidepanel.css
@@ -0,0 +1,46 @@
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
+
+@layer base {
+  :root {
+    --assistant-bg: #f0f0f0;
+    --user-bg: #ffffff;
+  }
+
+  .dark {
+    --assistant-bg: #444654;
+    --user-bg: #202123;
+  }
+
+  code {
+    font-family: monospace;
+    background-color: #202123;
+    color: white;
+    padding: 0.2rem 0.4rem;
+    border-radius: 0.25rem;
+  }
+}
+
+#loader{ @apply hidden items-center justify-center gap-1;}
+#loader .dot{ @apply w-2 h-2 rounded-full bg-gray-400 dark:bg-gray-500 animate-bounce;}
+#loader .dot:nth-child(2){animation-delay:.2s}
+#loader .dot:nth-child(3){animation-delay:.4s}
+
+::-webkit-scrollbar {
+  width: 6px;
+}
+
+::-webkit-scrollbar-track {
+  background: transparent;
+}
+
+::-webkit-scrollbar-thumb {
+  background: #ccc;
+  border-radius: 3px;
+}
+
+::-webkit-scrollbar-thumb:hover {
+  background: #aaa;
+  width: 12px;
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/sidepanel.html b/chrome/browser/resources/vibe/sidepanel.html
index 5943fbfa62..8cfee7160c 100644
--- a/chrome/browser/resources/vibe/sidepanel.html
+++ b/chrome/browser/resources/vibe/sidepanel.html
@@ -1,5 +1,5 @@
 <!doctype html>
-<html lang="en">
+<html lang="en" class="h-full">
 <head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width,initial-scale=1">
@@ -7,97 +7,8 @@
   <link rel="preconnect" href="https://fonts.googleapis.com">
   <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
   <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
+  <link href="sidepanel.css" rel="stylesheet">
   <style>
-    /* Reset and base styles */
-    html, body {
-      width: 100%;
-      height: 100%;
-      margin: 0;
-      padding: 0;
-      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;
-      background-color: #f9f9fa;
-      color: #202124;
-      overflow: hidden;
-    }
-    
-    /* Dark mode support */
-    @media (prefers-color-scheme: dark), (forced-colors: active) {
-      html, body {
-        background-color: #202124;
-        color: #e8eaed;
-      }
-    }
-    
-    /* Custom dark theme class for more reliable detection */
-    html.dark-theme,
-    html.dark-theme body {
-      background-color: #202124;
-      color: #e8eaed;
-    }
-
-    #root {
-      width: 100%;
-      height: 100%;
-      display: flex;
-      flex-direction: column;
-    }
-
-    /* Header */
-    .header {
-      background: #4285f4;
-      padding: 16px;
-      text-align: center;
-      border-bottom: 1px solid #dadce0;
-      color: white;
-    }
-
-    .header h1 {
-      margin: 0;
-      font-size: 18px;
-      font-weight: 600;
-    }
-
-    .header .subtitle {
-      margin: 4px 0 0 0;
-      font-size: 12px;
-      opacity: 0.9;
-    }
-
-    /* Main content */
-    .main {
-      flex: 1;
-      display: flex;
-      flex-direction: column;
-      overflow: hidden;
-      padding: 0 16px;
-    }
-    
-    @media (prefers-color-scheme: dark), (forced-colors: active) {
-      .main {
-        background-color: #202124;
-      }
-    }
-    
-    html.dark-theme .main {
-      background-color: #202124;
-    }
-
-    /* Chat interface */
-    .chat-container {
-      flex: 1;
-      display: flex;
-      flex-direction: column;
-      padding: 16px;
-      overflow: hidden;
-    }
-
-    .messages {
-      flex: 1;
-      overflow-y: auto;
-      padding: 16px;
-      background: #f8f9fa;
-      border-radius: 8px;
-      border: 1px solid #dadce0;
     }
     
     @media (prefers-color-scheme: dark), (forced-colors: active) {
@@ -221,304 +132,71 @@
     }
 
     .input-area input:focus {
-      border-color: #4285f4;
-      box-shadow: 0 0 0 2px rgba(66, 133, 244, 0.2);
-    }
-    
-    @media (prefers-color-scheme: dark), (forced-colors: active) {
-      .input-area input:focus {
-        border-color: #8ab4f8;
-        box-shadow: 0 0 0 2px rgba(138, 180, 248, 0.2);
-      }
-    }
-    
-    html.dark-theme .input-area input:focus {
-      border-color: #8ab4f8;
-      box-shadow: 0 0 0 2px rgba(138, 180, 248, 0.2);
-    }
-
-    .input-area button {
-      margin-left: 8px;
-      padding: 8px 16px;
-      background-color: #4285f4;
-      color: white;
-      border: none;
-      border-radius: 20px;
-      font-size: 14px;
-      font-weight: 500;
-      cursor: pointer;
-      transition: background-color 0.2s;
-    }
-
-    .input-area button:hover {
-      background-color: #1a73e8;
-    }
-
-    .input-area button#stopButton {
-      background-color: #ea4335;
-    }
-
-    .input-area button#stopButton:hover {
-      background-color: #d33b2c;
-    }
-
-    .input-area button:disabled {
-      background-color: #dadce0;
-      cursor: not-allowed;
-    }
-    
-    @media (prefers-color-scheme: dark), (forced-colors: active) {
-      .input-area button:disabled {
-        background-color: #3c4043;
-        color: #9aa0a6;
-      }
-    }
-    
-    html.dark-theme .input-area button:disabled {
-      background-color: #3c4043;
-      color: #9aa0a6;
-    }
-
-    /* Status indicator */
-    .status {
-      display: flex;
-      justify-content: space-between;
-      align-items: center;
-      padding: 8px 16px;
-      font-size: 12px;
-      color: #5f6368;
-      border-top: 1px solid #dadce0;
-    }
-    
-    @media (prefers-color-scheme: dark) {
-      .status {
-        color: #9aa0a6;
-        border-top-color: #3c4043;
-      }
-    }
-
-    .status-indicator {
-      display: flex;
-      align-items: center;
+      @apply border-blue-500 ring-2 ring-blue-500/20;
     }
 
+    /* Status dot */
     .status-dot {
-      width: 8px;
-      height: 8px;
-      border-radius: 50%;
-      margin-right: 6px;
-      background-color: #34a853; /* Green for ready */
+      @apply w-2 h-2 rounded-full mr-1.5;
     }
 
     .status-dot.processing {
-      background-color: #fbbc05; /* Yellow for processing */
+      @apply bg-yellow-400;
     }
 
     .status-dot.error {
-      background-color: #ea4335; /* Red for error */
+      @apply bg-red-500;
     }
 
-    .version {
-      opacity: 0.7;
+    /* Loader */
+    .loader {
+      @apply flex justify-center items-center gap-1;
     }
-    
-    @media (prefers-color-scheme: dark) {
-      /* Status dots remain the same colors in dark mode for visibility */
+
+    .loader-dot {
+      @apply w-2 h-2 rounded-full bg-green-500;
+      animation: pulse 1s infinite;
     }
 
     @keyframes pulse {
       0%, 100% { opacity: 1; }
       50% { opacity: 0.5; }
     }
-
-    /* Quick actions */
-    .quick-actions {
-      margin-bottom: 16px;
-    }
-
-    .quick-actions h3 {
-      margin: 0 0 8px 0;
-      font-size: 14px;
-      font-weight: 500;
-      color: #5f6368;
-    }
-    
-    @media (prefers-color-scheme: dark) {
-      .quick-actions h3 {
-        color: #9aa0a6;
-      }
-    }
-
-    .quick-action-buttons {
-      display: flex;
-      flex-wrap: wrap;
-      gap: 8px;
-    }
-
-    .quick-action {
-      padding: 8px 12px;
-      background-color: #f1f3f4;
-      border-radius: 16px;
-      font-size: 13px;
-      cursor: pointer;
-      transition: background-color 0.2s;
-      color: #202124;
-    }
-    
-    @media (prefers-color-scheme: dark) {
-      .quick-action {
-        background-color: #3c4043;
-        color: #e8eaed;
-      }
-    }
-
-    .quick-action:hover {
-      background-color: #e8eaed;
-    }
-    
-    @media (prefers-color-scheme: dark) {
-      .quick-action:hover {
-        background-color: #4a4d51;
-      }
-    }
-
-    /* ChatGPT-style suggested actions */
-    .suggested-action {
-      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
-      color: white;
-      border: none;
-      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-      transition: all 0.3s ease;
-    }
-
-    .suggested-action:hover {
-      background: linear-gradient(135deg, #5a67d8 0%, #667eea 100%);
-      transform: translateY(-1px);
-      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
-      border-color: transparent;
-    }
-
-    @media (prefers-color-scheme: dark) {
-      .suggested-action {
-        background: linear-gradient(135deg, #4c51bf 0%, #553c9a 100%);
-      }
-      
-      .suggested-action:hover {
-        background: linear-gradient(135deg, #434190 0%, #4c51bf 100%);
-      }
-    }
-
-    /* Scrollbar styling */
-    ::-webkit-scrollbar {
-      width: 8px;
-    }
-
-    ::-webkit-scrollbar-track {
-      background: #f1f3f4;
-    }
-
-    ::-webkit-scrollbar-thumb {
-      background: #dadce0;
-      border-radius: 4px;
-    }
-
-    ::-webkit-scrollbar-thumb:hover {
-      background: #bdc1c6;
-    }
-    
-    @media (prefers-color-scheme: dark) {
-      ::-webkit-scrollbar-track {
-        background: #292a2d;
-      }
-      
-      ::-webkit-scrollbar-thumb {
-        background: #3c4043;
-      }
-      
-      ::-webkit-scrollbar-thumb:hover {
-        background: #4a4d51;
-      }
-    }
-
-    /* User interaction prompts */
-    .user-input-prompt,
-    .user-options-prompt,
-    .user-confirmation-prompt {
-      display: flex;
-      gap: 8px;
-      margin-top: 10px;
-      padding: 10px;
-      background: #f1f3f4;
-      border-radius: 8px;
-      border: 1px solid #dadce0;
-      align-items: center;
-      flex-wrap: wrap; /* Allow options to wrap */
-    }
-
-    .user-input-prompt input[type="text"] {
-      flex: 1;
-      padding: 8px;
-      border: 1px solid #dadce0;
-      border-radius: 4px;
-      background: #ffffff;
-      color: #202124;
-    }
-
-    .user-input-prompt button,
-    .option-button,
-    .user-confirmation-prompt button {
-      padding: 8px 12px;
-      background: #4285f4;
-      border: none;
-      border-radius: 4px;
-      color: white;
-      cursor: pointer;
-      font-weight: 500;
-      transition: opacity 0.2s;
-    }
-
-    .user-input-prompt button:hover,
-    .option-button:hover,
-    .user-confirmation-prompt button:hover {
-      opacity: 0.9;
-    }
-
-    .option-button {
-      background: #f1f3f4;
-      color: #5f6368;
-      border: 1px solid #dadce0;
-    }
-
-    .option-button:hover {
-      background: #e8eaed;
-      color: #202124;
-    }
-
-    .user-confirmation-prompt button#declineButton {
-      background: #dc3545;
-    }
-
-    .user-confirmation-prompt button#declineButton:hover {
-      background: #c82333;
-    }
   </style>
 </head>
-<body>
-  <div id="root">
-    <!-- Header removed as requested, space maintained -->
-    <div style="height: 16px;"></div>
-    
-    <div class="main">
-      <div class="chat-container">
-        <div class="messages" id="messages">
-          <!-- Welcome message removed as requested -->
+<body class="h-full bg-light-bg dark:bg-dark-bg text-light-text dark:text-dark-text transition-colors duration-200">
+  <div id="root" class="h-full flex flex-col">
+    <!-- Main chat area -->
+    <div class="flex-1 overflow-hidden flex flex-col">
+      <!-- Messages container -->
+      <div id="messages" class="scroll-container flex-1 overflow-y-auto">
+        <div class="messages-container">
+          <!-- Messages will be inserted here by JavaScript -->
         </div>
-        
+      </div>
+
+      <!-- Quick actions (suggested messages) -->
+      <div id="quickActions" class="quick-actions">
+        <!-- Quick action buttons will be inserted here by JavaScript -->
+      </div>
+
+      <!-- Input area -->
+      <div class="input-container">
         <div class="input-area">
-          <input 
-            type="text" 
-            id="messageInput" 
-            placeholder="Type your command... (e.g., 'summarize this page')"
+          <textarea
+            id="messageInput"
+            class="message-input"
+            placeholder="Message Vibe AI..."
+            rows="1"
+            spellcheck="true"
+          ></textarea>
+          <button id="sendButton" class="send-button" disabled>
+            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
+              <line x1="22" y1="2" x2="11" y2="13"></line>
+              <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
+            </svg>
+          </button>
+
             autocomplete="off"
           >
           <button id="sendButton">Send</button>
diff --git a/chrome/browser/resources/vibe/sidepanel.js b/chrome/browser/resources/vibe/sidepanel.js
index bac17f2698..8837b8f2b9 100644
--- a/chrome/browser/resources/vibe/sidepanel.js
+++ b/chrome/browser/resources/vibe/sidepanel.js
@@ -7,17 +7,27 @@
 
 class VibeAISidePanel {
   constructor() {
-    this.messages = document.getElementById("messages");
+    // Main containers
+    this.messagesContainer = document.querySelector(".messages-container");
     this.messageInput = document.getElementById("messageInput");
     this.sendButton = document.getElementById("sendButton");
     this.stopButton = document.getElementById("stopButton");
-    this.statusDot = document.getElementById("statusDot");
     this.statusText = document.getElementById("statusText");
-    this.quickActions = document.querySelector(".quick-actions");
+    this.quickActionsContainer = document.getElementById("quickActions");
+    this.themeToggle = document.getElementById("themeToggle");
+    this.themeIcon = document.getElementById("themeIcon");
     
+    // State
     this.isProcessing = false;
     this.messageHistory = [];
     this.currentOperationId = null;
+    this.pendingQuestionRequest = null;
+    this.isDarkMode = false;
+    
+    // Templates
+    this.messageTemplate = document.getElementById("messageTemplate").content;
+    this.loaderTemplate = document.getElementById("loaderTemplate").content;
+    this.quickActionTemplate = document.getElementById("quickActionTemplate").content;
     
     this.initialize();
   }
@@ -25,24 +35,14 @@ class VibeAISidePanel {
   initialize() {
     console.log("🚀 [SIDE-PANEL] [sidepanel.js] Initializing Vibe AI Side Panel...");
     
-    // Event listeners
-    this.sendButton.addEventListener("click", () => this.sendMessage());
-    this.stopButton.addEventListener("click", () => this.stopProcessing());
-    this.messageInput.addEventListener("keypress", (e) => {
-      if (e.key === "Enter" && !e.shiftKey) {
-        e.preventDefault();
-        this.sendMessage();
-      }
-    });
+    // Initialize event listeners
+    this.initializeEventListeners();
     
-    // Quick action buttons
-    document.querySelectorAll(".quick-action").forEach(button => {
-      button.addEventListener("click", () => {
-        const command = button.getAttribute("data-command");
-        this.messageInput.value = command;
-        this.sendMessage();
-      });
-    });
+    // Set up dark mode
+    this.setupDarkMode();
+    
+    // Set up message input auto-resize
+    this.setupMessageInput();
     
     // Listen for messages from background script
     chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
@@ -53,71 +53,178 @@ class VibeAISidePanel {
       return result; // Keep channel open if needed
     });
     
-    // Detect dark mode
-    this.detectDarkMode();
-    
     // Update status
     this.updateStatus("ready", "Ready");
     
-    // Listen for keyboard shortcuts
+    // Load any existing messages from storage
+    this.loadMessages();
+    
+    console.log("✅ [SIDE-PANEL] [sidepanel.js] Vibe AI Side Panel initialized");
+  }
+  
+  initializeEventListeners() {
+    // Send message on button click or Enter key (but allow Shift+Enter for new lines)
+    this.sendButton.addEventListener("click", () => this.sendMessage());
+    this.messageInput.addEventListener("keydown", (e) => {
+      if (e.key === "Enter" && !e.shiftKey) {
+        e.preventDefault();
+        this.sendMessage();
+      }
+    });
+    
+    // Stop button
+    if (this.stopButton) {
+      this.stopButton.addEventListener("click", () => this.stopProcessing());
+    }
+    
+    // Theme toggle
+    if (this.themeToggle) {
+      this.themeToggle.addEventListener("click", () => this.toggleDarkMode());
+    }
+    
+    // Keyboard shortcut: Cmd/Ctrl + E to focus input
     document.addEventListener("keydown", (e) => {
       if ((e.ctrlKey || e.metaKey) && e.key === "e") {
         e.preventDefault();
         this.messageInput.focus();
       }
     });
+  }
+  
+  setupMessageInput() {
+    // Auto-resize textarea as user types
+    this.messageInput.addEventListener('input', () => {
+      this.messageInput.style.height = 'auto';
+      this.messageInput.style.height = Math.min(this.messageInput.scrollHeight, 200) + 'px';
+    });
     
-    // Check initial status
-    this.updateStatus();
+    // Focus the input when the panel is opened
+    this.messageInput.focus();
+  }
+  
+  setupDarkMode() {
+    // Check for saved preference or system preference
+    const savedTheme = localStorage.getItem('vibe-theme');
+    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
     
-    console.log("✅ [SIDE-PANEL] [sidepanel.js] Vibe AI Side Panel initialized");
+    if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
+      this.enableDarkMode();
+    } else {
+      this.disableDarkMode();
+    }
+  }
+  
+  toggleDarkMode() {
+    if (document.documentElement.classList.contains('dark')) {
+      this.disableDarkMode();
+    } else {
+      this.enableDarkMode();
+    }
+  }
+  
+  enableDarkMode() {
+    document.documentElement.classList.add('dark');
+    localStorage.setItem('vibe-theme', 'dark');
+    this.isDarkMode = true;
+    this.updateThemeIcon(true);
   }
   
-  async sendMessage() {
-    const message = this.messageInput.value.trim();
-    if (!message) return;
-    
-    // Check if we have a pending question request
-    if (this.pendingQuestionRequest) {
-      // This is a response to a question from the LLM
-      const { requestId } = this.pendingQuestionRequest;
+  disableDarkMode() {
+    document.documentElement.classList.remove('dark');
+    localStorage.setItem('vibe-theme', 'light');
+    this.isDarkMode = false;
+    this.updateThemeIcon(false);
+  }
+  
+  updateThemeIcon(isDark) {
+    if (!this.themeIcon) return;
+    
+    // Update the icon based on theme
+    if (isDark) {
+      // Moon icon for dark mode
+      this.themeIcon.innerHTML = `
+        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
+      `;
+    } else {
+      // Sun icon for light mode
+      this.themeIcon.innerHTML = `
+        <circle cx="12" cy="12" r="5"></circle>
+        <line x1="12" y1="1" x2="12" y2="3"></line>
+        <line x1="12" y1="21" x2="12" y2="23"></line>
+        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
+        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
+        <line x1="1" y1="12" x2="3" y2="12"></line>
+        <line x1="21" y1="12" x2="23" y2="12"></line>
+        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
+        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
+      `;
+    }
+  }
+  
+  /**
+   * Handles sending a message
+   * @param {string} [customMessage] - Optional custom message to send
+   */
+  async sendMessage(customMessage) {
+    try {
+      const message = customMessage || this.messageInput.value.trim();
+      if (!message) return;
       
-      // Add user message to chat
-      this.addMessage("user", message);
-      this.messageInput.value = "";
+      // Check if we have a pending question request
+      if (this.pendingQuestionRequest) {
+        const response = {
+          requestId: this.pendingQuestionRequest.requestId,
+          response: message,
+          timestamp: new Date().toISOString()
+        };
+        
+        // Add user message to chat
+        this.addMessage('user', message);
+        
+        // Clear input if this was from the input field
+        if (!customMessage) {
+          this.messageInput.value = '';
+          this.messageInput.style.height = 'auto'; // Reset input height
+        }
+        
+        // Send response back to background script
+        await new Promise((resolve) => {
+          chrome.runtime.sendMessage({
+            type: 'USER_QUESTION_RESPONSE',
+            response
+          }, resolve);
+        });
+        
+        // Clear pending question and update status
+        this.pendingQuestionRequest = null;
+        this.updateStatus('Response sent', 'success');
+        return;
+      }
       
-      // Send response back to the extension
-      chrome.runtime.sendMessage({
-        type: 'USER_QUESTION_RESPONSE',
-        requestId: requestId,
-        response: message
-      });
+      // Normal message handling - check if processing
+      if (this.isProcessing) return;
+      
+      // Add user message to chat
+      this.addMessage('user', message);
       
-      // Clear pending request
-      this.pendingQuestionRequest = null;
+      // Clear input if this was from the input field
+      if (!customMessage) {
+        this.messageInput.value = '';
+        this.messageInput.style.height = 'auto'; // Reset input height
+      }
       
-      // Set processing state to lock UI while AI processes the response
+      // Show loading indicator and auto-scroll
       this.setProcessing(true);
+      this.scrollToBottom({ behavior: 'smooth' });
+      
+      // Generate operation ID
+      this.currentOperationId = `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
       
-      return;
-    }
-    
-    // Normal message handling - check if processing
-    if (this.isProcessing) return;
-    
-    // Add user message
-    this.addMessage("user", message);
-    this.messageInput.value = "";
-    
-    // Generate operation ID and set processing state
-    this.currentOperationId = Date.now() + "_" + Math.random().toString(36).substr(2, 9);
-    this.setProcessing(true);
-    
-    try {
       console.log('🔍 [SIDE-PANEL] [sidepanel.js] Checking navigator.vibeBrowser:', !!navigator.vibeBrowser);
-      console.log('🔍 [SIDE-PANEL] [sidepanel.js] Checking processAIPrompt:', !!(navigator.vibeBrowser && navigator.vibeBrowser.processAIPrompt));
+      console.log('🔍 [SIDE-PANEL] [sidepanel.js] Checking processAIPrompt:', !!(navigator.vibeBrowser?.processAIPrompt));
       
-      if (navigator.vibeBrowser && navigator.vibeBrowser.processAIPrompt) {
+      // Try using C++ API if available, otherwise fall back to extension messaging
+      if (navigator.vibeBrowser?.processAIPrompt) {
         // Use the C++ API directly
         console.log('🔧 [SIDE-PANEL] [sidepanel.js] Using C++ API for processing');
         const result = await navigator.vibeBrowser.processAIPrompt(message);
@@ -189,52 +296,279 @@ class VibeAISidePanel {
     // as it will be handled by the message listener
   }
   
-  addMessage(type, content) {
-    const messageDiv = document.createElement("div");
-    messageDiv.className = `message ${type}`;
+  /**
+   * Adds a message to the chat with proper styling
+   * @param {string} type - 'user', 'agent', or 'system'
+   * @param {string} content - The message content (can include markdown)
+   * @param {Object} options - Additional options
+   * @param {boolean} options.isHtml - Whether the content is already HTML
+   * @returns {HTMLElement} The created message element
+   */
+  addMessage(type, content, options = {}) {
+    // Create message element from template
+    const messageEl = document.importNode(this.messageTemplate, true).firstElementChild;
+    const messageContent = messageEl.querySelector('.message-content');
+    const messageContainer = messageEl.querySelector('.message-container');
     
-    if (type === "agent") {
-      messageDiv.innerHTML = this.formatAgentMessage(content);
+    // Set message type classes
+    const isUser = type === 'user';
+    const isSystem = type === 'system';
+    
+    // Base classes for all messages
+    const baseClasses = [
+      'group',
+      'w-full',
+      'py-2',
+      'px-4',
+      'sm:px-6',
+      'relative',
+      'flex',
+      'flex-col'
+    ];
+    
+    // Type-specific classes
+    if (isUser) {
+      messageEl.classList.add('from-user');
+      messageContainer.classList.add(
+        'ml-auto',
+        'max-w-[85%]',
+        'bg-blue-500',
+        'text-white',
+        'rounded-t-2xl',
+        'rounded-bl-2xl',
+        'shadow'
+      );
+    } else if (isSystem) {
+      messageEl.classList.add('system-message');
+      messageContainer.classList.add(
+        'mx-auto',
+        'max-w-[90%]',
+        'bg-gray-100',
+        'dark:bg-gray-800',
+        'text-gray-700',
+        'dark:text-gray-300',
+        'rounded-lg',
+        'py-2',
+        'px-3',
+        'text-sm',
+        'text-center',
+        'shadow-sm'
+      );
     } else {
-      messageDiv.textContent = content;
+      // Assistant message (default)
+      messageEl.classList.add('from-assistant');
+      messageContainer.classList.add(
+        'mr-auto',
+        'max-w-[85%]',
+        'bg-white',
+        'dark:bg-gray-700',
+        'text-gray-800',
+        'dark:text-gray-100',
+        'rounded-t-2xl',
+        'rounded-br-2xl',
+        'shadow',
+        'border',
+        'border-gray-100',
+        'dark:border-gray-600'
+      );
     }
     
-    this.messages.appendChild(messageDiv);
-    this.messages.scrollTop = this.messages.scrollHeight;
+    // Convert markdown to HTML if needed
+    const htmlContent = options.isHtml ? content : this.markdownToHtml(content);
+    messageContent.innerHTML = this.sanitizeHtml(htmlContent);
+    
+    // Style code blocks
+    messageContent.querySelectorAll('pre').forEach(pre => {
+      pre.classList.add('bg-gray-800', 'text-gray-100', 'p-3', 'rounded-lg', 'overflow-x-auto', 'my-2');
+      pre.querySelector('code')?.classList.add('block', 'whitespace-pre', 'font-mono', 'text-sm');
+    });
+    
+    // Style inline code
+    messageContent.querySelectorAll('code:not(pre code)').forEach(code => {
+      code.classList.add('bg-gray-100', 'dark:bg-gray-700', 'px-1', 'py-0.5', 'rounded', 'text-sm', 'font-mono');
+    });
+    
+    // Style links
+    messageContent.querySelectorAll('a').forEach(link => {
+      link.classList.add('text-blue-500', 'hover:underline', 'break-words');
+      link.setAttribute('target', '_blank');
+      link.setAttribute('rel', 'noopener noreferrer');
+    });
+    
+    // Add timestamp
+    const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
+    const timeEl = document.createElement('div');
+    timeEl.className = 'text-xs mt-1 text-gray-500 dark:text-gray-400 self-end';
+    timeEl.textContent = timestamp;
+    messageEl.appendChild(timeEl);
+    
+    // Add to DOM
+    this.messagesContainer.appendChild(messageEl);
+    this.scrollToBottom();
     
-    // Store in history
-    this.messageHistory.push({ type, content, timestamp: Date.now() });
+    // Add to message history
+    this.messageHistory.push({
+      type,
+      content,
+      timestamp: Date.now(),
+      isHtml: options.isHtml || false
+    });
+    
+    // Save messages (debounced)
+    if (this.saveMessagesTimeout) {
+      clearTimeout(this.saveMessagesTimeout);
+    }
+    this.saveMessagesTimeout = setTimeout(() => this.saveMessages(), 1000);
+    
+    return messageEl;
+  }
+  
+  /**
+   * Converts markdown to HTML
+   * @param {string} markdown - Markdown text to convert
+   * @returns {string} HTML string
+   */
+  markdownToHtml(markdown) {
+    // Simple markdown to HTML conversion
+    // In a real app, you might want to use a library like marked.js
+    return markdown
+      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Bold
+      .replace(/\*(.*?)\*/g, '<em>$1</em>') // Italic
+      .replace(/^### (.*$)/gm, '<h3 class="text-lg font-semibold mt-4 mb-2">$1</h3>') // Headers
+      .replace(/^## (.*$)/gm, '<h2 class="text-xl font-bold mt-5 mb-3">$1</h2>')
+      .replace(/^# (.*$)/gm, '<h1 class="text-2xl font-bold mt-6 mb-4">$1</h1>')
+      .replace(/\n/g, '<br>') // Line breaks
+      .replace(/`([^`]+)`/g, '<code class="bg-gray-100 dark:bg-gray-700 px-1 py-0.5 rounded text-sm">$1</code>') // Inline code
+      .replace(/```(?:\w+\n)?([\s\S]*?)```/g, 
+        '<pre class="bg-gray-100 dark:bg-gray-800 p-3 rounded-md overflow-x-auto my-2"><code class="block whitespace-pre">$1</code></pre>') // Code blocks
+      .replace(/\[([^\]]+)\]\(([^)]+)\)/g, 
+        '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-blue-600 dark:text-blue-400 hover:underline">$1</a>'); // Links
+  }
+  
+  /**
+   * Sanitizes HTML to prevent XSS
+   * @param {string} html - HTML to sanitize
+   * @returns {string} Sanitized HTML
+   */
+  sanitizeHtml(html) {
+    const temp = document.createElement('div');
+    temp.textContent = html;
+    return temp.innerHTML;
+  }
+  
+  /**
+   * Shows a loading indicator while waiting for a response
+   * @returns {HTMLElement} The loading element
+   */
+  showLoading() {
+    // If loading indicator already exists, just make it visible
+    if (this.loadingIndicator) {
+      this.loadingIndicator.classList.remove('hidden');
+      return this.loadingIndicator;
+    }
+    
+    // Create loading indicator from template
+    this.loadingIndicator = document.importNode(this.loaderTemplate, true).firstElementChild;
+    
+    // Add to messages container
+    this.messagesContainer.appendChild(this.loadingIndicator);
+    
+    // Scroll to show the loading indicator
+    this.scrollToBottom({ behavior: 'smooth', delay: 100 });
+    
+    return this.loadingIndicator;
   }
   
-  formatAgentMessage(content) {
-    // Basic markdown-like formatting
-    return content
-      .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
-      .replace(/\*(.*?)\*/g, "<em>$1</em>")
-      .replace(/`(.*?)`/g, "<code>$1</code>")
-      .replace(/\n/g, "<br>");
+  /**
+   * Hides the loading indicator with a fade-out effect
+   */
+  hideLoading() {
+    if (!this.loadingIndicator) return;
+    
+    // Add fade-out class and remove after animation completes
+    this.loadingIndicator.classList.add('opacity-0', 'transition-opacity', 'duration-300');
+    
+    // Remove the element after the fade-out animation completes
+    setTimeout(() => {
+      if (this.loadingIndicator && this.loadingIndicator.parentNode) {
+        this.loadingIndicator.parentNode.removeChild(this.loadingIndicator);
+        this.loadingIndicator = null;
+      }
+    }, 300);
   }
   
+  /**
+   * Smoothly scrolls the messages container to the bottom
+   * @param {Object} options - Scroll behavior options
+   * @param {string} options.behavior - Scroll behavior ('smooth' or 'auto')
+   * @param {number} options.delay - Delay in milliseconds before scrolling
+   */
+  scrollToBottom(options = { behavior: 'smooth', delay: 0 }) {
+    if (!this.messagesContainer) return;
+    
+    const scroll = () => {
+      this.messagesContainer.scrollTo({
+        top: this.messagesContainer.scrollHeight,
+        behavior: options.behavior
+      });
+    };
+    
+    if (options.delay > 0) {
+      setTimeout(scroll, options.delay);
+    } else {
+      scroll();
+    }
+    
+    // If we're near the bottom, stay scrolled to bottom when new messages arrive
+    const isNearBottom = 
+      this.messagesContainer.scrollHeight - this.messagesContainer.clientHeight - 
+      this.messagesContainer.scrollTop < 100;
+      
+    if (isNearBottom) {
+      requestAnimationFrame(() => {
+        this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
+      });
+    }
+  }
+  
+  /**
+   * Sets the processing state of the UI
+   * @param {boolean} processing - Whether processing is in progress
+   */
   setProcessing(processing) {
     this.isProcessing = processing;
-    this.sendButton.disabled = processing;
+    
+    // Update input and button states
     this.messageInput.disabled = processing;
+    this.sendButton.disabled = processing;
     
     // Toggle button visibility
-    this.sendButton.style.display = processing ? "none" : "inline-block";
-    this.stopButton.style.display = processing ? "inline-block" : "none";
+    if (this.sendButton) {
+      this.sendButton.classList.toggle('hidden', processing);
+    }
     
-    // Hide/show quick actions based on processing state
-    this.quickActions.style.display = processing ? "none" : "block";
+    if (this.stopButton) {
+      this.stopButton.classList.toggle('hidden', !processing);
+    }
     
+    // Show/hide quick actions
+    if (this.quickActionsContainer) {
+      this.quickActionsContainer.classList.toggle('hidden', processing);
+    }
+    
+    // Update status and show loading indicator
     if (processing) {
-      this.addMessage("system", "🤖 Processing your request...");
-      this.updateStatus("processing", "Processing...");
+      this.showLoading();
+      this.updateStatus("processing", "Thinking...");
     } else {
+      this.hideLoading();
       this.updateStatus("ready", "Ready");
     }
   }
 
+  /**
+   * Stops the current processing operation
+   */
   stopProcessing() {
     console.log("🛑 [SIDE-PANEL] [sidepanel.js] Stop button clicked");
     
@@ -256,358 +590,421 @@ class VibeAISidePanel {
     this.currentOperationId = null;
   }
   
-  updateStatus(state = "ready", text = "Ready") {
-    this.statusDot.className = `status-dot ${state === "ready" ? "" : state}`;
-    this.statusText.textContent = text;
+  /**
+   * Updates the status indicator with visual feedback
+   * @param {string} status - The status message to display
+   * @param {string} [type='info'] - Status type: 'info', 'success', 'warning', 'error', or 'processing'
+   * @param {Object} [options] - Additional options
+   * @param {number} [options.timeout=3000] - Auto-hide timeout in ms (0 to disable)
+   * @param {boolean} [options.showDot=true] - Whether to show the status dot
+   */
+  updateStatus(status, type = 'info', options = {}) {
+    if (!this.statusIndicator) return;
+    
+    const {
+      timeout = type === 'info' ? 3000 : 0,
+      showDot = true
+    } = options;
+    
+    // Update status text
+    const statusText = this.statusIndicator.querySelector('.status-text');
+    if (statusText) {
+      statusText.textContent = status || '';
+      const statusTextClass = type === 'error' ? 'text-red-600 dark:text-red-400' :
+        type === 'warning' ? 'text-yellow-600 dark:text-yellow-400' :
+        type === 'success' ? 'text-green-600 dark:text-green-400' :
+        'text-gray-600 dark:text-gray-400';
+      statusText.className = `status-text text-xs font-medium ${statusTextClass} transition-colors duration-200`;
+    }
+    
+    // Update status dot if enabled
+    if (showDot) {
+      const statusDot = this.statusIndicator.querySelector('.status-dot');
+      if (statusDot) {
+        // Remove all status classes
+        const classesToRemove = [
+          'bg-green-500', 'bg-yellow-500', 'bg-red-500', 'bg-blue-500', 'bg-gray-400',
+          'ring-2', 'ring-offset-2', 'ring-green-500', 'ring-yellow-500', 'ring-red-500', 
+          'ring-blue-500', 'ring-gray-400', 'animate-pulse', 'pulse'
+        ];
+        statusDot.classList.remove(...classesToRemove);
+        
+        // Add appropriate classes based on status type
+        const dotClasses = ['w-2', 'h-2', 'rounded-full', 'transition-all', 'duration-300'];
+        
+        switch (type) {
+          case 'success':
+            dotClasses.push('bg-green-500', 'ring-2', 'ring-green-500/50');
+            break;
+          case 'warning':
+            dotClasses.push('bg-yellow-500', 'ring-2', 'ring-yellow-500/50', 'animate-pulse');
+            break;
+          case 'error':
+            dotClasses.push('bg-red-500', 'ring-2', 'ring-red-500/50', 'pulse');
+            break;
+          case 'processing':
+            dotClasses.push('bg-blue-500', 'ring-2', 'ring-blue-500/50', 'pulse');
+            break;
+          default: // info
+            dotClasses.push('bg-gray-400');
+        }
+        
+        statusDot.className = `status-dot ${dotClasses.join(' ')}`;
+      }
+    }
+    
+    // Show status indicator with animation
+    this.statusIndicator.classList.remove('opacity-0', 'invisible');
+    this.statusIndicator.classList.add('opacity-100', 'transition-opacity', 'duration-200');
+    
+    // Auto-hide after delay if specified
+    if (timeout > 0) {
+      clearTimeout(this.statusTimeout);
+      this.statusTimeout = setTimeout(() => {
+        if (this.statusIndicator) {
+          this.statusIndicator.classList.add('opacity-0');
+          this.statusIndicator.classList.remove('opacity-100');
+          
+          // Hide completely after fade out
+          setTimeout(() => {
+            if (this.statusIndicator) {
+              this.statusIndicator.classList.add('invisible');
+            }
+          }, 200);
+        }
+      }, timeout);
+    }
+  }
+
+  /**
+   * Loads messages from storage
+   */
+  async loadMessages() {
+    try {
+      // Try to load messages from chrome.storage.local
+      const result = await new Promise((resolve) => {
+        chrome.storage.local.get(['vibe_chat_history'], resolve);
+      });
+      
+      if (result && result.vibe_chat_history) {
+        this.messageHistory = result.vibe_chat_history;
+        
+        // Clear existing messages
+        this.messagesContainer.innerHTML = '';
+        
+        // Add each message to the UI
+        this.messageHistory.forEach(msg => {
+          this.addMessage(msg.type, msg.content, { 
+            isHtml: msg.isHtml || false 
+          });
+        });
+        
+        console.log('📝 [SIDE-PANEL] [sidepanel.js] Loaded', this.messageHistory.length, 'messages from storage');
+      }
+    } catch (error) {
+      console.error('❌ [SIDE-PANEL] [sidepanel.js] Error loading messages:', error);
+    }
+  }
+  
+  /**
+   * Saves messages to storage
+   */
+  async saveMessages() {
+    try {
+      // Only keep the last 100 messages to prevent storage issues
+      const messagesToSave = this.messageHistory.slice(-100);
+      
+      await new Promise((resolve) => {
+        chrome.storage.local.set({ vibe_chat_history: messagesToSave }, resolve);
+      });
+      
+      console.log('💾 [SIDE-PANEL] [sidepanel.js] Saved', messagesToSave.length, 'messages to storage');
+    } catch (error) {
+      console.error('❌ [SIDE-PANEL] [sidepanel.js] Error saving messages:', error);
+    }
   }
 
+  /**
+   * Updates the quick action suggestions
+   * @param {Array} suggestions - Array of suggestion objects with text and optional command
+   */
   updateSuggestions(suggestions) {
+    if (!this.quickActionsContainer) return;
+    
     console.log("💡 [SIDE-PANEL] [sidepanel.js] Updating suggestions:", suggestions);
     
+    // Clear existing suggestions
+    this.quickActionsContainer.innerHTML = '';
+    
     if (!suggestions || suggestions.length === 0) {
       // Hide suggestions if empty
-      this.quickActions.style.display = "none";
+      this.quickActionsContainer.classList.add('hidden');
       return;
     }
-
-    // Update the title
-    const title = this.quickActions.querySelector("h3");
-    title.textContent = "Suggested Actions";
-
-    // Update the buttons container
-    const buttonsContainer = this.quickActions.querySelector(".quick-action-buttons");
-    buttonsContainer.innerHTML = "";
-
-    suggestions.forEach((suggestion, index) => {
-      const button = document.createElement("div");
-      button.className = "quick-action suggested-action";
-      button.setAttribute("data-command", suggestion.command || suggestion);
+    
+    // Create title
+    const title = document.createElement('h3');
+    title.className = 'text-sm font-medium text-gray-500 dark:text-gray-400 mb-2';
+    title.textContent = 'Suggested Actions';
+    this.quickActionsContainer.appendChild(title);
+    
+    // Create buttons container
+    const buttonsContainer = document.createElement('div');
+    buttonsContainer.className = 'flex flex-wrap gap-2';
+    
+    // Add each suggestion as a button
+    suggestions.forEach(suggestion => {
+      const button = document.createElement('button');
+      button.className = 'px-3 py-1.5 text-sm font-medium rounded-full bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors';
       
-      // Use suggestion text or command as display text
-      const displayText = suggestion.text || suggestion.command || suggestion;
-      button.textContent = displayText;
+      // Set button text and click handler
+      button.textContent = typeof suggestion === 'object' ? (suggestion.text || suggestion.command) : suggestion;
       
-      // Add click handler
-      button.addEventListener("click", () => {
-        this.messageInput.value = suggestion.command || suggestion;
+      button.addEventListener('click', () => {
+        const command = typeof suggestion === 'object' ? (suggestion.command || suggestion.text) : suggestion;
+        this.messageInput.value = command;
         this.sendMessage();
       });
       
+      // Add icon if provided
+      if (suggestion.icon) {
+        const icon = document.createElement('span');
+        icon.className = `mr-2 ${suggestion.icon}`;
+        button.prepend(icon);
+      }
+      
       buttonsContainer.appendChild(button);
     });
-
-    // Show suggestions if not processing
-    if (!this.isProcessing) {
-      this.quickActions.style.display = "block";
+    
+    this.quickActionsContainer.appendChild(buttonsContainer);
+    this.quickActionsContainer.classList.remove('hidden');
+    
+    console.log('💡 [SIDE-PANEL] [sidepanel.js] Updated quick actions with', suggestions.length, 'suggestions');
+  }
+  
+  /**
+   * Loads messages from storage
+   */
+  async loadMessages() {
+    try {
+      // Try to load messages from chrome.storage.local
+      const result = await new Promise((resolve) => {
+        chrome.storage.local.get(['vibe_chat_history'], resolve);
+      });
+      
+      if (result && result.vibe_chat_history) {
+        this.messageHistory = result.vibe_chat_history;
+        
+        // Clear existing messages
+        this.messagesContainer.innerHTML = '';
+        
+        // Add each message to the UI
+        this.messageHistory.forEach(msg => {
+          this.addMessage(msg.type, msg.content, { 
+            isHtml: msg.isHtml || false 
+          });
+        });
+        
+        console.log('📝 [SIDE-PANEL] [sidepanel.js] Loaded', this.messageHistory.length, 'messages from storage');
+      }
+    } catch (error) {
+      console.error('❌ [SIDE-PANEL] [sidepanel.js] Error loading messages:', error);
     }
   }
   
+  /**
+   * Saves messages to storage
+   */
+  async saveMessages() {
+    try {
+      // Only keep the last 100 messages to prevent storage issues
+      const messagesToSave = this.messageHistory.slice(-100);
+      
+      await new Promise((resolve) => {
+        chrome.storage.local.set({ vibe_chat_history: messagesToSave }, resolve);
+      });
+      
+      console.log('💾 [SIDE-PANEL] [sidepanel.js] Saved', messagesToSave.length, 'messages to storage');
+    } catch (error) {
+      console.error('❌ [SIDE-PANEL] [sidepanel.js] Error saving messages:', error);
+    }
+  }
+
+  /**
+   * Handles messages from the background script
+   * @param {Object} message - The message object
+   * @param {MessageSender} sender - The sender of the message
+   * @param {Function} sendResponse - Function to send a response
+   * @returns {boolean|undefined} True if using sendResponse asynchronously
+   */
   handleBackgroundMessage(message, sender, sendResponse) {
-    console.log("📨 [SIDE-PANEL] [sidepanel.js] Received message:", JSON.stringify(message));
+    if (!message || !message.type) {
+      console.warn("⚠️ [SIDE-PANEL] [sidepanel.js] Received invalid message:", message);
+      return;
+    }
+    
+    console.log(`📨 [SIDE-PANEL] [sidepanel.js] Received message type: ${message.type}`, message);
+    
+    try {
+      switch (message.type) {
+        case "omniboxQuery":
+          this.handleOmniboxQuery(message.query);
+          break;
+          
+        case "commandResult":
+          this.addMessage("agent", message.result || 'Operation completed successfully');
+          this.setProcessing(false);
+          break;
+          
+        case "commandError":
+          this.addMessage("agent", `❌ Error: ${message.error || 'An unknown error occurred'}`);
+          this.setProcessing(false);
+          break;
+          
+        case "updateSuggestions":
+          this.updateSuggestions(message.suggestions || []);
+          break;
+          
+        case "STATUS_UPDATE":
+          this._handleStatusUpdate(message);
+          break;
+          
+        case "USER_QUESTION":
+          this._handleUserQuestion(message, sendResponse);
+          return true; // Keep message channel open for response
+          
+        case "displayQuestion":
+          this._askUserQuestion(message.question, message.context, sendResponse);
+          return true; // Keep message channel open for response
+          
+        case "displayOptions":
+          this._showUserOptions(message.message, message.options, message.context, sendResponse);
+          return true; // Keep message channel open for response
+          
+        case "displayConfirmation":
+          this._requestUserConfirmation(message.action, message.details, message.price, sendResponse);
+          return true; // Keep message channel open for response
+          
+        case "setProcessing":
+          this.setProcessing(!!message.processing);
+          break;
+          
+        case "addMessage":
+          this.addMessage(
+            message.messageType || 'system',
+            message.content || '',
+            { isHtml: !!message.isHtml }
+          );
+          break;
+          
+        case "clearChat":
+          this.clearChat();
+          break;
+          
+        default:
+          console.warn("⚠️ [SIDE-PANEL] [sidepanel.js] Unhandled message type:", message.type);
+      }
+    } catch (error) {
+      console.error("❌ [SIDE-PANEL] [sidepanel.js] Error handling message:", error, message);
+      
+      // Show error to user if we have a message container
+      if (this.messagesContainer) {
+        this.addMessage('system', `Error: ${error.message || 'An unknown error occurred'}`);
+      }
+      
+      // If we have a sendResponse function, send the error
+      if (typeof sendResponse === 'function') {
+        sendResponse({ success: false, error: error.message || 'Unknown error' });
+      }
+    }
+  }
+  
+  /**
+   * Handles status update messages
+   * @param {Object} message - The status update message
+   * @private
+   */
+  _handleStatusUpdate(message) {
+    if (!message.data) return;
     
-    switch (message.type) {
-      case "omniboxQuery":
-        this.handleOmniboxQuery(message.query);
+    console.log('📊 [SIDE-PANEL] [sidepanel.js] Processing status update:', JSON.stringify(message.data));
+    
+    switch (message.data.type) {
+      case 'USER_QUERY':
+        // Only add user messages that come from other sources (like omnibox)
+        if (message.data.source && message.data.source !== 'sidepanel') {
+          this.addMessage("user", message.data.message);
+        }
         break;
         
-      case "commandResult":
-        this.addMessage("agent", message.result);
-        this.setProcessing(false);
+      case 'PROCESSING':
+        this.addMessage("system", `🔄 ${message.data.message || 'Processing...'}`);
+        this.setProcessing(true);
         break;
         
-      case "commandError":
-        this.addMessage("agent", `❌ Error: ${message.error}`);
-        this.setProcessing(false);
-        break;
-
-      case "updateSuggestions":
-        this.updateSuggestions(message.suggestions);
-        break;
-        
-      case "STATUS_UPDATE":
-        // Handle status updates from background script
-        if (message.data) {
-          console.log('📊 [SIDE-PANEL] [sidepanel.js] Processing status update:', JSON.stringify(message.data));
+      case 'COMPLETED':
+        if (message.data.result) {
+          // Display individual tool results, especially reasoning/thinking
+          if (message.data.result.toolResults && Array.isArray(message.data.result.toolResults)) {
+            this._processToolResults(message.data.result.toolResults);
+          }
           
-          switch (message.data.type) {
-            case 'USER_QUERY':
-              // Skip adding user messages that come from the background
-              // as they're already added by sendMessage()
-              // Only add if it's from another source (like omnibox)
-              if (message.data.source && message.data.source !== 'sidepanel') {
-                this.addMessage("user", message.data.message);
-              }
-              break;
-              
-            case 'PROCESSING':
-              this.addMessage("system", `🔄 ${message.data.message}`);
-              this.setProcessing(true);
-              break;
-              
-            case 'COMPLETED':
-              if (message.data.result && message.data.result.success) {
-                // Display individual tool results, especially reasoning/thinking
-                if (message.data.result.toolResults && Array.isArray(message.data.result.toolResults)) {
-                  message.data.result.toolResults.forEach(toolResult => {
-                    if (toolResult.tool === 'reasoning' && toolResult.args) {
-                      // Display thinking process
-                      if (toolResult.args.thinking) {
-                        this.addMessage("agent", `💭 **Thinking**: ${toolResult.args.thinking}`);
-                      }
-                      if (toolResult.args.evaluation) {
-                        this.addMessage("agent", `📊 **Evaluation**: ${toolResult.args.evaluation}`);
-                      }
-                      if (toolResult.args.next_goal) {
-                        this.addMessage("agent", `🎯 **Next Goal**: ${toolResult.args.next_goal}`);
-                      }
-                    } else if (toolResult.tool !== 'reasoning') {
-                      // Display other tool results briefly
-                      const result = toolResult.result;
-                      if (result && !result.error) {
-                        this.addMessage("system", `🔧 ${toolResult.tool}: ${typeof result === 'string' ? result : 'Success'}`);
-                      } else if (result && result.error) {
-                        this.addMessage("system", `❌ ${toolResult.tool}: ${result.error}`);
-                      }
-                    }
-                  });
-                }
-                
-                // Display final response
-                this.addMessage("agent", message.data.result.response);
-              } else if (message.data.result) {
-                this.addMessage("agent", `❌ ${message.data.result.response || 'Unknown error'}`);
-              }
-              this.updateStatus("ready", "Ready");
-              this.setProcessing(false);
-              break;
-              
-            case 'ERROR':
-              this.addMessage("agent", `❌ Error: ${message.data.error}`);
-              this.updateStatus("ready", "Ready");
-              this.setProcessing(false);
-              break;
-              
-            default:
-              console.log('⚠️ [SIDE-PANEL] [sidepanel.js] Unknown status type:', message.data.type);
+          // Display final response if available
+          if (message.data.result.response) {
+            this.addMessage("agent", message.data.result.response);
+          } else if (!message.data.result.success) {
+            this.addMessage("agent", `❌ ${message.data.result.error || 'Operation failed'}`);
           }
         }
+        this.setProcessing(false);
         break;
         
-      case "statusUpdate":
-        this.updateStatus(message.status, message.text);
+      case 'ERROR':
+        this.addMessage("system", `❌ ${message.data.error || 'An error occurred'}`);
+        this.setProcessing(false);
         break;
         
-      case "commandProgress":
-        this.addMessage("system", `⏳ ${message.progress}`);
-        break;
-
-      case "displayQuestion":
-        this._askUserQuestion(message.question, message.context, sendResponse);
-        return true; // Keep message channel open
-
-      case "displayOptions":
-        this._showUserOptions(message.message, message.options, message.context, sendResponse);
-        return true; // Keep message channel open
-
-      case "displayConfirmation":
-        this._requestUserConfirmation(message.action, message.details, message.price, sendResponse);
-        return true; // Keep message channel open
-
-      case "USER_QUESTION":
-        this._handleUserQuestion(message, sendResponse);
-        return true; // Keep message channel open
-        
       default:
-        console.log("🤷 [SIDE-PANEL] [sidepanel.js] Unknown message type:", message.type);
+        console.warn('⚠️ [SIDE-PANEL] [sidepanel.js] Unknown status type:', message.data.type);
     }
   }
-
-  _askUserQuestion(question, context, sendResponse) {
-    this.setProcessing(true);
-    this.addMessage("agent", question + (context ? ` (${context})` : ""));
-
-    const inputDiv = document.createElement("div");
-    inputDiv.className = "user-input-prompt";
-    inputDiv.innerHTML = `
-      <input type="text" id="userQuestionInput" placeholder="Your answer...">
-      <button id="submitQuestion">Submit</button>
-    `;
-    this.messages.appendChild(inputDiv);
-    this.messages.scrollTop = this.messages.scrollHeight;
-
-    const userQuestionInput = document.getElementById("userQuestionInput");
-    const submitQuestionButton = document.getElementById("submitQuestion");
-
-    userQuestionInput.focus();
-
-    const handleSubmit = () => {
-      const answer = userQuestionInput.value.trim();
-      if (answer) {
-        inputDiv.remove();
-        this.addMessage("user", answer);
-        this.setProcessing(false);
-        sendResponse({ success: true, answer: answer });
-      } else {
-        // Optionally, provide feedback to the user that input is required
-        userQuestionInput.placeholder = "Please enter an answer...";
-      }
-    };
-
-    submitQuestionButton.addEventListener("click", handleSubmit);
-    userQuestionInput.addEventListener("keypress", (e) => {
-      if (e.key === "Enter") {
-        handleSubmit();
-      }
-    });
-  }
-
-  _showUserOptions(message, options, context, sendResponse) {
-    this.setProcessing(true);
-    this.addMessage("agent", message + (context ? ` (${context})` : ""));
-
-    const optionsDiv = document.createElement("div");
-    optionsDiv.className = "user-options-prompt";
-    options.forEach(option => {
-      const button = document.createElement("button");
-      button.textContent = option;
-      button.className = "option-button";
-      button.addEventListener("click", () => {
-        optionsDiv.remove();
-        this.addMessage("user", `Selected: ${option}`);
-        this.setProcessing(false);
-        sendResponse({ success: true, selectedOption: option });
-      });
-      optionsDiv.appendChild(button);
-    });
-    this.messages.appendChild(optionsDiv);
-    this.messages.scrollTop = this.messages.scrollHeight;
-  }
-
-  _requestUserConfirmation(action, details, price, sendResponse) {
-    this.setProcessing(true);
-    let confirmationMessage = `Please confirm: ${action}`; 
-    if (details) confirmationMessage += ` - ${details}`;
-    if (price) confirmationMessage += ` (${price})`;
-
-    this.addMessage("agent", confirmationMessage);
-
-    const confirmDiv = document.createElement("div");
-    confirmDiv.className = "user-confirmation-prompt";
-    confirmDiv.innerHTML = `
-      <button id="confirmButton">Confirm</button>
-      <button id="declineButton">Decline</button>
-    `;
-    this.messages.appendChild(confirmDiv);
-    this.messages.scrollTop = this.messages.scrollHeight;
-
-    const confirmButton = document.getElementById("confirmButton");
-    const declineButton = document.getElementById("declineButton");
-
-    const handleConfirmation = (confirmed) => {
-      confirmDiv.remove();
-      this.addMessage("user", confirmed ? "Confirmed" : "Declined");
-      this.setProcessing(false);
-      sendResponse({ success: true, confirmed: confirmed });
-    };
-
-    confirmButton.addEventListener("click", () => handleConfirmation(true));
-    declineButton.addEventListener("click", () => handleConfirmation(false));
-  }
   
   /**
-   * Handle query from omnibox
+   * Processes tool results and adds appropriate messages
+   * @param {Array} toolResults - Array of tool result objects
+   * @private
    */
-  handleOmniboxQuery(query) {
-    console.log("🎯 [SIDE-PANEL] [sidepanel.js] Received query from omnibox:", query);
-    
-    // Add a system message showing the source
-    this.addMessage("system", `📍 Query from address bar: "${query}"`);
-    
-    // Set the query in the input field
-    this.messageInput.value = query;
-    
-    // Focus the input field
-    this.messageInput.focus();
-    
-    // Automatically send the message
-    this.sendMessage();
-  }
-  
-  // Utility methods
-  async getCurrentTab() {
-    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
-    return tab;
-  }
-  
-  async executeInCurrentTab(script) {
-    const tab = await this.getCurrentTab();
-    return chrome.scripting.executeScript({
-      target: { tabId: tab.id },
-      func: script
+  _processToolResults(toolResults) {
+    toolResults.forEach(toolResult => {
+      if (toolResult.tool === 'reasoning' && toolResult.args) {
+        // Display thinking process
+        if (toolResult.args.thinking) {
+          this.addMessage("agent", `💭 **Thinking**: ${toolResult.args.thinking}`);
+        }
+        if (toolResult.args.evaluation) {
+          this.addMessage("agent", `📊 **Evaluation**: ${toolResult.args.evaluation}`);
+        }
+        if (toolResult.args.next_goal) {
+          this.addMessage("agent", `🎯 **Next Goal**: ${toolResult.args.next_goal}`);
+        }
+      } else if (toolResult.tool !== 'reasoning') {
+        // Display other tool results briefly
+        const result = toolResult.result;
+        if (result && !result.error) {
+          this.addMessage("system", `🔧 ${toolResult.tool}: ${typeof result === 'string' ? result : 'Success'}`);
+        } else if (result && result.error) {
+          this.addMessage("system", `❌ ${toolResult.tool}: ${result.error}`);
+        }
+      }
     });
   }
-  
-  // Public API for external control
-  executeCommand(command) {
-    this.messageInput.value = command;
-    this.sendMessage();
-  }
-  
-  clearChat() {
-    this.messages.innerHTML = "<div class=\"message system\">Chat cleared.</div>";
-    this.messageHistory = [];
-  }
-  
-  exportHistory() {
-    const data = {
-      timestamp: new Date().toISOString(),
-      messages: this.messageHistory,
-      version: "1.0.0"
-    };
-    
-    const blob = new Blob([JSON.stringify(data, null, 2)], { type: "application/json" });
-    const url = URL.createObjectURL(blob);
-    
-    const a = document.createElement("a");
-    a.href = url;
-    a.download = `vibe-ai-history-${Date.now()}.json`;
-    a.click();
-    
-    URL.revokeObjectURL(url);
   }
   
-  // Detect dark mode from browser and apply appropriate class
-  detectDarkMode() {
-    // Method 1: Check if browser supports matchMedia and prefers-color-scheme
-    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
-      document.documentElement.classList.add('dark-theme');
-      console.log('🌙 [SIDE-PANEL] Dark mode detected via matchMedia');
-      return;
-    }
-    
-    // Method 2: Check for Chrome's dark theme
-    chrome.runtime.sendMessage({ type: "checkDarkMode" }, (response) => {
-      if (response && response.isDarkMode) {
-        document.documentElement.classList.add('dark-theme');
-        console.log('🌙 [SIDE-PANEL] Dark mode detected via Chrome API');
-      }
-    });
-    
-    // Method 3: Listen for theme changes
-    if (window.matchMedia) {
-      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
-        if (e.matches) {
-          document.documentElement.classList.add('dark-theme');
-        } else {
-          document.documentElement.classList.remove('dark-theme');
-        }
-        console.log(`🔄 [SIDE-PANEL] Theme changed to ${e.matches ? 'dark' : 'light'}`);
-      });
-    }
-  }
-
   /**
-   * Handle user questions from the LLM
+   * Handles user questions from the LLM
+   * @param {Object} message - The message object
+   * @param {Function} sendResponse - Function to send a response
+   * @private
    */
   _handleUserQuestion(message, sendResponse) {
     console.log('❓ [SIDE-PANEL] Handling user question:', message.question);
@@ -615,15 +1012,6 @@ class VibeAISidePanel {
     // Add the question as an agent message
     this.addMessage("agent", `❓ ${message.question}`);
     
-    // If there's context, show it too
-    if (message.context) {
-      this.addMessage("system", `📝 Context: ${message.context}`);
-    }
-    
-    // Stop processing state and enable input for user response
-    this.setProcessing(false);
-    this.messageInput.focus();
-    
     // Store the request info for when user responds
     this.pendingQuestionRequest = {
       requestId: message.requestId,
@@ -635,13 +1023,14 @@ class VibeAISidePanel {
     
     // Acknowledge receipt
     sendResponse({ success: true });
+    
+    return true;
   }
-
 }
 
-// Initialize when DOM is ready
-document.addEventListener("DOMContentLoaded", () => {
-  window.vibeAIPanel = new VibeAISidePanel();
+// Initialize the side panel when the DOM is fully loaded
+document.addEventListener('DOMContentLoaded', () => {
+  window.vibeAISidePanel = new VibeAISidePanel();
 });
 
 // Make available globally for debugging
diff --git a/chrome/browser/resources/vibe/tailwind.config.js b/chrome/browser/resources/vibe/tailwind.config.js
new file mode 100644
index 0000000000..1947a90639
--- /dev/null
+++ b/chrome/browser/resources/vibe/tailwind.config.js
@@ -0,0 +1,61 @@
+
+/** @type {import('tailwindcss').Config} */
+module.exports = {
+  content: [
+    './sidepanel.html',
+    './sidepanel.js',
+  ],
+  darkMode: 'class',
+  theme: {
+    extend: {
+      colors: {
+        // Light theme colors
+        'light-bg': '#f7f7f8',
+        'light-text': '#000000',
+        'light-input-bg': '#ffffff',
+        'light-border': '#e5e7eb',
+        
+        // Dark theme colors
+        'dark-bg': '#343541',
+        'dark-text': '#eaeaea',
+        'dark-input-bg': '#40414f',
+        'dark-border': '#4b4b4f',
+        
+        // Message bubbles
+        'assistant-bg-light': '#f0f0f0',
+        'assistant-bg-dark': '#444654',
+        'user-bg-light': '#ffffff',
+        'user-bg-dark': '#202123',
+        
+        // UI elements
+        'primary-green': '#10a37f',
+        'primary-green-hover': '#0d8c6e',
+        'disabled-text': '#9ca3af',
+        'code-bg': '#202123',
+      },
+      fontFamily: {
+        sans: ['Inter var', 'Inter', 'Helvetica Neue', 'Arial', 'sans-serif'],
+      },
+      boxShadow: {
+        'input-focus': '0 0 0 2px rgba(16, 163, 127, 0.2)',
+      },
+      keyframes: {
+        'bounce': {
+          '0%, 100%': { transform: 'translateY(0)' },
+          '50%': { transform: 'translateY(-4px)' },
+        },
+        'pulse': {
+          '0%, 100%': { opacity: 1 },
+          '50%': { opacity: 0.5 },
+        },
+      },
+      animation: {
+        'bounce-slow': 'bounce 1.5s infinite',
+        'pulse-slow': 'pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite',
+      },
+    },
+  },
+  plugins: [
+    require('@tailwindcss/typography'),
+  ],
+}
-- 
2.50.0


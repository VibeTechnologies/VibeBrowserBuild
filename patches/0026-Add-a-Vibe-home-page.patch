From 31b27c700ec369dc2807331ea290ffff5bd4264e Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Wed, 23 Jul 2025 13:23:09 +0300
Subject: [PATCH 26/91] Add a Vibe home page

---
 .../component_extension_resources.grd         |   3 +
 chrome/browser/resources/vibe/BUILD.gn        |   6 +
 chrome/browser/resources/vibe/esbuild.js      |   4 +-
 chrome/browser/resources/vibe/home.css        | 149 ++++++
 chrome/browser/resources/vibe/home.html       | 140 ++++++
 chrome/browser/resources/vibe/home.js         | 427 ++++++++++++++++++
 chrome/browser/resources/vibe/manifest.json   |   3 +
 7 files changed, 731 insertions(+), 1 deletion(-)
 create mode 100644 chrome/browser/resources/vibe/home.css
 create mode 100644 chrome/browser/resources/vibe/home.html
 create mode 100644 chrome/browser/resources/vibe/home.js

diff --git a/chrome/browser/resources/component_extension_resources.grd b/chrome/browser/resources/component_extension_resources.grd
index 826a7ac512..5f2b4daeae 100644
--- a/chrome/browser/resources/component_extension_resources.grd
+++ b/chrome/browser/resources/component_extension_resources.grd
@@ -24,6 +24,9 @@
       <include name="IDR_VIBE_SIDEPANEL_HTML" file="${root_gen_dir}/chrome/browser/resources/vibe/sidepanel.html" use_base_dir="false" resource_path="vibe/sidepanel.html" type="chrome_html" />
       <include name="IDR_VIBE_SIDEPANEL_CSS" file="${root_gen_dir}/chrome/browser/resources/vibe/sidepanel.css" use_base_dir="false" resource_path="vibe/sidepanel.css" type="chrome_html" />
       <include name="IDR_VIBE_SIDEPANEL_JS" file="${root_gen_dir}/chrome/browser/resources/vibe/sidepanel.js" use_base_dir="false" resource_path="vibe/sidepanel.js" type="chrome_html" />
+      <include name="IDR_VIBE_HOME_HTML" file="${root_gen_dir}/chrome/browser/resources/vibe/home.html" use_base_dir="false" resource_path="vibe/home.html" type="chrome_html" />
+      <include name="IDR_VIBE_HOME_CSS" file="${root_gen_dir}/chrome/browser/resources/vibe/home.css" use_base_dir="false" resource_path="vibe/home.css" type="chrome_html" />
+      <include name="IDR_VIBE_HOME_JS" file="${root_gen_dir}/chrome/browser/resources/vibe/home.js" use_base_dir="false" resource_path="vibe/home.js" type="chrome_html" />
       <include name="IDR_VIBE_BACKGROUND_JS" file="${root_gen_dir}/chrome/browser/resources/vibe/background.js" use_base_dir="false" resource_path="vibe/background.js" type="chrome_html" />
       <include name="IDR_VIBE_CONTENT_JS" file="${root_gen_dir}/chrome/browser/resources/vibe/content.js" use_base_dir="false" resource_path="vibe/content.js" type="BINDATA" />
       <include name="IDR_VIBE_ICON_16" file="${root_gen_dir}/chrome/browser/resources/vibe/assets/icon16.png" use_base_dir="false" resource_path="vibe/assets/icon16.png" type="BINDATA" />
diff --git a/chrome/browser/resources/vibe/BUILD.gn b/chrome/browser/resources/vibe/BUILD.gn
index 5bdda01dcd..486dc27216 100644
--- a/chrome/browser/resources/vibe/BUILD.gn
+++ b/chrome/browser/resources/vibe/BUILD.gn
@@ -15,6 +15,8 @@ action("npm_build") {
     "background.js",
     "sidepanel.js",
     "sidepanel.css",
+    "home.js",
+    "home.css",
     "content.js",
     "lib/contentExtractor.js",
     "lib/readability.js",
@@ -35,6 +37,10 @@ action("npm_build") {
     "$target_gen_dir/sidepanel.css",
     "$target_gen_dir/sidepanel.js",
     "$target_gen_dir/sidepanel.js.map",
+    "$target_gen_dir/home.html",
+    "$target_gen_dir/home.css",
+    "$target_gen_dir/home.js",
+    "$target_gen_dir/home.js.map",
     "$target_gen_dir/content.js",
     "$target_gen_dir/content.js.map",
     "$target_gen_dir/assets/icon16.png",
diff --git a/chrome/browser/resources/vibe/esbuild.js b/chrome/browser/resources/vibe/esbuild.js
index a4fd0c0b92..02f3cb41dc 100644
--- a/chrome/browser/resources/vibe/esbuild.js
+++ b/chrome/browser/resources/vibe/esbuild.js
@@ -25,6 +25,7 @@ function copyStaticFiles() {
   const filesToCopy = [
     'manifest.json',
     'sidepanel.html',
+    'home.html',
     'assets/icon16.png',
     'assets/icon48.png',
     'assets/icon128.png'
@@ -48,7 +49,7 @@ function copyStaticFiles() {
 // Process CSS with PostCSS, Tailwind, and Autoprefixer
 async function processCSS() {
   try {
-    const cssEntryPoints = ['sidepanel.css'];
+    const cssEntryPoints = ['sidepanel.css', 'home.css'];
     const { default: postcss } = await import('postcss');
     const { default: postcssImport } = await import('postcss-import');
     const { default: tailwindcss } = await import('tailwindcss');
@@ -108,6 +109,7 @@ async function buildJS() {
       entryPoints: {
         background: 'background.js',
         sidepanel: 'sidepanel.js',
+        home: 'home.js',
         content: 'content.js',
       },
       bundle: true,
diff --git a/chrome/browser/resources/vibe/home.css b/chrome/browser/resources/vibe/home.css
new file mode 100644
index 0000000000..9ff2352717
--- /dev/null
+++ b/chrome/browser/resources/vibe/home.css
@@ -0,0 +1,149 @@
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
+
+@layer base {
+  * {
+    box-sizing: border-box;
+  }
+
+  html, body, #root {
+    @apply h-full w-full m-0 p-0;
+    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
+  }
+
+  body {
+    @apply antialiased;
+  }
+}
+
+@layer components {
+  /* Custom scrollbar */
+  .messages-container {
+    scrollbar-width: thin;
+    scrollbar-color: rgba(156, 163, 175, 0.3) transparent;
+  }
+
+  .messages-container::-webkit-scrollbar {
+    width: 8px;
+  }
+
+  .messages-container::-webkit-scrollbar-track {
+    background: transparent;
+  }
+
+  .messages-container::-webkit-scrollbar-thumb {
+    @apply bg-gray-300 rounded-full;
+  }
+
+  .messages-container::-webkit-scrollbar-thumb:hover {
+    @apply bg-gray-400;
+  }
+
+  /* Input area auto-resize */
+  .message-input {
+    field-sizing: content;
+  }
+
+  /* Message content styling - optimized for wider layout */
+  .message-content {
+    line-height: 1.7;
+    max-width: 100%;
+  }
+
+  .message-content p {
+    @apply mb-3 last:mb-0;
+  }
+
+  .message-content pre {
+    @apply bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto text-sm my-3;
+  }
+
+  .message-content code {
+    @apply bg-gray-100 text-gray-800 px-2 py-1 rounded text-sm;
+  }
+
+  .message-content pre code {
+    @apply bg-transparent text-gray-100 p-0;
+  }
+
+  .message-content ul, .message-content ol {
+    @apply pl-6 mb-3;
+  }
+
+  .message-content li {
+    @apply mb-1.5;
+  }
+
+  .message-content blockquote {
+    @apply border-l-4 border-gray-300 pl-4 italic text-gray-600 my-3;
+  }
+
+  .message-content h1, .message-content h2, .message-content h3, .message-content h4, .message-content h5, .message-content h6 {
+    @apply font-semibold mt-6 mb-3;
+  }
+
+  .message-content h1 {
+    @apply text-2xl;
+  }
+
+  .message-content h2 {
+    @apply text-xl;
+  }
+
+  .message-content h3 {
+    @apply text-lg;
+  }
+
+  /* Processing animation */
+  @keyframes pulse {
+    0%, 100% {
+      opacity: 0.4;
+    }
+    50% {
+      opacity: 1;
+    }
+  }
+
+  .animate-pulse {
+    animation: pulse 1.5s ease-in-out infinite;
+  }
+
+  /* Focus states */
+  .focus-within\:border-gray-300:focus-within {
+    border-color: #d1d5db;
+  }
+
+  /* Button states */
+  .send-button-enabled {
+    @apply bg-green-600 hover:bg-green-700 text-white;
+  }
+
+  .send-button-enabled svg {
+    @apply text-white;
+  }
+
+  /* Smooth transitions */
+  * {
+    @apply transition-colors duration-200;
+  }
+
+  /* New tab specific styles */
+  .messages-container {
+    min-height: calc(100vh - 200px);
+  }
+
+  /* Larger welcome message for new tab */
+  #welcomeMessage {
+    padding-top: 10vh;
+  }
+
+  /* Better spacing for wider layout */
+  .user-message {
+    max-width: 60%;
+  }
+
+  .assistant-message {
+    max-width: 80%;
+  }
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/home.html b/chrome/browser/resources/vibe/home.html
new file mode 100644
index 0000000000..31fb201dab
--- /dev/null
+++ b/chrome/browser/resources/vibe/home.html
@@ -0,0 +1,140 @@
+<!doctype html>
+<html lang="en" class="h-full">
+<head>
+  <meta charset="UTF-8">
+  <meta name="viewport" content="width=device-width,initial-scale=1">
+  <title>Vibe AI - New Tab</title>
+  <link rel="preconnect" href="https://fonts.googleapis.com">
+  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
+  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
+  <link href="./home.css" rel="stylesheet">
+</head>
+<body class="h-full bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 font-inter">
+  <div id="root" class="h-full flex flex-col">
+    <!-- Header -->
+    <div class="shrink-0 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800">
+      <div class="px-6 py-4">
+        <div class="flex items-center justify-between max-w-6xl mx-auto">
+          <div class="flex items-center space-x-3">
+            <div class="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center">
+              <span class="text-white font-bold text-lg">V</span>
+            </div>
+            <h1 class="text-xl font-semibold text-gray-800 dark:text-gray-200">Vibe AI</h1>
+          </div>
+          <div id="modelName" class="text-sm text-gray-600 dark:text-gray-400">GPT-4o mini</div>
+        </div>
+      </div>
+    </div>
+
+    <!-- Messages container -->
+    <div class="flex-1 overflow-hidden">
+      <div id="messages" class="h-full overflow-y-auto">
+        <div class="messages-container px-6 py-8 max-w-6xl mx-auto">
+          <!-- Welcome message - hidden when chat starts -->
+          <div id="welcomeMessage" class="flex justify-center mb-12">
+            <div class="text-center">
+              <div class="w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-6">
+                <span class="text-white font-bold text-2xl">V</span>
+              </div>
+              <h2 class="text-3xl font-medium text-gray-800 dark:text-gray-200 mb-4">What can I help with?</h2>
+              <p class="text-gray-600 dark:text-gray-400 max-w-md">Ask me anything or let me help you browse the web more efficiently.</p>
+            </div>
+          </div>
+          <!-- Messages will be inserted here by JavaScript -->
+        </div>
+      </div>
+    </div>
+
+    <!-- Input area -->
+    <div class="shrink-0 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800">
+      <div class="px-6 py-6">
+        <div class="relative max-w-4xl mx-auto">
+          <div class="flex items-end bg-gray-50 dark:bg-gray-700 rounded-2xl border border-gray-200 dark:border-gray-600 focus-within:border-gray-300 dark:focus-within:border-gray-500 transition-colors">
+            <!-- Attachment button -->
+            <button class="p-4 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 transition-colors">
+              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
+                <path d="M15 7v6a3 3 0 0 1-6 0V3a5 5 0 0 1 10 0v10a7 7 0 0 1-14 0V9"></path>
+              </svg>
+            </button>
+            
+            <textarea
+              id="messageInput"
+              class="flex-1 resize-none bg-transparent px-3 py-4 text-base outline-none placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-gray-100 min-h-[56px] max-h-40"
+              placeholder="Message Vibe AI"
+              rows="1"
+              spellcheck="true"
+            ></textarea>
+            
+            <!-- Voice input button -->
+            <button class="p-4 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 transition-colors">
+              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
+                <path d="M12 2a3 3 0 0 0-3 3v6a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"></path>
+                <path d="M19 10v1a7 7 0 0 1-14 0v-1"></path>
+                <line x1="12" y1="18" x2="12" y2="22"></line>
+                <line x1="8" y1="22" x2="16" y2="22"></line>
+              </svg>
+            </button>
+            
+            <button id="sendButton" class="p-3 m-2 rounded-lg bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors" disabled>
+              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="text-gray-600 dark:text-gray-300">
+                <line x1="22" y1="2" x2="11" y2="13"></line>
+                <polygon points="22,2 15,22 11,13 2,9 22,2"></polygon>
+              </svg>
+            </button>
+          </div>
+        </div>
+      </div>
+    </div>
+  </div>
+
+  <!-- Message templates -->
+  <template id="userMessageTemplate">
+    <div class="flex justify-end mb-8">
+      <div class="bg-gray-100 dark:bg-gray-700 rounded-2xl px-5 py-4 max-w-2xl text-base text-gray-900 dark:text-gray-100">
+        <div class="message-content"></div>
+      </div>
+    </div>
+  </template>
+
+  <template id="assistantMessageTemplate">
+    <div class="flex justify-start mb-8">
+      <div class="flex items-start space-x-4 max-w-full">
+        <div class="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center shrink-0 mt-1">
+          <span class="text-white font-bold text-sm">AI</span>
+        </div>
+        <div class="message-content text-base leading-relaxed max-w-none text-gray-900 dark:text-gray-100"></div>
+      </div>
+    </div>
+  </template>
+
+  <template id="systemMessageTemplate">
+    <div class="flex justify-center mb-6">
+      <div class="text-sm text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-700 px-4 py-2 rounded-full">
+        <div class="message-content"></div>
+      </div>
+    </div>
+  </template>
+  
+  <!-- Thinking indicator template -->
+  <template id="thinkingTemplate">
+    <div class="flex justify-start mb-8">
+      <div class="flex items-start space-x-4 max-w-full">
+        <div class="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center shrink-0 mt-1">
+          <span class="text-white font-bold text-sm">AI</span>
+        </div>
+        <div class="text-base text-gray-600 dark:text-gray-400 italic bg-gray-50 dark:bg-gray-700 px-4 py-3 rounded-lg">
+          <div class="thinking-content">
+            <div class="tool-indicator flex items-center gap-3">
+              <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-green-600"></div>
+              <span class="tool-name">Thinking...</span>
+            </div>
+            <div class="thinking-duration-text text-sm opacity-75 mt-2">for <span class="thinking-duration">0</span> seconds</div>
+          </div>
+        </div>
+      </div>
+    </div>
+  </template>
+
+  <script src="home.js"></script>
+</body>
+</html>
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/home.js b/chrome/browser/resources/vibe/home.js
new file mode 100644
index 0000000000..fe09d5f8b5
--- /dev/null
+++ b/chrome/browser/resources/vibe/home.js
@@ -0,0 +1,427 @@
+// @ts-nocheck
+
+/**
+ * Vibe AI Agent New Tab Page
+ * Main UI for AI agent interaction in new tab context
+ */
+
+class VibeAIHomePage {
+  constructor() {
+    // Main containers
+    this.messagesContainer = document.querySelector(".messages-container");
+    this.messageInput = document.getElementById("messageInput");
+    this.sendButton = document.getElementById("sendButton");
+    this.welcomeMessage = document.getElementById("welcomeMessage");
+    
+    // State
+    this.isProcessing = false;
+    this.messageHistory = [];
+    this.currentOperationId = null;
+    this.pendingQuestionRequest = null;
+    this.thinkingStartTime = null;
+    this.currentTool = null;
+    
+    // Templates
+    this.userMessageTemplate = document.getElementById("userMessageTemplate").content;
+    this.assistantMessageTemplate = document.getElementById("assistantMessageTemplate").content;
+    this.systemMessageTemplate = document.getElementById("systemMessageTemplate").content;
+    this.thinkingTemplate = document.getElementById("thinkingTemplate").content;
+    
+    this.initialize();
+  }
+  
+  initialize() {
+    console.log("Initializing Vibe AI Home Page...");
+    
+    // Set up dark mode detection
+    this.setupDarkMode();
+    
+    // Initialize event listeners
+    this.initializeEventListeners();
+    
+    // Set up message input auto-resize
+    this.setupMessageInput();
+    
+    // Listen for messages from background script
+    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
+      const result = this.handleBackgroundMessage(message, sender, sendResponse);
+      if (!result) {
+        sendResponse({ success: true });
+      }
+      return result; // Keep channel open if needed
+    });
+    
+    // Load any existing messages from storage
+    this.loadMessages();
+    
+    console.log("✅ [NEW-TAB] [home.js] Vibe AI Home Page initialized");
+  }
+  
+  initializeEventListeners() {
+    // Send message on button click or Enter key (but allow Shift+Enter for new lines)
+    this.sendButton.addEventListener("click", () => this.sendMessage());
+    this.messageInput.addEventListener("keydown", (e) => {
+      if (e.key === "Enter" && !e.shiftKey) {
+        e.preventDefault();
+        this.sendMessage();
+      }
+    });
+    
+    // Keyboard shortcut: Cmd/Ctrl + E to focus input
+    document.addEventListener("keydown", (e) => {
+      if ((e.ctrlKey || e.metaKey) && e.key === "e") {
+        e.preventDefault();
+        this.messageInput.focus();
+      }
+    });
+    
+    // Update send button state when input changes
+    this.messageInput.addEventListener('input', () => {
+      this.updateSendButtonState();
+    });
+  }
+  
+  setupMessageInput() {
+    // Auto-resize textarea as user types
+    this.messageInput.addEventListener('input', () => {
+      this.messageInput.style.height = 'auto';
+      this.messageInput.style.height = Math.min(this.messageInput.scrollHeight, 200) + 'px';
+    });
+    
+    // Focus the input when the page loads
+    this.messageInput.focus();
+  }
+  
+  setupDarkMode() {
+    // Check for saved preference or system preference
+    const savedTheme = localStorage.getItem('vibe-theme');
+    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
+    
+    if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
+      this.enableDarkMode();
+    } else {
+      this.disableDarkMode();
+    }
+  }
+  
+  enableDarkMode() {
+    document.documentElement.classList.add('dark');
+    localStorage.setItem('vibe-theme', 'dark');
+    this.isDarkMode = true;
+  }
+  
+  disableDarkMode() {
+    document.documentElement.classList.remove('dark');
+    localStorage.setItem('vibe-theme', 'light');
+    this.isDarkMode = false;
+  }
+  
+  updateSendButtonState() {
+    const hasContent = this.messageInput.value.trim().length > 0;
+    this.sendButton.disabled = !hasContent || this.isProcessing;
+    
+    if (hasContent && !this.isProcessing) {
+      this.sendButton.classList.add('send-button-enabled');
+    } else {
+      this.sendButton.classList.remove('send-button-enabled');
+    }
+  }
+
+  /**
+   * Handles sending a message
+   * @param {string} [customMessage] - Optional custom message to send
+   */
+  async sendMessage(customMessage) {
+    try {
+      const message = customMessage || this.messageInput.value.trim();
+      if (!message || this.isProcessing) return;
+      
+      // Add user message to chat
+      this.addMessage('user', message);
+      
+      // Clear input if this was from the input field
+      if (!customMessage) {
+        this.messageInput.value = '';
+        this.messageInput.style.height = 'auto'; // Reset input height
+      }
+      
+      // Hide welcome message
+      if (this.welcomeMessage) {
+        this.welcomeMessage.style.display = 'none';
+      }
+      
+      this.updateSendButtonState();
+      
+      // Set processing state
+      this.isProcessing = true;
+      this.showThinkingIndicator();
+      
+      // Send message to background script for processing
+      const response = await new Promise((resolve) => {
+        chrome.runtime.sendMessage({
+          type: 'USER_MESSAGE',
+          message: message,
+          timestamp: new Date().toISOString(),
+          context: 'home' // Identify this as coming from home page
+        }, resolve);
+      });
+      
+      // Handle response
+      if (response && response.success) {
+        // Response will come through background message handler
+        console.log("Message sent successfully");
+      } else {
+        this.addMessage('system', 'Error sending message. Please try again.');
+        this.isProcessing = false;
+        this.hideThinkingIndicator();
+        this.updateSendButtonState();
+      }
+      
+    } catch (error) {
+      console.error('Error sending message:', error);
+      this.addMessage('system', 'Error sending message. Please try again.');
+      this.isProcessing = false;
+      this.hideThinkingIndicator();
+      this.updateSendButtonState();
+    }
+  }
+  
+  /**
+   * Handles messages from the background script
+   */
+  handleBackgroundMessage(message, sender, sendResponse) {
+    console.log('[NEW-TAB] Received message:', message.type);
+    
+    switch (message.type) {
+      case 'AI_RESPONSE':
+        this.handleAIResponse(message);
+        return false;
+        
+      case 'AI_THINKING':
+        this.updateThinkingIndicator(message.tool, message.duration);
+        return false;
+        
+      case 'AI_ERROR':
+        this.handleAIError(message);
+        return false;
+        
+      default:
+        console.log('[NEW-TAB] Unknown message type:', message.type);
+        return false;
+    }
+  }
+  
+  handleAIResponse(message) {
+    this.hideThinkingIndicator();
+    this.addMessage('assistant', message.response);
+    this.isProcessing = false;
+    this.updateSendButtonState();
+    
+    // Save conversation
+    this.saveMessages();
+  }
+  
+  handleAIError(message) {
+    this.hideThinkingIndicator();
+    this.addMessage('system', `Error: ${message.error}`);
+    this.isProcessing = false;
+    this.updateSendButtonState();
+  }
+  
+  showThinkingIndicator() {
+    this.hideThinkingIndicator(); // Remove any existing indicator
+    
+    const template = this.thinkingTemplate.cloneNode(true);
+    const container = template.querySelector('.thinking-content');
+    
+    this.currentThinkingElement = template;
+    this.thinkingStartTime = Date.now();
+    
+    this.messagesContainer.appendChild(template);
+    this.scrollToBottom();
+    
+    // Update thinking duration every second
+    this.thinkingTimer = setInterval(() => {
+      this.updateThinkingDuration();
+    }, 1000);
+  }
+  
+  updateThinkingIndicator(tool, duration) {
+    if (!this.currentThinkingElement) return;
+    
+    const toolNameElement = this.currentThinkingElement.querySelector('.tool-name');
+    const durationElement = this.currentThinkingElement.querySelector('.thinking-duration');
+    
+    if (toolNameElement) {
+      toolNameElement.textContent = tool ? `Using ${tool}...` : 'Thinking...';
+    }
+    
+    if (durationElement && duration) {
+      durationElement.textContent = Math.floor(duration / 1000);
+    }
+  }
+  
+  updateThinkingDuration() {
+    if (!this.currentThinkingElement || !this.thinkingStartTime) return;
+    
+    const duration = Date.now() - this.thinkingStartTime;
+    const seconds = Math.floor(duration / 1000);
+    
+    const durationElement = this.currentThinkingElement.querySelector('.thinking-duration');
+    if (durationElement) {
+      durationElement.textContent = seconds;
+    }
+  }
+  
+  hideThinkingIndicator() {
+    if (this.currentThinkingElement) {
+      this.currentThinkingElement.remove();
+      this.currentThinkingElement = null;
+    }
+    
+    if (this.thinkingTimer) {
+      clearInterval(this.thinkingTimer);
+      this.thinkingTimer = null;
+    }
+    
+    this.thinkingStartTime = null;
+  }
+  
+  /**
+   * Adds a message to the chat
+   */
+  addMessage(type, content, metadata = {}) {
+    let template;
+    
+    switch (type) {
+      case 'user':
+        template = this.userMessageTemplate.cloneNode(true);
+        break;
+      case 'assistant':
+        template = this.assistantMessageTemplate.cloneNode(true);
+        break;
+      case 'system':
+        template = this.systemMessageTemplate.cloneNode(true);
+        break;
+      default:
+        console.error('Unknown message type:', type);
+        return;
+    }
+    
+    const messageContent = template.querySelector('.message-content');
+    if (messageContent) {
+      // Handle markdown-like formatting
+      const formattedContent = this.formatMessageContent(content);
+      messageContent.innerHTML = formattedContent;
+    }
+    
+    this.messagesContainer.appendChild(template);
+    this.scrollToBottom();
+    
+    // Store message in history
+    this.messageHistory.push({
+      type,
+      content,
+      timestamp: new Date().toISOString(),
+      metadata
+    });
+    
+    // Limit message history to prevent memory issues
+    if (this.messageHistory.length > 100) {
+      this.messageHistory = this.messageHistory.slice(-80);
+    }
+  }
+  
+  formatMessageContent(content) {
+    // Basic markdown-like formatting
+    return content
+      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
+      .replace(/\*(.*?)\*/g, '<em>$1</em>')
+      .replace(/`(.*?)`/g, '<code>$1</code>')
+      .replace(/\n/g, '<br>');
+  }
+  
+  scrollToBottom() {
+    const messages = document.getElementById('messages');
+    if (messages) {
+      messages.scrollTop = messages.scrollHeight;
+    }
+  }
+  
+  /**
+   * Load messages from storage
+   */
+  async loadMessages() {
+    try {
+      const result = await chrome.storage.local.get(['vibeMessages']);
+      if (result.vibeMessages && Array.isArray(result.vibeMessages)) {
+        this.messageHistory = result.vibeMessages;
+        
+        // Display recent messages
+        const recentMessages = this.messageHistory.slice(-10);
+        for (const msg of recentMessages) {
+          this.addMessageToDOM(msg.type, msg.content, msg.metadata);
+        }
+        
+        if (recentMessages.length > 0) {
+          this.welcomeMessage.style.display = 'none';
+        }
+      }
+    } catch (error) {
+      console.error('Error loading messages:', error);
+    }
+  }
+  
+  /**
+   * Save messages to storage
+   */
+  async saveMessages() {
+    try {
+      await chrome.storage.local.set({
+        vibeMessages: this.messageHistory
+      });
+    } catch (error) {
+      console.error('Error saving messages:', error);
+    }
+  }
+  
+  addMessageToDOM(type, content, metadata = {}) {
+    let template;
+    
+    switch (type) {
+      case 'user':
+        template = this.userMessageTemplate.cloneNode(true);
+        break;
+      case 'assistant':
+        template = this.assistantMessageTemplate.cloneNode(true);
+        break;
+      case 'system':
+        template = this.systemMessageTemplate.cloneNode(true);
+        break;
+      default:
+        return;
+    }
+    
+    const messageContent = template.querySelector('.message-content');
+    if (messageContent) {
+      const formattedContent = this.formatMessageContent(content);
+      messageContent.innerHTML = formattedContent;
+    }
+    
+    this.messagesContainer.appendChild(template);
+  }
+}
+
+// Initialize when DOM is loaded
+document.addEventListener('DOMContentLoaded', () => {
+  window.vibeHomePage = new VibeAIHomePage();
+});
+
+// Also initialize if DOM is already loaded
+if (document.readyState === 'loading') {
+  document.addEventListener('DOMContentLoaded', () => {
+    window.vibeHomePage = new VibeAIHomePage();
+  });
+} else {
+  window.vibeHomePage = new VibeAIHomePage();
+}
\ No newline at end of file
diff --git a/chrome/browser/resources/vibe/manifest.json b/chrome/browser/resources/vibe/manifest.json
index 9250629637..9d20d1600e 100644
--- a/chrome/browser/resources/vibe/manifest.json
+++ b/chrome/browser/resources/vibe/manifest.json
@@ -37,6 +37,9 @@
   "side_panel": {
     "default_path": "sidepanel.html"
   },
+  "chrome_url_overrides": {
+    "newtab": "home.html"
+  },
   "content_scripts": [
     {
       "matches": ["<all_urls>"],
-- 
2.50.0


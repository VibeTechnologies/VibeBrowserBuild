From 86fb0ea9d916b48d061813df078b73786865cf36 Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Fri, 25 Jul 2025 16:03:27 +0300
Subject: [PATCH 31/91] Implement Chat4 AI agent integration with
 chrome.runtime.sendMessage

- Add AI agent communication utility with Chrome extension messaging
- Integrate AI processing state management in ChatPage component
- Add loading indicators and disabled states during AI processing
- Implement tool update and reasoning update handlers
- Add comprehensive error handling for AI communication failures
- Support real-time AI responses via chrome.runtime.sendMessage API

Technical details:
- Chat4 sends messages via processCommand to background.js
- AI agent processes requests using LangChain and responds
- UI shows processing states and handles async AI responses
- Tool and reasoning updates logged for future UI enhancements
---
 .../chat4/src/components/chat/ChatInput.tsx   |  18 +-
 .../chat4/src/components/chat/ChatPage.tsx    |  78 ++++++-
 .../vibe/apps/chat4/src/utils/aiAgent.ts      | 193 ++++++++++++++++++
 3 files changed, 273 insertions(+), 16 deletions(-)
 create mode 100644 chrome/browser/resources/vibe/apps/chat4/src/utils/aiAgent.ts

diff --git a/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatInput.tsx b/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatInput.tsx
index fdecf916f3..1228c4ef42 100644
--- a/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatInput.tsx
+++ b/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatInput.tsx
@@ -10,16 +10,18 @@ interface ChatInputProps {
   onMessageChange: (message: string) => void
   onSendMessage: () => void
   disabled?: boolean
+  isProcessing?: boolean
 }
 
 export function ChatInput({ 
   message, 
   onMessageChange, 
   onSendMessage, 
-  disabled = false 
+  disabled = false,
+  isProcessing = false 
 }: ChatInputProps) {
   const handleKeyDown = (e: React.KeyboardEvent) => {
-    if (e.key === "Enter" && !e.shiftKey) {
+    if (e.key === "Enter" && !e.shiftKey && !isProcessing) {
       e.preventDefault()
       onSendMessage()
     }
@@ -41,9 +43,9 @@ export function ChatInput({
             value={message}
             onChange={(e) => onMessageChange(e.target.value)}
             onKeyDown={handleKeyDown}
-            placeholder="Message ChatGPT"
+            placeholder={isProcessing ? "AI is processing..." : "Message ChatGPT"}
             className="min-h-[24px] max-h-32 resize-none border-0 bg-transparent px-0 py-1 text-sm placeholder:text-muted-foreground focus-visible:ring-0"
-            disabled={disabled}
+            disabled={disabled || isProcessing}
           />
           
           <div className="flex items-center gap-1">
@@ -57,11 +59,15 @@ export function ChatInput({
             
             <Button
               onClick={onSendMessage}
-              disabled={disabled || !message.trim()}
+              disabled={disabled || !message.trim() || isProcessing}
               size="icon"
               className="flex-shrink-0 rounded-full h-8 w-8 bg-primary text-primary-foreground hover:bg-primary/90"
             >
-              <Send className="h-4 w-4" />
+              {isProcessing ? (
+                <div className="h-4 w-4 animate-spin rounded-full border-2 border-primary-foreground border-t-transparent" />
+              ) : (
+                <Send className="h-4 w-4" />
+              )}
             </Button>
           </div>
         </div>
diff --git a/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatPage.tsx b/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatPage.tsx
index 21a86f28ca..906497e8f8 100644
--- a/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatPage.tsx
+++ b/chrome/browser/resources/vibe/apps/chat4/src/components/chat/ChatPage.tsx
@@ -1,10 +1,11 @@
 "use client"
 
-import React, { useState } from "react"
+import React, { useState, useEffect } from "react"
 import { Sidebar } from "./Sidebar"
 import { MessageList } from "./MessageList"
 import { ChatInput } from "./ChatInput"
 import { type MessageData } from "./Message"
+import { aiAgent, type AIToolUpdate, type AIReasoningUpdate } from "../../utils/aiAgent"
 
 interface ChatSession {
   id: string
@@ -22,6 +23,26 @@ export function ChatPage() {
   // Sidebar state - hidden by default, can be toggled
   const [sidebarHidden, setSidebarHidden] = useState(true)
   
+  // AI agent state
+  const [isProcessing, setIsProcessing] = useState(false)
+  
+  // Setup AI agent handlers
+  useEffect(() => {
+    aiAgent.setToolUpdateHandler((update: AIToolUpdate) => {
+      console.log('🔧 [CHAT4] Tool update received:', update)
+      // TODO: Add UI indicators for tool updates
+    })
+    
+    aiAgent.setReasoningUpdateHandler((update: AIReasoningUpdate) => {
+      console.log('🧠 [CHAT4] Reasoning update received:', update)
+      // TODO: Add UI indicators for reasoning updates
+    })
+    
+    return () => {
+      aiAgent.cleanup()
+    }
+  }, [])
+  
   // Simple width-based detection for automatic hiding
   React.useEffect(() => {
     const checkWidth = () => {
@@ -41,13 +62,13 @@ export function ChatPage() {
 
   const generateId = () => Math.random().toString(36).substring(2)
 
-  const createNewSession = (): ChatSession => ({
+  const createNewSession = React.useCallback((): ChatSession => ({
     id: generateId(),
     title: "New Chat",
     lastMessage: "",
     timestamp: new Date(),
     messages: []
-  })
+  }), [])
 
   const handleNewChat = () => {
     const newSession = createNewSession()
@@ -68,7 +89,7 @@ export function ChatPage() {
   }
 
   const handleSendMessage = async () => {
-    if (!message.trim()) return
+    if (!message.trim() || isProcessing) return
 
     // Create session if none exists
     let sessionId = currentSessionId
@@ -99,17 +120,27 @@ export function ChatPage() {
         : session
     ))
 
+    const userMessageContent = message.trim()
     setMessage("")
+    setIsProcessing(true)
 
-    // Simulate AI response
-    setTimeout(() => {
+    try {
+      console.log('🚀 [CHAT4] Sending message to AI agent:', userMessageContent)
+      
+      // Send message to AI agent via Chrome extension messaging
+      const response = await aiAgent.sendMessage(userMessageContent)
+      
+      console.log('✅ [CHAT4] AI response received:', response)
+
+      // Create AI response message
       const aiMessage: MessageData = {
         id: generateId(),
-        content: `I understand you said: "${userMessage.content}". This is a simulated response from the AI assistant. In a real implementation, this would be connected to an actual AI service.`,
+        content: response.response || 'No response from AI agent',
         role: "assistant",
         timestamp: new Date()
       }
 
+      // Add AI response to session
       setSessions(prev => prev.map(session => 
         session.id === sessionId
           ? { 
@@ -120,15 +151,41 @@ export function ChatPage() {
             }
           : session
       ))
-    }, 1000)
+
+    } catch (error) {
+      console.error('❌ [CHAT4] Error communicating with AI agent:', error)
+      
+      // Add error message
+      const errorMessage: MessageData = {
+        id: generateId(),
+        content: `Error: ${error instanceof Error ? error.message : 'Failed to communicate with AI agent'}`,
+        role: "assistant",
+        timestamp: new Date()
+      }
+
+      setSessions(prev => prev.map(session => 
+        session.id === sessionId
+          ? { 
+              ...session, 
+              messages: [...session.messages, errorMessage],
+              lastMessage: errorMessage.content.slice(0, 50),
+              timestamp: new Date()
+            }
+          : session
+      ))
+    } finally {
+      setIsProcessing(false)
+    }
   }
 
   // Initialize with a default session if none exist
   React.useEffect(() => {
     if (sessions.length === 0) {
-      handleNewChat()
+      const newSession = createNewSession()
+      setSessions([newSession])
+      setCurrentSessionId(newSession.id)
     }
-  }, [])
+  }, [sessions.length, createNewSession])
 
   return (
     <div className="flex h-screen bg-background">
@@ -177,6 +234,7 @@ export function ChatPage() {
           message={message}
           onMessageChange={setMessage}
           onSendMessage={handleSendMessage}
+          isProcessing={isProcessing}
         />
       </div>
     </div>
diff --git a/chrome/browser/resources/vibe/apps/chat4/src/utils/aiAgent.ts b/chrome/browser/resources/vibe/apps/chat4/src/utils/aiAgent.ts
new file mode 100644
index 0000000000..d3b866c713
--- /dev/null
+++ b/chrome/browser/resources/vibe/apps/chat4/src/utils/aiAgent.ts
@@ -0,0 +1,193 @@
+// AI Agent Communication Utility for Chat4
+// Handles chrome.runtime.sendMessage integration with ai_agent.js
+
+// Chrome extension API types
+interface ChromeMessage {
+  type: string;
+  [key: string]: unknown;
+}
+
+interface MessageSender {
+  id?: string;
+  url?: string;
+  tab?: {
+    id?: number;
+    url?: string;
+  };
+}
+
+interface ChromeRuntime {
+  sendMessage: (message: ChromeMessage, callback?: (response: unknown) => void) => void;
+  onMessage: {
+    addListener: (callback: (message: ChromeMessage, sender: MessageSender, sendResponse: (response?: unknown) => void) => void) => void;
+    removeListener: (callback: (message: ChromeMessage, sender: MessageSender, sendResponse: (response?: unknown) => void) => void) => void;
+  };
+  lastError?: { message: string };
+}
+
+declare global {
+  interface Window {
+    chrome?: {
+      runtime?: ChromeRuntime;
+    };
+  }
+}
+
+// Access chrome from window object
+const chromeExt = typeof window !== 'undefined' ? window.chrome : undefined;
+
+export interface AIMessage {
+  id: string;
+  content: string;
+  role: 'user' | 'assistant';
+  timestamp: Date;
+  status?: 'sending' | 'processing' | 'completed' | 'error';
+}
+
+export interface AIToolUpdate {
+  tool: string;
+  message: string;
+  details?: unknown;
+  timestamp: number;
+}
+
+export interface AIReasoningUpdate {
+  reasoning: string;
+  iteration: number;
+  timestamp: number;
+}
+
+export interface AIResponse {
+  success: boolean;
+  response?: string;
+  error?: string;
+  toolResults?: unknown[];
+  iterations?: number;
+}
+
+export class Chat4AIAgent {
+  private currentOperationId: string | null = null;
+  private onToolUpdate?: (update: AIToolUpdate) => void;
+  private onReasoningUpdate?: (update: AIReasoningUpdate) => void;
+  private messageListener?: (message: ChromeMessage, sender: MessageSender, sendResponse: (response?: unknown) => void) => void;
+
+  constructor() {
+    this.setupMessageListener();
+  }
+
+  private setupMessageListener() {
+    this.messageListener = (message: ChromeMessage) => {
+      if (message.type === 'TOOL_UPDATE') {
+        if (this.onToolUpdate) {
+          this.onToolUpdate({
+            tool: message.tool as string,
+            message: message.message as string,
+            details: message.details,
+            timestamp: message.timestamp as number
+          });
+        }
+      } else if (message.type === 'REASONING_UPDATE') {
+        if (this.onReasoningUpdate) {
+          this.onReasoningUpdate({
+            reasoning: message.reasoning as string,
+            iteration: message.iteration as number,
+            timestamp: message.timestamp as number
+          });
+        }
+      }
+    };
+
+    // Register the message listener
+    if (chromeExt?.runtime) {
+      chromeExt.runtime.onMessage.addListener(this.messageListener);
+    }
+  }
+
+  public setToolUpdateHandler(handler: (update: AIToolUpdate) => void) {
+    this.onToolUpdate = handler;
+  }
+
+  public setReasoningUpdateHandler(handler: (update: AIReasoningUpdate) => void) {
+    this.onReasoningUpdate = handler;
+  }
+
+  public async sendMessage(content: string): Promise<AIResponse> {
+    return new Promise((resolve, reject) => {
+      if (!chromeExt?.runtime) {
+        reject(new Error('Chrome runtime not available'));
+        return;
+      }
+
+      // Generate unique operation ID
+      this.currentOperationId = Math.random().toString(36).substring(2);
+
+      const message = {
+        type: "processCommand",
+        command: content,
+        source: "chat4",
+        operationId: this.currentOperationId
+      };
+
+      console.log('🚀 [CHAT4-AI] Sending message to AI agent:', content);
+
+      chromeExt.runtime.sendMessage(message, (response: unknown) => {
+        console.log('📨 [CHAT4-AI] Received AI response:', response);
+        
+        if (chromeExt?.runtime?.lastError) {
+          console.error('❌ [CHAT4-AI] Chrome runtime error:', chromeExt.runtime.lastError);
+          reject(new Error(chromeExt.runtime.lastError.message));
+          return;
+        }
+
+        const aiResponse = response as AIResponse;
+        if (aiResponse?.success) {
+          resolve(aiResponse);
+        } else {
+          reject(new Error(aiResponse?.error || 'Unknown AI error'));
+        }
+
+        // Clear operation ID
+        this.currentOperationId = null;
+      });
+    });
+  }
+
+  public stopCurrentOperation(): Promise<boolean> {
+    return new Promise((resolve) => {
+      if (!this.currentOperationId || !chromeExt?.runtime) {
+        resolve(false);
+        return;
+      }
+
+      const stopMessage = {
+        type: "stopOperation",
+        operationId: this.currentOperationId,
+        source: "chat4"
+      };
+
+      chromeExt.runtime.sendMessage(stopMessage, (response: unknown) => {
+        if (chromeExt?.runtime?.lastError) {
+          console.error('❌ [CHAT4-AI] Error stopping operation:', chromeExt.runtime.lastError);
+          resolve(false);
+          return;
+        }
+
+        console.log('🛑 [CHAT4-AI] Stop operation response:', response);
+        resolve((response as { success?: boolean })?.success || false);
+      });
+    });
+  }
+
+  public cleanup() {
+    if (this.messageListener && chromeExt?.runtime) {
+      chromeExt.runtime.onMessage.removeListener(this.messageListener);
+    }
+  }
+
+  public isOperationActive(): boolean {
+    return this.currentOperationId !== null;
+  }
+}
+
+// Singleton instance for the app
+export const aiAgent = new Chat4AIAgent();
\ No newline at end of file
-- 
2.50.0


From d92666d41e19c3afbf1a84070a84fce9fb62b991 Mon Sep 17 00:00:00 2001
From: Den <2119348+dzianisv@users.noreply.github.com>
Date: Sun, 27 Jul 2025 10:23:47 +0300
Subject: [PATCH 54/91] Add --timeout parameter to control wait time after
 query typing

---
 test_vibe_pyautogui.py | 66 +++++++++++++++++++++++++++++++-----------
 1 file changed, 49 insertions(+), 17 deletions(-)

diff --git a/test_vibe_pyautogui.py b/test_vibe_pyautogui.py
index 93282b2c42..48d4ebe4b9 100755
--- a/test_vibe_pyautogui.py
+++ b/test_vibe_pyautogui.py
@@ -5,16 +5,31 @@ Vibe Browser Extension Test using PyAutoGUI and Chrome DevTools Protocol
 
 import pyautogui
 import subprocess
-import time
-import os
-import sys
-import json
+import argparse
 import asyncio
 import glob
+import json
+import os
+import pyautogui
+import re
+import shutil
+import subprocess
+import sys
+import tempfile
+import threading
+import time
 import websockets
 import urllib.request
 from datetime import datetime
-import threading
+from typing import Optional
+
+def main():
+    parser = argparse.ArgumentParser(description='Vibe Browser Extension Test')
+    parser.add_argument('--timeout', type=int, default=10, help='Timeout in seconds')
+    args = parser.parse_args()
+
+    test = VibeExtensionTest()
+    test.run_test(args.timeout)
 
 class VibeExtensionTest:
     def __init__(self):
@@ -369,8 +384,13 @@ class VibeExtensionTest:
         except:
             pass
 
-    async def type_query(self, query="book a flight from SFO to JFK"):
-        """Type a query in the omnibox using PyAutoGUI."""
+    async def type_query(self, query="book a flight from SFO to JFK", timeout=120):
+        """Type a query in the omnibox using PyAutoGUI.
+        
+        Args:
+            query (str): Query to type in the browser
+            timeout (int): Time in seconds to wait after typing query
+        """
         print(f"\nüìã Step 3: Typing query: '{query}'...")
         
         # First make sure Chrome has fully loaded
@@ -412,12 +432,11 @@ class VibeExtensionTest:
             print("‚úÖ Query typing completed successfully")
             self.take_screenshot("3_after_typing_query")
             
-            # Wait for 3 minutes to let the AI agent work
-            print("\n‚è≥ Waiting for 3 minutes to let the AI agent work...")
-            wait_time = 180  # 3 minutes in seconds
-            for i in range(wait_time):
+            # Wait for the specified timeout to let the AI agent work
+            print(f"\n‚è≥ Waiting for {timeout} seconds to let the AI agent work...")
+            for i in range(timeout):
                 if i % 30 == 0:  # Print status every 30 seconds
-                    print(f"   Still waiting... {wait_time - i} seconds remaining")
+                    print(f"   Still waiting... {timeout - i} seconds remaining")
                 time.sleep(1)
                 
             print("‚úÖ Wait completed, taking final screenshot")
@@ -427,10 +446,16 @@ class VibeExtensionTest:
             print(f"‚ùå Typing failed: {e}")
             return False
 
-    async def run_complete_test(self):
-        """Run the complete test suite."""
+    async def run_complete_test(self, query="book flight SFO NYC Dec 1 one way", timeout=120):
+        """Run the complete test suite.
+        
+        Args:
+            query (str): Query to type in the browser
+            timeout (int): Time in seconds to wait after typing query
+        """
         start_time = time.time()
         print(f"üïê Test started at: {datetime.now()}")
+        print(f"‚öôÔ∏è Configuration: timeout={timeout}s, query='{query}'")
         
         try:
             print("üìã Step 1: Launching Chrome...")
@@ -444,8 +469,7 @@ class VibeExtensionTest:
                 return False
             
             print("üìã Step 3: Typing query...")
-            query_result = await self.type_query("book flight SFO NYC Dec 1 one way")
-            time.sleep(10)
+            query_result = await self.type_query(query, timeout)
             self.take_screenshot("4_after_query_processing")
             
             # Take another screenshot after a bit more time
@@ -468,8 +492,16 @@ class VibeExtensionTest:
 
 async def main():
     """Main entry point"""
+    # Parse command line arguments
+    parser = argparse.ArgumentParser(description='Test Vibe Browser Extension')
+    parser.add_argument('--timeout', type=int, default=120, 
+                        help='Time in seconds to wait after typing query (default: 120)')
+    parser.add_argument('--query', type=str, default="book flight SFO NYC Dec 1 one way",
+                        help='Query to type in the browser (default: "book flight SFO NYC Dec 1 one way")')
+    args = parser.parse_args()
+    
     test = VibeExtensionTest()
-    success = await test.run_complete_test()
+    success = await test.run_complete_test(query=args.query, timeout=args.timeout)
     sys.exit(0 if success else 1)
 
 if __name__ == "__main__":
-- 
2.50.0

